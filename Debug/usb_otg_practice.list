
usb_otg_practice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  0800ddd8  0800ddd8  0001ddd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e450  0800e450  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800e450  0800e450  0001e450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e458  0800e458  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e458  0800e458  0001e458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e45c  0800e45c  0001e45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800e460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ce8  20000090  0800e4f0  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003d78  0800e4f0  00023d78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af25  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004516  00000000  00000000  0003afe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  0003f500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00040688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb09  00000000  00000000  00041668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d858  00000000  00000000  0005d171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c7df  00000000  00000000  0007a9c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001071a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a3c  00000000  00000000  001071f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ddc0 	.word	0x0800ddc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800ddc0 	.word	0x0800ddc0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <initFlashMemoryManager>:
static void unlockFlashAccess(void);
static void waitForLastOperation(void);

/************ Public Functions ************/
extern void initFlashMemoryManager(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	unlockFlashAccess();
 8000588:	f000 f8aa 	bl	80006e0 <unlockFlashAccess>

	// Currently, the bootloader is in sectors 0 through 3.
	// We will allocate everything else for the application.
	// See reference manual page 44
	eraseFlashMemorySector(4);
 800058c:	2004      	movs	r0, #4
 800058e:	f000 f859 	bl	8000644 <eraseFlashMemorySector>
	eraseFlashMemorySector(5);
 8000592:	2005      	movs	r0, #5
 8000594:	f000 f856 	bl	8000644 <eraseFlashMemorySector>
	eraseFlashMemorySector(6);
 8000598:	2006      	movs	r0, #6
 800059a:	f000 f853 	bl	8000644 <eraseFlashMemorySector>
	eraseFlashMemorySector(7);
 800059e:	2007      	movs	r0, #7
 80005a0:	f000 f850 	bl	8000644 <eraseFlashMemorySector>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <exitFlashMemoryManager>:
extern void exitFlashMemoryManager(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	// Currently only locks memory when we are done writing in application.
	// Maybe a check could be added here.
	lockFlashAccess();
 80005ac:	f000 f882 	bl	80006b4 <lockFlashAccess>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <writeProgramFlash>:

extern void writeProgramFlash(uint32_t flashAddress, uint8_t* hexData, uint8_t dataLen)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	4613      	mov	r3, r2
 80005c0:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c2:	b672      	cpsid	i
}
 80005c4:	bf00      	nop
	// Disable interrupts
	__disable_irq();
	// Iterate through array and write to flash
	for(int i = 0; i < dataLen; i++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	e00d      	b.n	80005e8 <writeProgramFlash+0x34>
	{
		flashWriteByte(flashAddress, hexData[i]);
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	68ba      	ldr	r2, [r7, #8]
 80005d0:	4413      	add	r3, r2
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	68f8      	ldr	r0, [r7, #12]
 80005d8:	f000 f810 	bl	80005fc <flashWriteByte>
		flashAddress++;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3301      	adds	r3, #1
 80005e0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < dataLen; i++)
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	3301      	adds	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	697a      	ldr	r2, [r7, #20]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dbed      	blt.n	80005cc <writeProgramFlash+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 80005f0:	b662      	cpsie	i
}
 80005f2:	bf00      	nop
	}
	// Re-enable interrupts
	__enable_irq();
}
 80005f4:	bf00      	nop
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <flashWriteByte>:

static void flashWriteByte(uint32_t flashAddress, uint8_t hexByte)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]

	waitForLastOperation();
 8000608:	f000 f888 	bl	800071c <waitForLastOperation>

	// If the previous operation is completed, proceed to program the new data
	FLASH->CR &= CR_PSIZE_MASK;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <flashWriteByte+0x44>)
 800060e:	691b      	ldr	r3, [r3, #16]
 8000610:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <flashWriteByte+0x44>)
 8000612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000616:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_PSIZE_BYTE;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <flashWriteByte+0x44>)
 800061a:	4a09      	ldr	r2, [pc, #36]	; (8000640 <flashWriteByte+0x44>)
 800061c:	691b      	ldr	r3, [r3, #16]
 800061e:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <flashWriteByte+0x44>)
 8000622:	691b      	ldr	r3, [r3, #16]
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <flashWriteByte+0x44>)
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	6113      	str	r3, [r2, #16]

	*(__IO uint8_t*)flashAddress = hexByte;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	78fa      	ldrb	r2, [r7, #3]
 8000630:	701a      	strb	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000632:	f3bf 8f4f 	dsb	sy
}
 8000636:	bf00      	nop

	// Data synchronous Barrier (DSB) Just after the write operation
	//     This will force the CPU to respect the sequence of instruction (no optimization).
	__DSB();

}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40023c00 	.word	0x40023c00

08000644 <eraseFlashMemorySector>:

static void eraseFlashMemorySector(uint32_t sector)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	waitForLastOperation();
 800064c:	f000 f866 	bl	800071c <waitForLastOperation>

	unlockFlashAccess();
 8000650:	f000 f846 	bl	80006e0 <unlockFlashAccess>


	/* If the previous operation is completed, proceed to erase the sector */
	FLASH->CR &= CR_PSIZE_MASK;
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <eraseFlashMemorySector+0x6c>)
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	4a15      	ldr	r2, [pc, #84]	; (80006b0 <eraseFlashMemorySector+0x6c>)
 800065a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800065e:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_PSIZE_WORD;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <eraseFlashMemorySector+0x6c>)
 8000662:	691b      	ldr	r3, [r3, #16]
 8000664:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <eraseFlashMemorySector+0x6c>)
 8000666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800066a:	6113      	str	r3, [r2, #16]


	CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <eraseFlashMemorySector+0x6c>)
 800066e:	691b      	ldr	r3, [r3, #16]
 8000670:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <eraseFlashMemorySector+0x6c>)
 8000672:	f023 0301 	bic.w	r3, r3, #1
 8000676:	6113      	str	r3, [r2, #16]
	CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <eraseFlashMemorySector+0x6c>)
 800067a:	691b      	ldr	r3, [r3, #16]
 800067c:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <eraseFlashMemorySector+0x6c>)
 800067e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000682:	6113      	str	r3, [r2, #16]

	FLASH->CR |= FLASH_CR_SER | (sector << FLASH_CR_SNB_Pos);
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <eraseFlashMemorySector+0x6c>)
 8000686:	691a      	ldr	r2, [r3, #16]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	00db      	lsls	r3, r3, #3
 800068c:	4313      	orrs	r3, r2
 800068e:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <eraseFlashMemorySector+0x6c>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_STRT;
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <eraseFlashMemorySector+0x6c>)
 8000698:	691b      	ldr	r3, [r3, #16]
 800069a:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <eraseFlashMemorySector+0x6c>)
 800069c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006a0:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80006a2:	f3bf 8f4f 	dsb	sy
}
 80006a6:	bf00      	nop

	/* Data synchronous Barrier (DSB) Just after the write operation
    	This will force the CPU to respect the sequence of instruction (no optimization).*/
	__DSB();
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023c00 	.word	0x40023c00

080006b4 <lockFlashAccess>:

static void lockFlashAccess(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
	if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 1)
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <lockFlashAccess+0x28>)
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d005      	beq.n	80006d0 <lockFlashAccess+0x1c>
	{
		SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <lockFlashAccess+0x28>)
 80006c6:	691b      	ldr	r3, [r3, #16]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <lockFlashAccess+0x28>)
 80006ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006ce:	6113      	str	r3, [r2, #16]
	}
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40023c00 	.word	0x40023c00

080006e0 <unlockFlashAccess>:
static void unlockFlashAccess(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
	if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0)
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <unlockFlashAccess+0x30>)
 80006e6:	691b      	ldr	r3, [r3, #16]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	da0b      	bge.n	8000704 <unlockFlashAccess+0x24>
	{
		FLASH->KEYR |= KEY1;
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <unlockFlashAccess+0x30>)
 80006ee:	685a      	ldr	r2, [r3, #4]
 80006f0:	4907      	ldr	r1, [pc, #28]	; (8000710 <unlockFlashAccess+0x30>)
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <unlockFlashAccess+0x34>)
 80006f4:	4313      	orrs	r3, r2
 80006f6:	604b      	str	r3, [r1, #4]
		FLASH->KEYR |= KEY2;
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <unlockFlashAccess+0x30>)
 80006fa:	685a      	ldr	r2, [r3, #4]
 80006fc:	4904      	ldr	r1, [pc, #16]	; (8000710 <unlockFlashAccess+0x30>)
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <unlockFlashAccess+0x38>)
 8000700:	4313      	orrs	r3, r2
 8000702:	604b      	str	r3, [r1, #4]
	}
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40023c00 	.word	0x40023c00
 8000714:	45670123 	.word	0x45670123
 8000718:	cdef89ab 	.word	0xcdef89ab

0800071c <waitForLastOperation>:

static void waitForLastOperation(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
	while(READ_BIT(FLASH->SR, FLASH_SR_BSY));
 8000720:	bf00      	nop
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <waitForLastOperation+0x20>)
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1f9      	bne.n	8000722 <waitForLastOperation+0x6>
}
 800072e:	bf00      	nop
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40023c00 	.word	0x40023c00

08000740 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	4b31      	ldr	r3, [pc, #196]	; (8000820 <MX_GPIO_Init+0xe0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a30      	ldr	r2, [pc, #192]	; (8000820 <MX_GPIO_Init+0xe0>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b2e      	ldr	r3, [pc, #184]	; (8000820 <MX_GPIO_Init+0xe0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <MX_GPIO_Init+0xe0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a29      	ldr	r2, [pc, #164]	; (8000820 <MX_GPIO_Init+0xe0>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b27      	ldr	r3, [pc, #156]	; (8000820 <MX_GPIO_Init+0xe0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b23      	ldr	r3, [pc, #140]	; (8000820 <MX_GPIO_Init+0xe0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a22      	ldr	r2, [pc, #136]	; (8000820 <MX_GPIO_Init+0xe0>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MX_GPIO_Init+0xe0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_GPIO_Init+0xe0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a1b      	ldr	r2, [pc, #108]	; (8000820 <MX_GPIO_Init+0xe0>)
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_GPIO_Init+0xe0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0308 	and.w	r3, r3, #8
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2101      	movs	r1, #1
 80007ca:	4816      	ldr	r0, [pc, #88]	; (8000824 <MX_GPIO_Init+0xe4>)
 80007cc:	f001 f8aa 	bl	8001924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_green_Pin|LED_orange_Pin|LED_red_Pin|LED_blue_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007d6:	4814      	ldr	r0, [pc, #80]	; (8000828 <MX_GPIO_Init+0xe8>)
 80007d8:	f001 f8a4 	bl	8001924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007dc:	2301      	movs	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	480c      	ldr	r0, [pc, #48]	; (8000824 <MX_GPIO_Init+0xe4>)
 80007f4:	f000 ff12 	bl	800161c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_green_Pin|LED_orange_Pin|LED_red_Pin|LED_blue_Pin;
 80007f8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_GPIO_Init+0xe8>)
 8000812:	f000 ff03 	bl	800161c <HAL_GPIO_Init>

}
 8000816:	bf00      	nop
 8000818:	3728      	adds	r7, #40	; 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40020800 	.word	0x40020800
 8000828:	40020c00 	.word	0x40020c00

0800082c <parseHexLine>:
static uint8_t Char_to_Hex(uint8_t character);
static uint8_t String_to_Byte(uint8_t upper, uint8_t lower);
static void flushHexRow(HexFileRow_t* row);

extern int parseHexLine(HexFileRow_t* row, uint8_t* readBuf, uint8_t numBytes)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	4613      	mov	r3, r2
 8000838:	71fb      	strb	r3, [r7, #7]
	int err = HEX_PARSE_SUCCESS;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]

	if(readBuf[0] != ':')
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b3a      	cmp	r3, #58	; 0x3a
 8000844:	d001      	beq.n	800084a <parseHexLine+0x1e>
	{
		err = INVALID_START_CHARACTER;
 8000846:	2303      	movs	r3, #3
 8000848:	61fb      	str	r3, [r7, #28]
	}

	flushHexRow(row);
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	f000 f8b3 	bl	80009b6 <flushHexRow>
	// Get Record Length
	row->length = String_to_Byte(readBuf[1], readBuf[2]);
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	3301      	adds	r3, #1
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	3302      	adds	r3, #2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	4619      	mov	r1, r3
 800085e:	4610      	mov	r0, r2
 8000860:	f000 f8d2 	bl	8000a08 <String_to_Byte>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	701a      	strb	r2, [r3, #0]

	// Get Record Address
	row->lowAddress = (String_to_Byte(readBuf[3], readBuf[4]) << 8) |
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	3303      	adds	r3, #3
 8000870:	781a      	ldrb	r2, [r3, #0]
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	3304      	adds	r3, #4
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	4610      	mov	r0, r2
 800087c:	f000 f8c4 	bl	8000a08 <String_to_Byte>
 8000880:	4603      	mov	r3, r0
 8000882:	021b      	lsls	r3, r3, #8
 8000884:	b21c      	sxth	r4, r3
					   String_to_Byte(readBuf[5], readBuf[6]);
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	3305      	adds	r3, #5
 800088a:	781a      	ldrb	r2, [r3, #0]
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	3306      	adds	r3, #6
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4619      	mov	r1, r3
 8000894:	4610      	mov	r0, r2
 8000896:	f000 f8b7 	bl	8000a08 <String_to_Byte>
 800089a:	4603      	mov	r3, r0
 800089c:	b21b      	sxth	r3, r3
	row->lowAddress = (String_to_Byte(readBuf[3], readBuf[4]) << 8) |
 800089e:	4323      	orrs	r3, r4
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	805a      	strh	r2, [r3, #2]

	// Get Record Type
	row->recordType = String_to_Byte(readBuf[7], readBuf[8]);
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	3307      	adds	r3, #7
 80008ac:	781a      	ldrb	r2, [r3, #0]
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	3308      	adds	r3, #8
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	4610      	mov	r0, r2
 80008b8:	f000 f8a6 	bl	8000a08 <String_to_Byte>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	711a      	strb	r2, [r3, #4]
	if(row->recordType > 5)
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	791b      	ldrb	r3, [r3, #4]
 80008c8:	2b05      	cmp	r3, #5
 80008ca:	d901      	bls.n	80008d0 <parseHexLine+0xa4>
	{
		err = INVALID_RECORD_TYPE;
 80008cc:	2302      	movs	r3, #2
 80008ce:	61fb      	str	r3, [r7, #28]
	}

	// Store Data
	uint8_t dataStart = 9;
 80008d0:	2309      	movs	r3, #9
 80008d2:	76fb      	strb	r3, [r7, #27]
	for(int i = 0; i < row->length; i++)
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	e019      	b.n	800090e <parseHexLine+0xe2>
	{
		row->data[i] = String_to_Byte(readBuf[dataStart], readBuf[dataStart + 1]);
 80008da:	7efb      	ldrb	r3, [r7, #27]
 80008dc:	68ba      	ldr	r2, [r7, #8]
 80008de:	4413      	add	r3, r2
 80008e0:	7818      	ldrb	r0, [r3, #0]
 80008e2:	7efb      	ldrb	r3, [r7, #27]
 80008e4:	3301      	adds	r3, #1
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	4413      	add	r3, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4619      	mov	r1, r3
 80008ee:	f000 f88b 	bl	8000a08 <String_to_Byte>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4619      	mov	r1, r3
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	4413      	add	r3, r2
 80008fc:	3305      	adds	r3, #5
 80008fe:	460a      	mov	r2, r1
 8000900:	701a      	strb	r2, [r3, #0]
		dataStart = dataStart+2;
 8000902:	7efb      	ldrb	r3, [r7, #27]
 8000904:	3302      	adds	r3, #2
 8000906:	76fb      	strb	r3, [r7, #27]
	for(int i = 0; i < row->length; i++)
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	3301      	adds	r3, #1
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	4293      	cmp	r3, r2
 8000918:	dbdf      	blt.n	80008da <parseHexLine+0xae>
	}

	// Get Checksum
	row->checksum = String_to_Byte(readBuf[dataStart], readBuf[dataStart + 1]);
 800091a:	7efb      	ldrb	r3, [r7, #27]
 800091c:	68ba      	ldr	r2, [r7, #8]
 800091e:	4413      	add	r3, r2
 8000920:	7818      	ldrb	r0, [r3, #0]
 8000922:	7efb      	ldrb	r3, [r7, #27]
 8000924:	3301      	adds	r3, #1
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	4413      	add	r3, r2
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	f000 f86b 	bl	8000a08 <String_to_Byte>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	755a      	strb	r2, [r3, #21]

	// Calculate Checksum Based on Data in Structure
	row->calc_checksum = row->length + (uint8_t)(row->lowAddress & 0x00FF) + (uint8_t)((row->lowAddress & 0xFF00) >> 8) + (uint8_t)row->recordType;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	781a      	ldrb	r2, [r3, #0]
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	885b      	ldrh	r3, [r3, #2]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	4413      	add	r3, r2
 8000946:	b2da      	uxtb	r2, r3
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	885b      	ldrh	r3, [r3, #2]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	b29b      	uxth	r3, r3
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4413      	add	r3, r2
 8000954:	b2da      	uxtb	r2, r3
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	791b      	ldrb	r3, [r3, #4]
 800095a:	4413      	add	r3, r2
 800095c:	b2da      	uxtb	r2, r3
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	759a      	strb	r2, [r3, #22]
	for(int i = 0; i < row->length; i++)
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	e00d      	b.n	8000984 <parseHexLine+0x158>
	{
		row->calc_checksum += row->data[i];
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	7d9a      	ldrb	r2, [r3, #22]
 800096c:	68f9      	ldr	r1, [r7, #12]
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	440b      	add	r3, r1
 8000972:	3305      	adds	r3, #5
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	b2da      	uxtb	r2, r3
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	759a      	strb	r2, [r3, #22]
	for(int i = 0; i < row->length; i++)
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	3301      	adds	r3, #1
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	4293      	cmp	r3, r2
 800098e:	dbeb      	blt.n	8000968 <parseHexLine+0x13c>
	}

	row->calc_checksum = 1 + ~(row->calc_checksum);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	7d9b      	ldrb	r3, [r3, #22]
 8000994:	425b      	negs	r3, r3
 8000996:	b2da      	uxtb	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	759a      	strb	r2, [r3, #22]

	if(row->calc_checksum != row->checksum)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	7d9a      	ldrb	r2, [r3, #22]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	7d5b      	ldrb	r3, [r3, #21]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d001      	beq.n	80009ac <parseHexLine+0x180>
	{
		err = CHECKSUM_MISMATCH;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61fb      	str	r3, [r7, #28]
	}

	return err;
 80009ac:	69fb      	ldr	r3, [r7, #28]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3724      	adds	r7, #36	; 0x24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd90      	pop	{r4, r7, pc}

080009b6 <flushHexRow>:

static void flushHexRow(HexFileRow_t* row)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b085      	sub	sp, #20
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
	row->length = 0;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
	row->lowAddress = 0;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	805a      	strh	r2, [r3, #2]
	row->recordType = 0;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	711a      	strb	r2, [r3, #4]
	row->checksum = 0;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	755a      	strb	r2, [r3, #21]
	row->calc_checksum = 0;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	759a      	strb	r2, [r3, #22]
	for(int i = 0; i<16; i++){ row->data[i] = 0; }
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	e008      	b.n	80009f4 <flushHexRow+0x3e>
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4413      	add	r3, r2
 80009e8:	3305      	adds	r3, #5
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	3301      	adds	r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	2b0f      	cmp	r3, #15
 80009f8:	ddf3      	ble.n	80009e2 <flushHexRow+0x2c>
}
 80009fa:	bf00      	nop
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <String_to_Byte>:

static uint8_t String_to_Byte(uint8_t upper, uint8_t lower)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	460a      	mov	r2, r1
 8000a12:	71fb      	strb	r3, [r7, #7]
 8000a14:	4613      	mov	r3, r2
 8000a16:	71bb      	strb	r3, [r7, #6]
	upper = Char_to_Hex(upper) << 4;
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f812 	bl	8000a44 <Char_to_Hex>
 8000a20:	4603      	mov	r3, r0
 8000a22:	011b      	lsls	r3, r3, #4
 8000a24:	71fb      	strb	r3, [r7, #7]
	lower = Char_to_Hex(lower);
 8000a26:	79bb      	ldrb	r3, [r7, #6]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f80b 	bl	8000a44 <Char_to_Hex>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71bb      	strb	r3, [r7, #6]

	return (upper | lower);
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	79bb      	ldrb	r3, [r7, #6]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	b2db      	uxtb	r3, r3
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <Char_to_Hex>:

static uint8_t Char_to_Hex(uint8_t character)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	switch(character)
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	3b30      	subs	r3, #48	; 0x30
 8000a52:	2b16      	cmp	r3, #22
 8000a54:	d860      	bhi.n	8000b18 <Char_to_Hex+0xd4>
 8000a56:	a201      	add	r2, pc, #4	; (adr r2, 8000a5c <Char_to_Hex+0x18>)
 8000a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5c:	08000ab9 	.word	0x08000ab9
 8000a60:	08000abf 	.word	0x08000abf
 8000a64:	08000ac5 	.word	0x08000ac5
 8000a68:	08000acb 	.word	0x08000acb
 8000a6c:	08000ad1 	.word	0x08000ad1
 8000a70:	08000ad7 	.word	0x08000ad7
 8000a74:	08000add 	.word	0x08000add
 8000a78:	08000ae3 	.word	0x08000ae3
 8000a7c:	08000ae9 	.word	0x08000ae9
 8000a80:	08000aef 	.word	0x08000aef
 8000a84:	08000b19 	.word	0x08000b19
 8000a88:	08000b19 	.word	0x08000b19
 8000a8c:	08000b19 	.word	0x08000b19
 8000a90:	08000b19 	.word	0x08000b19
 8000a94:	08000b19 	.word	0x08000b19
 8000a98:	08000b19 	.word	0x08000b19
 8000a9c:	08000b19 	.word	0x08000b19
 8000aa0:	08000af5 	.word	0x08000af5
 8000aa4:	08000afb 	.word	0x08000afb
 8000aa8:	08000b01 	.word	0x08000b01
 8000aac:	08000b07 	.word	0x08000b07
 8000ab0:	08000b0d 	.word	0x08000b0d
 8000ab4:	08000b13 	.word	0x08000b13
	{
	case '0':
		ret = 0x00;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	73fb      	strb	r3, [r7, #15]
		break;
 8000abc:	e02e      	b.n	8000b1c <Char_to_Hex+0xd8>
	case '1':
		ret = 0x01;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	73fb      	strb	r3, [r7, #15]
		break;
 8000ac2:	e02b      	b.n	8000b1c <Char_to_Hex+0xd8>
	case '2':
		ret = 0x02;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	73fb      	strb	r3, [r7, #15]
		break;
 8000ac8:	e028      	b.n	8000b1c <Char_to_Hex+0xd8>
	case '3':
		ret = 0x03;
 8000aca:	2303      	movs	r3, #3
 8000acc:	73fb      	strb	r3, [r7, #15]
		break;
 8000ace:	e025      	b.n	8000b1c <Char_to_Hex+0xd8>
	case '4':
		ret = 0x04;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	73fb      	strb	r3, [r7, #15]
		break;
 8000ad4:	e022      	b.n	8000b1c <Char_to_Hex+0xd8>
	case '5':
		ret = 0x05;
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	73fb      	strb	r3, [r7, #15]
		break;
 8000ada:	e01f      	b.n	8000b1c <Char_to_Hex+0xd8>
	case '6':
		ret = 0x06;
 8000adc:	2306      	movs	r3, #6
 8000ade:	73fb      	strb	r3, [r7, #15]
		break;
 8000ae0:	e01c      	b.n	8000b1c <Char_to_Hex+0xd8>
	case '7':
		ret = 0x07;
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	73fb      	strb	r3, [r7, #15]
		break;
 8000ae6:	e019      	b.n	8000b1c <Char_to_Hex+0xd8>
	case '8':
		ret = 0x08;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	73fb      	strb	r3, [r7, #15]
		break;
 8000aec:	e016      	b.n	8000b1c <Char_to_Hex+0xd8>
	case '9':
		ret = 0x09;
 8000aee:	2309      	movs	r3, #9
 8000af0:	73fb      	strb	r3, [r7, #15]
		break;
 8000af2:	e013      	b.n	8000b1c <Char_to_Hex+0xd8>
	case 'A':
		ret = 0x0A;
 8000af4:	230a      	movs	r3, #10
 8000af6:	73fb      	strb	r3, [r7, #15]
		break;
 8000af8:	e010      	b.n	8000b1c <Char_to_Hex+0xd8>
	case 'B':
		ret = 0x0B;
 8000afa:	230b      	movs	r3, #11
 8000afc:	73fb      	strb	r3, [r7, #15]
		break;
 8000afe:	e00d      	b.n	8000b1c <Char_to_Hex+0xd8>
	case 'C':
		ret = 0x0C;
 8000b00:	230c      	movs	r3, #12
 8000b02:	73fb      	strb	r3, [r7, #15]
		break;
 8000b04:	e00a      	b.n	8000b1c <Char_to_Hex+0xd8>
	case 'D':
		ret = 0x0D;
 8000b06:	230d      	movs	r3, #13
 8000b08:	73fb      	strb	r3, [r7, #15]
		break;
 8000b0a:	e007      	b.n	8000b1c <Char_to_Hex+0xd8>
	case 'E':
		ret = 0x0E;
 8000b0c:	230e      	movs	r3, #14
 8000b0e:	73fb      	strb	r3, [r7, #15]
		break;
 8000b10:	e004      	b.n	8000b1c <Char_to_Hex+0xd8>
	case 'F':
		ret = 0x0F;
 8000b12:	230f      	movs	r3, #15
 8000b14:	73fb      	strb	r3, [r7, #15]
		break;
 8000b16:	e001      	b.n	8000b1c <Char_to_Hex+0xd8>
	default:
		//ERROR
		ret = 0xFF;
 8000b18:	23ff      	movs	r3, #255	; 0xff
 8000b1a:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b5b0      	push	{r4, r5, r7, lr}
 8000b2e:	b092      	sub	sp, #72	; 0x48
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b32:	f000 fbcb 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b36:	f000 f86d 	bl	8000c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3a:	f7ff fe01 	bl	8000740 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8000b3e:	f00c f97d 	bl	800ce3c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000b42:	f000 f99d 	bl	8000e80 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000b46:	f004 fb51 	bl	80051ec <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  typedef  void (*pFunction)(void);
  pFunction Jump_To_Application;
  uint32_t JumpAddress;
  JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <main+0xc8>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	647b      	str	r3, [r7, #68]	; 0x44
  Jump_To_Application = (pFunction) JumpAddress;
 8000b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b52:	643b      	str	r3, [r7, #64]	; 0x40
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t start_msg[] = "**************** USB Example Start ***************\r\n";
 8000b54:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <main+0xcc>)
 8000b56:	1d3c      	adds	r4, r7, #4
 8000b58:	461d      	mov	r5, r3
 8000b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b66:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b6a:	6020      	str	r0, [r4, #0]
 8000b6c:	3404      	adds	r4, #4
 8000b6e:	7021      	strb	r1, [r4, #0]
  HAL_UART_Transmit(&huart2, start_msg, sizeof(start_msg), 100);
 8000b70:	1d39      	adds	r1, r7, #4
 8000b72:	2364      	movs	r3, #100	; 0x64
 8000b74:	2235      	movs	r2, #53	; 0x35
 8000b76:	4821      	ldr	r0, [pc, #132]	; (8000bfc <main+0xd0>)
 8000b78:	f002 ffdd 	bl	8003b36 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000b7c:	f00c f984 	bl	800ce88 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    switch(Appli_state)
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <main+0xd4>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d008      	beq.n	8000b9a <main+0x6e>
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d130      	bne.n	8000bee <main+0xc2>
    {
    case APPLICATION_DISCONNECT:
    	HAL_GPIO_WritePin(GPIOD, LED_green_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b92:	481c      	ldr	r0, [pc, #112]	; (8000c04 <main+0xd8>)
 8000b94:	f000 fec6 	bl	8001924 <HAL_GPIO_WritePin>
     	break;
 8000b98:	e02a      	b.n	8000bf0 <main+0xc4>
    case APPLICATION_READY:
     	HAL_UART_Transmit(&huart2, (uint8_t*)"Ready\r\n", 7, 100);
 8000b9a:	2364      	movs	r3, #100	; 0x64
 8000b9c:	2207      	movs	r2, #7
 8000b9e:	491a      	ldr	r1, [pc, #104]	; (8000c08 <main+0xdc>)
 8000ba0:	4816      	ldr	r0, [pc, #88]	; (8000bfc <main+0xd0>)
 8000ba2:	f002 ffc8 	bl	8003b36 <HAL_UART_Transmit>
     	HAL_GPIO_WritePin(GPIOD, LED_green_Pin, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bac:	4815      	ldr	r0, [pc, #84]	; (8000c04 <main+0xd8>)
 8000bae:	f000 feb9 	bl	8001924 <HAL_GPIO_WritePin>
       	MSC_Application();
 8000bb2:	f000 f897 	bl	8000ce4 <MSC_Application>
       	HAL_GPIO_WritePin(GPIOD, LED_green_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bbc:	4811      	ldr	r0, [pc, #68]	; (8000c04 <main+0xd8>)
 8000bbe:	f000 feb1 	bl	8001924 <HAL_GPIO_WritePin>
       	HAL_GPIO_WritePin(GPIOD, LED_blue_Pin, GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc8:	480e      	ldr	r0, [pc, #56]	; (8000c04 <main+0xd8>)
 8000bca:	f000 feab 	bl	8001924 <HAL_GPIO_WritePin>

       	SCB->VTOR = APPLICATION_ADDRESS;
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <main+0xe0>)
 8000bd0:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <main+0xe4>)
 8000bd2:	609a      	str	r2, [r3, #8]
       	__set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <main+0xe4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bdc:	f383 8808 	msr	MSP, r3
}
 8000be0:	bf00      	nop
       	Jump_To_Application();
 8000be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000be4:	4798      	blx	r3

       	Appli_state = 5;
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <main+0xd4>)
 8000be8:	2205      	movs	r2, #5
 8000bea:	701a      	strb	r2, [r3, #0]
       	break;
 8000bec:	e000      	b.n	8000bf0 <main+0xc4>
    default:
      	//do nothing
       	break;
 8000bee:	bf00      	nop
    MX_USB_HOST_Process();
 8000bf0:	e7c4      	b.n	8000b7c <main+0x50>
 8000bf2:	bf00      	nop
 8000bf4:	08010004 	.word	0x08010004
 8000bf8:	0800dde0 	.word	0x0800dde0
 8000bfc:	200010f0 	.word	0x200010f0
 8000c00:	20003a60 	.word	0x20003a60
 8000c04:	40020c00 	.word	0x40020c00
 8000c08:	0800ddd8 	.word	0x0800ddd8
 8000c0c:	e000ed00 	.word	0xe000ed00
 8000c10:	08010000 	.word	0x08010000

08000c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b094      	sub	sp, #80	; 0x50
 8000c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1a:	f107 0320 	add.w	r3, r7, #32
 8000c1e:	2230      	movs	r2, #48	; 0x30
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f00c fc64 	bl	800d4f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	4b27      	ldr	r3, [pc, #156]	; (8000cdc <SystemClock_Config+0xc8>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	4a26      	ldr	r2, [pc, #152]	; (8000cdc <SystemClock_Config+0xc8>)
 8000c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c46:	6413      	str	r3, [r2, #64]	; 0x40
 8000c48:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <SystemClock_Config+0xc8>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <SystemClock_Config+0xcc>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a20      	ldr	r2, [pc, #128]	; (8000ce0 <SystemClock_Config+0xcc>)
 8000c5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <SystemClock_Config+0xcc>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c70:	2301      	movs	r3, #1
 8000c72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c84:	2304      	movs	r3, #4
 8000c86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c88:	23c0      	movs	r3, #192	; 0xc0
 8000c8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000c90:	2308      	movs	r3, #8
 8000c92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c94:	f107 0320 	add.w	r3, r7, #32
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f002 fa67 	bl	800316c <HAL_RCC_OscConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ca4:	f000 f842 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca8:	230f      	movs	r3, #15
 8000caa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cac:	2302      	movs	r3, #2
 8000cae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cb4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	2103      	movs	r1, #3
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 fcc9 	bl	800365c <HAL_RCC_ClockConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cd0:	f000 f82c 	bl	8000d2c <Error_Handler>
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3750      	adds	r7, #80	; 0x50
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40007000 	.word	0x40007000

08000ce4 <MSC_Application>:

/* USER CODE BEGIN 4 */
static void MSC_Application(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	  // Register the file system object to the FatFs module
	  if(f_mount(&USBDISKFatFs, (TCHAR const*)USBDISKPath, 0) != FR_OK)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	490b      	ldr	r1, [pc, #44]	; (8000d18 <MSC_Application+0x34>)
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <MSC_Application+0x38>)
 8000cee:	f00a ff75 	bl	800bbdc <f_mount>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d006      	beq.n	8000d06 <MSC_Application+0x22>
	  {
	    // FatFs Initialization Error
		  HAL_UART_Transmit(&huart2, (uint8_t*)"USB Init Error\r\n", 16, 100);
 8000cf8:	2364      	movs	r3, #100	; 0x64
 8000cfa:	2210      	movs	r2, #16
 8000cfc:	4908      	ldr	r1, [pc, #32]	; (8000d20 <MSC_Application+0x3c>)
 8000cfe:	4809      	ldr	r0, [pc, #36]	; (8000d24 <MSC_Application+0x40>)
 8000d00:	f002 ff19 	bl	8003b36 <HAL_UART_Transmit>
		  return;
 8000d04:	e007      	b.n	8000d16 <MSC_Application+0x32>
	  }
	  HAL_UART_Transmit(&huart2, (uint8_t*)"USB Mounted. Booting Image From Flash Drive...\r\n", 48, 100);
 8000d06:	2364      	movs	r3, #100	; 0x64
 8000d08:	2230      	movs	r2, #48	; 0x30
 8000d0a:	4907      	ldr	r1, [pc, #28]	; (8000d28 <MSC_Application+0x44>)
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MSC_Application+0x40>)
 8000d0e:	f002 ff12 	bl	8003b36 <HAL_UART_Transmit>
	  boot_from_USBFlash();
 8000d12:	f000 f927 	bl	8000f64 <boot_from_USBFlash>
}
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200010e8 	.word	0x200010e8
 8000d1c:	200000ac 	.word	0x200000ac
 8000d20:	0800de18 	.word	0x0800de18
 8000d24:	200010f0 	.word	0x200010f0
 8000d28:	0800de2c 	.word	0x0800de2c

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>
	...

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d76:	2007      	movs	r0, #7
 8000d78:	f000 fc0e 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40023800 	.word	0x40023800

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd4:	f000 facc 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <OTG_FS_IRQHandler+0x10>)
 8000de2:	f001 f823 	bl	8001e2c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20003a64 	.word	0x20003a64

08000df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <_sbrk+0x5c>)
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <_sbrk+0x60>)
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <_sbrk+0x64>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <_sbrk+0x68>)
 8000e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d207      	bcs.n	8000e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e20:	f00c fb1e 	bl	800d460 <__errno>
 8000e24:	4603      	mov	r3, r0
 8000e26:	220c      	movs	r2, #12
 8000e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	e009      	b.n	8000e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <_sbrk+0x64>)
 8000e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20020000 	.word	0x20020000
 8000e50:	00000400 	.word	0x00000400
 8000e54:	200010ec 	.word	0x200010ec
 8000e58:	20003d78 	.word	0x20003d78

08000e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <SystemInit+0x20>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <SystemInit+0x20>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <MX_USART2_UART_Init+0x50>)
 8000e88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000eb8:	f002 fdf0 	bl	8003a9c <HAL_UART_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ec2:	f7ff ff33 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200010f0 	.word	0x200010f0
 8000ed0:	40004400 	.word	0x40004400

08000ed4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a19      	ldr	r2, [pc, #100]	; (8000f58 <HAL_UART_MspInit+0x84>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12b      	bne.n	8000f4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <HAL_UART_MspInit+0x88>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <HAL_UART_MspInit+0x88>)
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_UART_MspInit+0x88>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_UART_MspInit+0x88>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a10      	ldr	r2, [pc, #64]	; (8000f5c <HAL_UART_MspInit+0x88>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_UART_MspInit+0x88>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f2e:	230c      	movs	r3, #12
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f3e:	2307      	movs	r3, #7
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <HAL_UART_MspInit+0x8c>)
 8000f4a:	f000 fb67 	bl	800161c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3728      	adds	r7, #40	; 0x28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40004400 	.word	0x40004400
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020000 	.word	0x40020000

08000f64 <boot_from_USBFlash>:

static int processHexLine(HexFileRow_t* hexRow);
static void flush_buffer(uint8_t* buffer, uint16_t size);

extern void boot_from_USBFlash()
{
 8000f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f66:	b0f1      	sub	sp, #452	; 0x1c4
 8000f68:	af16      	add	r7, sp, #88	; 0x58
	uint32_t byteswritten;                     /* File write/read counts */
	uint8_t hexRawLine[46];                                   /* File read buffer */
	HexFileRow_t hexRow;
	hexRow.upperAddress = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
	hexRow.segmentAddress = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	int hexLineCounter = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	char log_str[200];
	uint8_t booting = 1; // Used as boolean
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	int err;

	// Attempt to open files
	f_open(&LogFile, "error_log.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8000f82:	220a      	movs	r2, #10
 8000f84:	4972      	ldr	r1, [pc, #456]	; (8001150 <boot_from_USBFlash+0x1ec>)
 8000f86:	4873      	ldr	r0, [pc, #460]	; (8001154 <boot_from_USBFlash+0x1f0>)
 8000f88:	f00a fe6e 	bl	800bc68 <f_open>
	if(f_open(&HexFile, "blinky.hex", FA_READ) != FR_OK)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4972      	ldr	r1, [pc, #456]	; (8001158 <boot_from_USBFlash+0x1f4>)
 8000f90:	4872      	ldr	r0, [pc, #456]	; (800115c <boot_from_USBFlash+0x1f8>)
 8000f92:	f00a fe69 	bl	800bc68 <f_open>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d006      	beq.n	8000faa <boot_from_USBFlash+0x46>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"Open Read Failed\r\n", 18, 100);
 8000f9c:	2364      	movs	r3, #100	; 0x64
 8000f9e:	2212      	movs	r2, #18
 8000fa0:	496f      	ldr	r1, [pc, #444]	; (8001160 <boot_from_USBFlash+0x1fc>)
 8000fa2:	4870      	ldr	r0, [pc, #448]	; (8001164 <boot_from_USBFlash+0x200>)
 8000fa4:	f002 fdc7 	bl	8003b36 <HAL_UART_Transmit>
 8000fa8:	e0cd      	b.n	8001146 <boot_from_USBFlash+0x1e2>
		return;
	}
	// Start with upper address of 0 until changed
	hexRow.upperAddress = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124

	initFlashMemoryManager();
 8000fb0:	f7ff fae8 	bl	8000584 <initFlashMemoryManager>
	while(booting)
 8000fb4:	e0b2      	b.n	800111c <boot_from_USBFlash+0x1b8>
	{
		hexLineCounter++;
 8000fb6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000fba:	3301      	adds	r3, #1
 8000fbc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		if(hexLineCounter > 9150) break;
 8000fc0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000fc4:	f242 32be 	movw	r2, #9150	; 0x23be
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	f300 80ad 	bgt.w	8001128 <boot_from_USBFlash+0x1c4>

		flush_buffer(hexRawLine, sizeof(hexRawLine));
 8000fce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000fd2:	212e      	movs	r1, #46	; 0x2e
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f933 	bl	8001240 <flush_buffer>

		// Get next line from hex file
		f_gets((char *)hexRawLine, sizeof(hexRawLine), &HexFile);
 8000fda:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000fde:	4a5f      	ldr	r2, [pc, #380]	; (800115c <boot_from_USBFlash+0x1f8>)
 8000fe0:	212e      	movs	r1, #46	; 0x2e
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f00b fdca 	bl	800cb7c <f_gets>

	  	//Process hex line
	  	err = parseHexLine(&hexRow, hexRawLine, sizeof(hexRawLine));
 8000fe8:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8000fec:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000ff0:	222e      	movs	r2, #46	; 0x2e
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fc1a 	bl	800082c <parseHexLine>
 8000ff8:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c

	  	// Decide What to do based on Record Type:
	  	booting = processHexLine(&hexRow);
 8000ffc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001000:	4618      	mov	r0, r3
 8001002:	f000 f8b5 	bl	8001170 <processHexLine>
 8001006:	4603      	mov	r3, r0
 8001008:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163

	  	if(err)
 800100c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 8083 	beq.w	800111c <boot_from_USBFlash+0x1b8>
	  	{
	  		flush_buffer((uint8_t*)log_str, sizeof(log_str));
 8001016:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800101a:	21c8      	movs	r1, #200	; 0xc8
 800101c:	4618      	mov	r0, r3
 800101e:	f000 f90f 	bl	8001240 <flush_buffer>
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
	  		err, hexLineCounter, hexRow.length, hexRow.lowAddress, hexRow.upperAddress, hexRow.recordType,
 8001022:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
	  		err, hexLineCounter, hexRow.length, hexRow.lowAddress, hexRow.upperAddress, hexRow.recordType,
 8001028:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 800102c:	63bb      	str	r3, [r7, #56]	; 0x38
	  		err, hexLineCounter, hexRow.length, hexRow.lowAddress, hexRow.upperAddress, hexRow.recordType,
 800102e:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
	  		err, hexLineCounter, hexRow.length, hexRow.lowAddress, hexRow.upperAddress, hexRow.recordType,
 8001034:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 8001038:	633b      	str	r3, [r7, #48]	; 0x30
						hexRow.data[0], hexRow.data[1], hexRow.data[2], hexRow.data[3],
 800103a:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
						hexRow.data[0], hexRow.data[1], hexRow.data[2], hexRow.data[3],
 8001040:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
						hexRow.data[0], hexRow.data[1], hexRow.data[2], hexRow.data[3],
 8001046:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
						hexRow.data[0], hexRow.data[1], hexRow.data[2], hexRow.data[3],
 800104c:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 8001050:	623b      	str	r3, [r7, #32]
						hexRow.data[4], hexRow.data[5], hexRow.data[6], hexRow.data[7],
 8001052:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 8001056:	61fb      	str	r3, [r7, #28]
						hexRow.data[4], hexRow.data[5], hexRow.data[6], hexRow.data[7],
 8001058:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 800105c:	61bb      	str	r3, [r7, #24]
						hexRow.data[4], hexRow.data[5], hexRow.data[6], hexRow.data[7],
 800105e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 8001062:	617b      	str	r3, [r7, #20]
						hexRow.data[4], hexRow.data[5], hexRow.data[6], hexRow.data[7],
 8001064:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 8001068:	613b      	str	r3, [r7, #16]
						hexRow.data[8], hexRow.data[9], hexRow.data[10], hexRow.data[11],
 800106a:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 800106e:	60fb      	str	r3, [r7, #12]
						hexRow.data[8], hexRow.data[9], hexRow.data[10], hexRow.data[11],
 8001070:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 8001074:	60bb      	str	r3, [r7, #8]
						hexRow.data[8], hexRow.data[9], hexRow.data[10], hexRow.data[11],
 8001076:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 800107a:	607b      	str	r3, [r7, #4]
						hexRow.data[8], hexRow.data[9], hexRow.data[10], hexRow.data[11],
 800107c:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 8001080:	603b      	str	r3, [r7, #0]
						hexRow.data[12], hexRow.data[13], hexRow.data[14],
 8001082:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 8001086:	461e      	mov	r6, r3
						hexRow.data[12], hexRow.data[13], hexRow.data[14],
 8001088:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 800108c:	461d      	mov	r5, r3
						hexRow.data[12], hexRow.data[13], hexRow.data[14],
 800108e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 8001092:	461c      	mov	r4, r3
						hexRow.data[15], hexRow.checksum, hexRow.calc_checksum);
 8001094:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 8001098:	4619      	mov	r1, r3
						hexRow.data[15], hexRow.checksum, hexRow.calc_checksum);
 800109a:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 800109e:	461a      	mov	r2, r3
						hexRow.data[15], hexRow.checksum, hexRow.calc_checksum);
 80010a0:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
	  		sprintf(log_str, "\ERROR CODE: %d\nExiting on Hex Line: %d\nLength: %x\nLower Addr: %x\nUpper Addr: %x\nType: %x\nData: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\nChecksum: %x\nVerify Checksum: %x\n",
 80010a4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80010a8:	9315      	str	r3, [sp, #84]	; 0x54
 80010aa:	9214      	str	r2, [sp, #80]	; 0x50
 80010ac:	9113      	str	r1, [sp, #76]	; 0x4c
 80010ae:	9412      	str	r4, [sp, #72]	; 0x48
 80010b0:	9511      	str	r5, [sp, #68]	; 0x44
 80010b2:	9610      	str	r6, [sp, #64]	; 0x40
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	920f      	str	r2, [sp, #60]	; 0x3c
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	920e      	str	r2, [sp, #56]	; 0x38
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	920d      	str	r2, [sp, #52]	; 0x34
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	920c      	str	r2, [sp, #48]	; 0x30
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	920a      	str	r2, [sp, #40]	; 0x28
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	9209      	str	r2, [sp, #36]	; 0x24
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	9208      	str	r2, [sp, #32]
 80010d4:	6a3a      	ldr	r2, [r7, #32]
 80010d6:	9207      	str	r2, [sp, #28]
 80010d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010da:	9206      	str	r2, [sp, #24]
 80010dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010de:	9205      	str	r2, [sp, #20]
 80010e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010e2:	9204      	str	r2, [sp, #16]
 80010e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010e6:	9203      	str	r2, [sp, #12]
 80010e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010ea:	9202      	str	r2, [sp, #8]
 80010ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010ee:	9201      	str	r2, [sp, #4]
 80010f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80010f8:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80010fc:	491a      	ldr	r1, [pc, #104]	; (8001168 <boot_from_USBFlash+0x204>)
 80010fe:	f00c faef 	bl	800d6e0 <siprintf>

	  	  	// Log Checksum Error
	  	  	byteswritten = sizeof(log_str);
 8001102:	23c8      	movs	r3, #200	; 0xc8
 8001104:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	  	  	f_write(&LogFile, log_str, byteswritten, (void *)&byteswritten);
 8001108:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800110c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001110:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001114:	480f      	ldr	r0, [pc, #60]	; (8001154 <boot_from_USBFlash+0x1f0>)
 8001116:	f00b fa12 	bl	800c53e <f_write>
	  	  	break;
 800111a:	e006      	b.n	800112a <boot_from_USBFlash+0x1c6>
	while(booting)
 800111c:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8001120:	2b00      	cmp	r3, #0
 8001122:	f47f af48 	bne.w	8000fb6 <boot_from_USBFlash+0x52>
 8001126:	e000      	b.n	800112a <boot_from_USBFlash+0x1c6>
		if(hexLineCounter > 9150) break;
 8001128:	bf00      	nop
	  	}


	}
	exitFlashMemoryManager();
 800112a:	f7ff fa3d 	bl	80005a8 <exitFlashMemoryManager>

	HAL_UART_Transmit(&huart2, (uint8_t*)"Boot Terminated.\r\n", 18, 100);
 800112e:	2364      	movs	r3, #100	; 0x64
 8001130:	2212      	movs	r2, #18
 8001132:	490e      	ldr	r1, [pc, #56]	; (800116c <boot_from_USBFlash+0x208>)
 8001134:	480b      	ldr	r0, [pc, #44]	; (8001164 <boot_from_USBFlash+0x200>)
 8001136:	f002 fcfe 	bl	8003b36 <HAL_UART_Transmit>
	f_close(&LogFile);
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <boot_from_USBFlash+0x1f0>)
 800113c:	f00b fcf4 	bl	800cb28 <f_close>
	f_close(&HexFile);
 8001140:	4806      	ldr	r0, [pc, #24]	; (800115c <boot_from_USBFlash+0x1f8>)
 8001142:	f00b fcf1 	bl	800cb28 <f_close>
}
 8001146:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 800114a:	46bd      	mov	sp, r7
 800114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800114e:	bf00      	nop
 8001150:	0800de60 	.word	0x0800de60
 8001154:	20002190 	.word	0x20002190
 8001158:	0800de70 	.word	0x0800de70
 800115c:	20001138 	.word	0x20001138
 8001160:	0800de7c 	.word	0x0800de7c
 8001164:	200010f0 	.word	0x200010f0
 8001168:	0800de90 	.word	0x0800de90
 800116c:	0800df44 	.word	0x0800df44

08001170 <processHexLine>:

static int processHexLine(HexFileRow_t* hexRow)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	uint16_t addrBuf;
	uint32_t fullAddress;

  	switch(hexRow->recordType)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	791b      	ldrb	r3, [r3, #4]
 800117c:	2b05      	cmp	r3, #5
 800117e:	d859      	bhi.n	8001234 <processHexLine+0xc4>
 8001180:	a201      	add	r2, pc, #4	; (adr r2, 8001188 <processHexLine+0x18>)
 8001182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001186:	bf00      	nop
 8001188:	080011a1 	.word	0x080011a1
 800118c:	080011c9 	.word	0x080011c9
 8001190:	080011cd 	.word	0x080011cd
 8001194:	08001235 	.word	0x08001235
 8001198:	080011e7 	.word	0x080011e7
 800119c:	08001203 	.word	0x08001203
  	{
  	case DataRecord:
  		// write data to flash
  		fullAddress = (((uint32_t)hexRow->upperAddress << 16) | (uint32_t)(hexRow->lowAddress)) + ((uint32_t)hexRow->segmentAddress << 4);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	8b1b      	ldrh	r3, [r3, #24]
 80011a4:	041b      	lsls	r3, r3, #16
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	8852      	ldrh	r2, [r2, #2]
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	8b5b      	ldrh	r3, [r3, #26]
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	4413      	add	r3, r2
 80011b4:	60bb      	str	r3, [r7, #8]
  		writeProgramFlash(fullAddress, hexRow->data, hexRow->length);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	1d59      	adds	r1, r3, #5
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	68b8      	ldr	r0, [r7, #8]
 80011c2:	f7ff f9f7 	bl	80005b4 <writeProgramFlash>
  		break;
 80011c6:	e036      	b.n	8001236 <processHexLine+0xc6>
  	case EndOfFile:
  		// end boot
  		return 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	e035      	b.n	8001238 <processHexLine+0xc8>
  		break;
  	case ExtendedSegmentAddress:
  		// Edit memory addresses
  		hexRow->segmentAddress = ((uint16_t)hexRow->data[0] << 8) | (uint16_t)hexRow->data[1];
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	795b      	ldrb	r3, [r3, #5]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	799b      	ldrb	r3, [r3, #6]
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b21b      	sxth	r3, r3
 80011de:	b29a      	uxth	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	835a      	strh	r2, [r3, #26]
  		break;
 80011e4:	e027      	b.n	8001236 <processHexLine+0xc6>
  	case ExtendedLinearAddress:
  		addrBuf = ((uint16_t)hexRow->data[0] << 8) | (uint16_t)hexRow->data[1];
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	795b      	ldrb	r3, [r3, #5]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	799b      	ldrb	r3, [r3, #6]
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	81fb      	strh	r3, [r7, #14]
  		hexRow->upperAddress = addrBuf;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	89fa      	ldrh	r2, [r7, #14]
 80011fe:	831a      	strh	r2, [r3, #24]
  		break;
 8001200:	e019      	b.n	8001236 <processHexLine+0xc6>
  	case StartLinearAddress:
  		hexRow->upperAddress = ((uint16_t)hexRow->data[0] << 8) | (uint16_t)hexRow->data[1];
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	795b      	ldrb	r3, [r3, #5]
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	b21a      	sxth	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	799b      	ldrb	r3, [r3, #6]
 800120e:	b21b      	sxth	r3, r3
 8001210:	4313      	orrs	r3, r2
 8001212:	b21b      	sxth	r3, r3
 8001214:	b29a      	uxth	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	831a      	strh	r2, [r3, #24]
  		hexRow->lowAddress = ((uint16_t)hexRow->data[2] << 8) | (uint16_t)hexRow->data[3];
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	79db      	ldrb	r3, [r3, #7]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b21a      	sxth	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7a1b      	ldrb	r3, [r3, #8]
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21b      	sxth	r3, r3
 800122c:	b29a      	uxth	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	805a      	strh	r2, [r3, #2]
  		break;
 8001232:	e000      	b.n	8001236 <processHexLine+0xc6>
  	default:
  		break;
 8001234:	bf00      	nop
  	}
  	return 1;
 8001236:	2301      	movs	r3, #1

}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <flush_buffer>:

static void flush_buffer(uint8_t* buffer, uint16_t size)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
	for(int i = 0; i < size; i++)
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	e007      	b.n	8001262 <flush_buffer+0x22>
	{
		buffer[i] = '\0';
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	429a      	cmp	r2, r3
 8001268:	dbf3      	blt.n	8001252 <flush_buffer+0x12>
	}
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800127e:	490e      	ldr	r1, [pc, #56]	; (80012b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001280:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001284:	e002      	b.n	800128c <LoopCopyDataInit>

08001286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128a:	3304      	adds	r3, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800128c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001290:	d3f9      	bcc.n	8001286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001294:	4c0b      	ldr	r4, [pc, #44]	; (80012c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001298:	e001      	b.n	800129e <LoopFillZerobss>

0800129a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129c:	3204      	adds	r2, #4

0800129e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a0:	d3fb      	bcc.n	800129a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012a2:	f7ff fddb 	bl	8000e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a6:	f00c f8e1 	bl	800d46c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012aa:	f7ff fc3f 	bl	8000b2c <main>
  bx  lr    
 80012ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80012bc:	0800e460 	.word	0x0800e460
  ldr r2, =_sbss
 80012c0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80012c4:	20003d78 	.word	0x20003d78

080012c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC_IRQHandler>
	...

080012cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0d      	ldr	r2, [pc, #52]	; (800130c <HAL_Init+0x40>)
 80012d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_Init+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_Init+0x40>)
 80012e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_Init+0x40>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_Init+0x40>)
 80012ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f000 f94f 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 f808 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001300:	f7ff fd1a 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023c00 	.word	0x40023c00

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x54>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x58>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f967 	bl	8001602 <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00e      	b.n	800135c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d80a      	bhi.n	800135a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f000 f92f 	bl	80015ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <HAL_InitTick+0x5c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000000 	.word	0x20000000
 8001368:	20000008 	.word	0x20000008
 800136c:	20000004 	.word	0x20000004

08001370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x20>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x24>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4413      	add	r3, r2
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_IncTick+0x24>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008
 8001394:	200031e8 	.word	0x200031e8

08001398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_GetTick+0x14>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	200031e8 	.word	0x200031e8

080013b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff ffee 	bl	8001398 <HAL_GetTick>
 80013bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c8:	d005      	beq.n	80013d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_Delay+0x44>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013d6:	bf00      	nop
 80013d8:	f7ff ffde 	bl	8001398 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d8f7      	bhi.n	80013d8 <HAL_Delay+0x28>
  {
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142a:	4a04      	ldr	r2, [pc, #16]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4907      	ldr	r1, [pc, #28]	; (8001494 <__NVIC_EnableIRQ+0x38>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f7ff ff8e 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff29 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff3e 	bl	8001440 <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff8e 	bl	80014ec <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5d 	bl	8001498 <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff31 	bl	800145c <__NVIC_EnableIRQ>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffa2 	bl	8001554 <SysTick_Config>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	e159      	b.n	80018ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001638:	2201      	movs	r2, #1
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	429a      	cmp	r2, r3
 8001652:	f040 8148 	bne.w	80018e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b01      	cmp	r3, #1
 8001660:	d005      	beq.n	800166e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800166a:	2b02      	cmp	r3, #2
 800166c:	d130      	bne.n	80016d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a4:	2201      	movs	r2, #1
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 0201 	and.w	r2, r3, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d017      	beq.n	800170c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d123      	bne.n	8001760 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	08da      	lsrs	r2, r3, #3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3208      	adds	r2, #8
 8001720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	220f      	movs	r2, #15
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	08da      	lsrs	r2, r3, #3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3208      	adds	r2, #8
 800175a:	69b9      	ldr	r1, [r7, #24]
 800175c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0203 	and.w	r2, r3, #3
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80a2 	beq.w	80018e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b57      	ldr	r3, [pc, #348]	; (8001904 <HAL_GPIO_Init+0x2e8>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	4a56      	ldr	r2, [pc, #344]	; (8001904 <HAL_GPIO_Init+0x2e8>)
 80017ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b0:	6453      	str	r3, [r2, #68]	; 0x44
 80017b2:	4b54      	ldr	r3, [pc, #336]	; (8001904 <HAL_GPIO_Init+0x2e8>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017be:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_GPIO_Init+0x2ec>)
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	220f      	movs	r2, #15
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a49      	ldr	r2, [pc, #292]	; (800190c <HAL_GPIO_Init+0x2f0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d019      	beq.n	800181e <HAL_GPIO_Init+0x202>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a48      	ldr	r2, [pc, #288]	; (8001910 <HAL_GPIO_Init+0x2f4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d013      	beq.n	800181a <HAL_GPIO_Init+0x1fe>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a47      	ldr	r2, [pc, #284]	; (8001914 <HAL_GPIO_Init+0x2f8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d00d      	beq.n	8001816 <HAL_GPIO_Init+0x1fa>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a46      	ldr	r2, [pc, #280]	; (8001918 <HAL_GPIO_Init+0x2fc>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d007      	beq.n	8001812 <HAL_GPIO_Init+0x1f6>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a45      	ldr	r2, [pc, #276]	; (800191c <HAL_GPIO_Init+0x300>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d101      	bne.n	800180e <HAL_GPIO_Init+0x1f2>
 800180a:	2304      	movs	r3, #4
 800180c:	e008      	b.n	8001820 <HAL_GPIO_Init+0x204>
 800180e:	2307      	movs	r3, #7
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x204>
 8001812:	2303      	movs	r3, #3
 8001814:	e004      	b.n	8001820 <HAL_GPIO_Init+0x204>
 8001816:	2302      	movs	r3, #2
 8001818:	e002      	b.n	8001820 <HAL_GPIO_Init+0x204>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <HAL_GPIO_Init+0x204>
 800181e:	2300      	movs	r3, #0
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	f002 0203 	and.w	r2, r2, #3
 8001826:	0092      	lsls	r2, r2, #2
 8001828:	4093      	lsls	r3, r2
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001830:	4935      	ldr	r1, [pc, #212]	; (8001908 <HAL_GPIO_Init+0x2ec>)
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	089b      	lsrs	r3, r3, #2
 8001836:	3302      	adds	r3, #2
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_GPIO_Init+0x304>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001862:	4a2f      	ldr	r2, [pc, #188]	; (8001920 <HAL_GPIO_Init+0x304>)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001868:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <HAL_GPIO_Init+0x304>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800188c:	4a24      	ldr	r2, [pc, #144]	; (8001920 <HAL_GPIO_Init+0x304>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001892:	4b23      	ldr	r3, [pc, #140]	; (8001920 <HAL_GPIO_Init+0x304>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018b6:	4a1a      	ldr	r2, [pc, #104]	; (8001920 <HAL_GPIO_Init+0x304>)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_GPIO_Init+0x304>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018e0:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <HAL_GPIO_Init+0x304>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3301      	adds	r3, #1
 80018ea:	61fb      	str	r3, [r7, #28]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	2b0f      	cmp	r3, #15
 80018f0:	f67f aea2 	bls.w	8001638 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40013800 	.word	0x40013800
 800190c:	40020000 	.word	0x40020000
 8001910:	40020400 	.word	0x40020400
 8001914:	40020800 	.word	0x40020800
 8001918:	40020c00 	.word	0x40020c00
 800191c:	40021000 	.word	0x40021000
 8001920:	40013c00 	.word	0x40013c00

08001924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]
 8001930:	4613      	mov	r3, r2
 8001932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001934:	787b      	ldrb	r3, [r7, #1]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001940:	e003      	b.n	800194a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001942:	887b      	ldrh	r3, [r7, #2]
 8001944:	041a      	lsls	r2, r3, #16
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	619a      	str	r2, [r3, #24]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001956:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001958:	b08f      	sub	sp, #60	; 0x3c
 800195a:	af0a      	add	r7, sp, #40	; 0x28
 800195c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e054      	b.n	8001a12 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f00b fab8 	bl	800cef8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2203      	movs	r2, #3
 800198c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 fcac 	bl	8004304 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	687e      	ldr	r6, [r7, #4]
 80019b4:	466d      	mov	r5, sp
 80019b6:	f106 0410 	add.w	r4, r6, #16
 80019ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80019ca:	1d33      	adds	r3, r6, #4
 80019cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ce:	6838      	ldr	r0, [r7, #0]
 80019d0:	f002 fc26 	bl	8004220 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2101      	movs	r1, #1
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 fca3 	bl	8004326 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	687e      	ldr	r6, [r7, #4]
 80019e8:	466d      	mov	r5, sp
 80019ea:	f106 0410 	add.w	r4, r6, #16
 80019ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80019fe:	1d33      	adds	r3, r6, #4
 8001a00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a02:	6838      	ldr	r0, [r7, #0]
 8001a04:	f002 fe2c 	bl	8004660 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a1a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a1a:	b590      	push	{r4, r7, lr}
 8001a1c:	b089      	sub	sp, #36	; 0x24
 8001a1e:	af04      	add	r7, sp, #16
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	4608      	mov	r0, r1
 8001a24:	4611      	mov	r1, r2
 8001a26:	461a      	mov	r2, r3
 8001a28:	4603      	mov	r3, r0
 8001a2a:	70fb      	strb	r3, [r7, #3]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70bb      	strb	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_HCD_HC_Init+0x28>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e076      	b.n	8001b30 <HAL_HCD_HC_Init+0x116>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	212c      	movs	r1, #44	; 0x2c
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	333d      	adds	r3, #61	; 0x3d
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	212c      	movs	r1, #44	; 0x2c
 8001a62:	fb01 f303 	mul.w	r3, r1, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	3338      	adds	r3, #56	; 0x38
 8001a6a:	787a      	ldrb	r2, [r7, #1]
 8001a6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	212c      	movs	r1, #44	; 0x2c
 8001a74:	fb01 f303 	mul.w	r3, r1, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	3340      	adds	r3, #64	; 0x40
 8001a7c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a7e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	212c      	movs	r1, #44	; 0x2c
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3339      	adds	r3, #57	; 0x39
 8001a8e:	78fa      	ldrb	r2, [r7, #3]
 8001a90:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	212c      	movs	r1, #44	; 0x2c
 8001a98:	fb01 f303 	mul.w	r3, r1, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	333f      	adds	r3, #63	; 0x3f
 8001aa0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001aa4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	78ba      	ldrb	r2, [r7, #2]
 8001aaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001aae:	b2d0      	uxtb	r0, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	212c      	movs	r1, #44	; 0x2c
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	333a      	adds	r3, #58	; 0x3a
 8001abc:	4602      	mov	r2, r0
 8001abe:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001ac0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	da09      	bge.n	8001adc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	212c      	movs	r1, #44	; 0x2c
 8001ace:	fb01 f303 	mul.w	r3, r1, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	333b      	adds	r3, #59	; 0x3b
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	e008      	b.n	8001aee <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	212c      	movs	r1, #44	; 0x2c
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	333b      	adds	r3, #59	; 0x3b
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	212c      	movs	r1, #44	; 0x2c
 8001af4:	fb01 f303 	mul.w	r3, r1, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	333c      	adds	r3, #60	; 0x3c
 8001afc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b00:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	787c      	ldrb	r4, [r7, #1]
 8001b08:	78ba      	ldrb	r2, [r7, #2]
 8001b0a:	78f9      	ldrb	r1, [r7, #3]
 8001b0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b0e:	9302      	str	r3, [sp, #8]
 8001b10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	4623      	mov	r3, r4
 8001b1e:	f002 ff25 	bl	800496c <USB_HC_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd90      	pop	{r4, r7, pc}

08001b38 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_HCD_HC_Halt+0x1e>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e00f      	b.n	8001b76 <HAL_HCD_HC_Halt+0x3e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	78fa      	ldrb	r2, [r7, #3]
 8001b64:	4611      	mov	r1, r2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 f975 	bl	8004e56 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	4608      	mov	r0, r1
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4603      	mov	r3, r0
 8001b90:	70fb      	strb	r3, [r7, #3]
 8001b92:	460b      	mov	r3, r1
 8001b94:	70bb      	strb	r3, [r7, #2]
 8001b96:	4613      	mov	r3, r2
 8001b98:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	212c      	movs	r1, #44	; 0x2c
 8001ba0:	fb01 f303 	mul.w	r3, r1, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	333b      	adds	r3, #59	; 0x3b
 8001ba8:	78ba      	ldrb	r2, [r7, #2]
 8001baa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	212c      	movs	r1, #44	; 0x2c
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	333f      	adds	r3, #63	; 0x3f
 8001bba:	787a      	ldrb	r2, [r7, #1]
 8001bbc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001bbe:	7c3b      	ldrb	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d112      	bne.n	8001bea <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	212c      	movs	r1, #44	; 0x2c
 8001bca:	fb01 f303 	mul.w	r3, r1, r3
 8001bce:	4413      	add	r3, r2
 8001bd0:	3342      	adds	r3, #66	; 0x42
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	212c      	movs	r1, #44	; 0x2c
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	333d      	adds	r3, #61	; 0x3d
 8001be4:	7f3a      	ldrb	r2, [r7, #28]
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	e008      	b.n	8001bfc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	212c      	movs	r1, #44	; 0x2c
 8001bf0:	fb01 f303 	mul.w	r3, r1, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3342      	adds	r3, #66	; 0x42
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001bfc:	787b      	ldrb	r3, [r7, #1]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	f200 80c6 	bhi.w	8001d90 <HAL_HCD_HC_SubmitRequest+0x210>
 8001c04:	a201      	add	r2, pc, #4	; (adr r2, 8001c0c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0a:	bf00      	nop
 8001c0c:	08001c1d 	.word	0x08001c1d
 8001c10:	08001d7d 	.word	0x08001d7d
 8001c14:	08001c81 	.word	0x08001c81
 8001c18:	08001cff 	.word	0x08001cff
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001c1c:	7c3b      	ldrb	r3, [r7, #16]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	f040 80b8 	bne.w	8001d94 <HAL_HCD_HC_SubmitRequest+0x214>
 8001c24:	78bb      	ldrb	r3, [r7, #2]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f040 80b4 	bne.w	8001d94 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001c2c:	8b3b      	ldrh	r3, [r7, #24]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d108      	bne.n	8001c44 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	212c      	movs	r1, #44	; 0x2c
 8001c38:	fb01 f303 	mul.w	r3, r1, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3355      	adds	r3, #85	; 0x55
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	212c      	movs	r1, #44	; 0x2c
 8001c4a:	fb01 f303 	mul.w	r3, r1, r3
 8001c4e:	4413      	add	r3, r2
 8001c50:	3355      	adds	r3, #85	; 0x55
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d109      	bne.n	8001c6c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	212c      	movs	r1, #44	; 0x2c
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	3342      	adds	r3, #66	; 0x42
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c6a:	e093      	b.n	8001d94 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	212c      	movs	r1, #44	; 0x2c
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	3342      	adds	r3, #66	; 0x42
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	701a      	strb	r2, [r3, #0]
      break;
 8001c7e:	e089      	b.n	8001d94 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c80:	78bb      	ldrb	r3, [r7, #2]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d11d      	bne.n	8001cc2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	212c      	movs	r1, #44	; 0x2c
 8001c8c:	fb01 f303 	mul.w	r3, r1, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	3355      	adds	r3, #85	; 0x55
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	212c      	movs	r1, #44	; 0x2c
 8001ca0:	fb01 f303 	mul.w	r3, r1, r3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3342      	adds	r3, #66	; 0x42
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001cac:	e073      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	212c      	movs	r1, #44	; 0x2c
 8001cb4:	fb01 f303 	mul.w	r3, r1, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	3342      	adds	r3, #66	; 0x42
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	701a      	strb	r2, [r3, #0]
      break;
 8001cc0:	e069      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	212c      	movs	r1, #44	; 0x2c
 8001cc8:	fb01 f303 	mul.w	r3, r1, r3
 8001ccc:	4413      	add	r3, r2
 8001cce:	3354      	adds	r3, #84	; 0x54
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	212c      	movs	r1, #44	; 0x2c
 8001cdc:	fb01 f303 	mul.w	r3, r1, r3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3342      	adds	r3, #66	; 0x42
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
      break;
 8001ce8:	e055      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	212c      	movs	r1, #44	; 0x2c
 8001cf0:	fb01 f303 	mul.w	r3, r1, r3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3342      	adds	r3, #66	; 0x42
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	701a      	strb	r2, [r3, #0]
      break;
 8001cfc:	e04b      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001cfe:	78bb      	ldrb	r3, [r7, #2]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d11d      	bne.n	8001d40 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	212c      	movs	r1, #44	; 0x2c
 8001d0a:	fb01 f303 	mul.w	r3, r1, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	3355      	adds	r3, #85	; 0x55
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d109      	bne.n	8001d2c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	212c      	movs	r1, #44	; 0x2c
 8001d1e:	fb01 f303 	mul.w	r3, r1, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	3342      	adds	r3, #66	; 0x42
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d2a:	e034      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	212c      	movs	r1, #44	; 0x2c
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	3342      	adds	r3, #66	; 0x42
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	701a      	strb	r2, [r3, #0]
      break;
 8001d3e:	e02a      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	212c      	movs	r1, #44	; 0x2c
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3354      	adds	r3, #84	; 0x54
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	212c      	movs	r1, #44	; 0x2c
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3342      	adds	r3, #66	; 0x42
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
      break;
 8001d66:	e016      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	212c      	movs	r1, #44	; 0x2c
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	3342      	adds	r3, #66	; 0x42
 8001d76:	2202      	movs	r2, #2
 8001d78:	701a      	strb	r2, [r3, #0]
      break;
 8001d7a:	e00c      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	212c      	movs	r1, #44	; 0x2c
 8001d82:	fb01 f303 	mul.w	r3, r1, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	3342      	adds	r3, #66	; 0x42
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
      break;
 8001d8e:	e002      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001d90:	bf00      	nop
 8001d92:	e000      	b.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001d94:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	212c      	movs	r1, #44	; 0x2c
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	3344      	adds	r3, #68	; 0x44
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	8b3a      	ldrh	r2, [r7, #24]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	202c      	movs	r0, #44	; 0x2c
 8001db0:	fb00 f303 	mul.w	r3, r0, r3
 8001db4:	440b      	add	r3, r1
 8001db6:	334c      	adds	r3, #76	; 0x4c
 8001db8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	212c      	movs	r1, #44	; 0x2c
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3360      	adds	r3, #96	; 0x60
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	212c      	movs	r1, #44	; 0x2c
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3350      	adds	r3, #80	; 0x50
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	212c      	movs	r1, #44	; 0x2c
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	3339      	adds	r3, #57	; 0x39
 8001dec:	78fa      	ldrb	r2, [r7, #3]
 8001dee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	212c      	movs	r1, #44	; 0x2c
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3361      	adds	r3, #97	; 0x61
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	222c      	movs	r2, #44	; 0x2c
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	3338      	adds	r3, #56	; 0x38
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	18d1      	adds	r1, r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	f002 fec8 	bl	8004bb0 <USB_HC_StartXfer>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop

08001e2c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 fbc9 	bl	80045da <USB_GetMode>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	f040 80f6 	bne.w	800203c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f002 fbad 	bl	80045b4 <USB_ReadInterrupts>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80ec 	beq.w	800203a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f002 fba4 	bl	80045b4 <USB_ReadInterrupts>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e76:	d104      	bne.n	8001e82 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 fb94 	bl	80045b4 <USB_ReadInterrupts>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e96:	d104      	bne.n	8001ea2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ea0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f002 fb84 	bl	80045b4 <USB_ReadInterrupts>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001eb6:	d104      	bne.n	8001ec2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ec0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f002 fb74 	bl	80045b4 <USB_ReadInterrupts>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d103      	bne.n	8001ede <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2202      	movs	r2, #2
 8001edc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 fb66 	bl	80045b4 <USB_ReadInterrupts>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ef2:	d11c      	bne.n	8001f2e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001efc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10f      	bne.n	8001f2e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f0e:	2110      	movs	r1, #16
 8001f10:	6938      	ldr	r0, [r7, #16]
 8001f12:	f002 fa55 	bl	80043c0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f16:	6938      	ldr	r0, [r7, #16]
 8001f18:	f002 fa86 	bl	8004428 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2101      	movs	r1, #1
 8001f22:	4618      	mov	r0, r3
 8001f24:	f002 fc5c 	bl	80047e0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f00b f863 	bl	800cff4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 fb3e 	bl	80045b4 <USB_ReadInterrupts>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f42:	d102      	bne.n	8001f4a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f001 f89e 	bl	8003086 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 fb30 	bl	80045b4 <USB_ReadInterrupts>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d106      	bne.n	8001f6c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f00b f82c 	bl	800cfbc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2208      	movs	r2, #8
 8001f6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f002 fb1f 	bl	80045b4 <USB_ReadInterrupts>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b10      	cmp	r3, #16
 8001f7e:	d101      	bne.n	8001f84 <HAL_HCD_IRQHandler+0x158>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <HAL_HCD_IRQHandler+0x15a>
 8001f84:	2300      	movs	r3, #0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d012      	beq.n	8001fb0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699a      	ldr	r2, [r3, #24]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0210 	bic.w	r2, r2, #16
 8001f98:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 ffa1 	bl	8002ee2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699a      	ldr	r2, [r3, #24]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0210 	orr.w	r2, r2, #16
 8001fae:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f002 fafd 	bl	80045b4 <USB_ReadInterrupts>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fc4:	d13a      	bne.n	800203c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f002 ff32 	bl	8004e34 <USB_HC_ReadInterrupt>
 8001fd0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e025      	b.n	8002024 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d018      	beq.n	800201e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002002:	d106      	bne.n	8002012 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	4619      	mov	r1, r3
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f8ab 	bl	8002166 <HCD_HC_IN_IRQHandler>
 8002010:	e005      	b.n	800201e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	4619      	mov	r1, r3
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 fbf9 	bl	8002810 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3301      	adds	r3, #1
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	429a      	cmp	r2, r3
 800202c:	d3d4      	bcc.n	8001fd8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002036:	615a      	str	r2, [r3, #20]
 8002038:	e000      	b.n	800203c <HAL_HCD_IRQHandler+0x210>
      return;
 800203a:	bf00      	nop
    }
  }
}
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_HCD_Start+0x16>
 8002054:	2302      	movs	r3, #2
 8002056:	e013      	b.n	8002080 <HAL_HCD_Start+0x3e>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	4618      	mov	r0, r3
 8002068:	f002 fc1e 	bl	80048a8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f002 f936 	bl	80042e2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_HCD_Stop+0x16>
 800209a:	2302      	movs	r3, #2
 800209c:	e00d      	b.n	80020ba <HAL_HCD_Stop+0x32>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 f80c 	bl	80050c8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f002 fbc0 	bl	8004854 <USB_ResetPort>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	212c      	movs	r1, #44	; 0x2c
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	3360      	adds	r3, #96	; 0x60
 80020f8:	781b      	ldrb	r3, [r3, #0]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	460b      	mov	r3, r1
 8002110:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	212c      	movs	r1, #44	; 0x2c
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	4413      	add	r3, r2
 800211e:	3350      	adds	r3, #80	; 0x50
 8002120:	681b      	ldr	r3, [r3, #0]
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f002 fc04 	bl	8004948 <USB_GetCurrentFrame>
 8002140:	4603      	mov	r3, r0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f002 fbdf 	bl	800491a <USB_GetHostSpeed>
 800215c:	4603      	mov	r3, r0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b04      	cmp	r3, #4
 8002194:	d11a      	bne.n	80021cc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4413      	add	r3, r2
 800219e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a2:	461a      	mov	r2, r3
 80021a4:	2304      	movs	r3, #4
 80021a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	212c      	movs	r1, #44	; 0x2c
 80021ae:	fb01 f303 	mul.w	r3, r1, r3
 80021b2:	4413      	add	r3, r2
 80021b4:	3361      	adds	r3, #97	; 0x61
 80021b6:	2206      	movs	r2, #6
 80021b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f002 fe46 	bl	8004e56 <USB_HC_Halt>
 80021ca:	e0af      	b.n	800232c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021e2:	d11b      	bne.n	800221c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	015a      	lsls	r2, r3, #5
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f0:	461a      	mov	r2, r3
 80021f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3361      	adds	r3, #97	; 0x61
 8002206:	2207      	movs	r2, #7
 8002208:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f002 fe1e 	bl	8004e56 <USB_HC_Halt>
 800221a:	e087      	b.n	800232c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4413      	add	r3, r2
 8002224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b20      	cmp	r3, #32
 8002230:	d109      	bne.n	8002246 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4413      	add	r3, r2
 800223a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223e:	461a      	mov	r2, r3
 8002240:	2320      	movs	r3, #32
 8002242:	6093      	str	r3, [r2, #8]
 8002244:	e072      	b.n	800232c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4413      	add	r3, r2
 800224e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b08      	cmp	r3, #8
 800225a:	d11a      	bne.n	8002292 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002268:	461a      	mov	r2, r3
 800226a:	2308      	movs	r3, #8
 800226c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	212c      	movs	r1, #44	; 0x2c
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	4413      	add	r3, r2
 800227a:	3361      	adds	r3, #97	; 0x61
 800227c:	2205      	movs	r2, #5
 800227e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f002 fde3 	bl	8004e56 <USB_HC_Halt>
 8002290:	e04c      	b.n	800232c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4413      	add	r3, r2
 800229a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a8:	d11b      	bne.n	80022e2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b6:	461a      	mov	r2, r3
 80022b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	212c      	movs	r1, #44	; 0x2c
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	3361      	adds	r3, #97	; 0x61
 80022cc:	2208      	movs	r2, #8
 80022ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	4611      	mov	r1, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	f002 fdbb 	bl	8004e56 <USB_HC_Halt>
 80022e0:	e024      	b.n	800232c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f4:	2b80      	cmp	r3, #128	; 0x80
 80022f6:	d119      	bne.n	800232c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002304:	461a      	mov	r2, r3
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3361      	adds	r3, #97	; 0x61
 8002318:	2206      	movs	r2, #6
 800231a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	4611      	mov	r1, r2
 8002326:	4618      	mov	r0, r3
 8002328:	f002 fd95 	bl	8004e56 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002342:	d112      	bne.n	800236a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f002 fd81 	bl	8004e56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002360:	461a      	mov	r2, r3
 8002362:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002366:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002368:	e24e      	b.n	8002808 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4413      	add	r3, r2
 8002372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b01      	cmp	r3, #1
 800237e:	f040 80df 	bne.w	8002540 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d019      	beq.n	80023be <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	212c      	movs	r1, #44	; 0x2c
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	4413      	add	r3, r2
 8002396:	3348      	adds	r3, #72	; 0x48
 8002398:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	0159      	lsls	r1, r3, #5
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	440b      	add	r3, r1
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023ac:	1ad2      	subs	r2, r2, r3
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	202c      	movs	r0, #44	; 0x2c
 80023b4:	fb00 f303 	mul.w	r3, r0, r3
 80023b8:	440b      	add	r3, r1
 80023ba:	3350      	adds	r3, #80	; 0x50
 80023bc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	212c      	movs	r1, #44	; 0x2c
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	4413      	add	r3, r2
 80023ca:	3361      	adds	r3, #97	; 0x61
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	212c      	movs	r1, #44	; 0x2c
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	4413      	add	r3, r2
 80023dc:	335c      	adds	r3, #92	; 0x5c
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ee:	461a      	mov	r2, r3
 80023f0:	2301      	movs	r3, #1
 80023f2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	212c      	movs	r1, #44	; 0x2c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	333f      	adds	r3, #63	; 0x3f
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d009      	beq.n	800241c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	333f      	adds	r3, #63	; 0x3f
 8002416:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002418:	2b02      	cmp	r3, #2
 800241a:	d111      	bne.n	8002440 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f002 fd15 	bl	8004e56 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4413      	add	r3, r2
 8002434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002438:	461a      	mov	r2, r3
 800243a:	2310      	movs	r3, #16
 800243c:	6093      	str	r3, [r2, #8]
 800243e:	e03a      	b.n	80024b6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	212c      	movs	r1, #44	; 0x2c
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	333f      	adds	r3, #63	; 0x3f
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d009      	beq.n	8002468 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	212c      	movs	r1, #44	; 0x2c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	333f      	adds	r3, #63	; 0x3f
 8002462:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002464:	2b01      	cmp	r3, #1
 8002466:	d126      	bne.n	80024b6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4413      	add	r3, r2
 8002470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	0151      	lsls	r1, r2, #5
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	440a      	add	r2, r1
 800247e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002482:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002486:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	3360      	adds	r3, #96	; 0x60
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	b2d9      	uxtb	r1, r3
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	202c      	movs	r0, #44	; 0x2c
 80024a4:	fb00 f303 	mul.w	r3, r0, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	3360      	adds	r3, #96	; 0x60
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f00a fdad 	bl	800d010 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d12b      	bne.n	8002516 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	3348      	adds	r3, #72	; 0x48
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	202c      	movs	r0, #44	; 0x2c
 80024d4:	fb00 f202 	mul.w	r2, r0, r2
 80024d8:	440a      	add	r2, r1
 80024da:	3240      	adds	r2, #64	; 0x40
 80024dc:	8812      	ldrh	r2, [r2, #0]
 80024de:	fbb3 f3f2 	udiv	r3, r3, r2
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 818e 	beq.w	8002808 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	212c      	movs	r1, #44	; 0x2c
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	3354      	adds	r3, #84	; 0x54
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	f083 0301 	eor.w	r3, r3, #1
 8002500:	b2d8      	uxtb	r0, r3
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	212c      	movs	r1, #44	; 0x2c
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	4413      	add	r3, r2
 800250e:	3354      	adds	r3, #84	; 0x54
 8002510:	4602      	mov	r2, r0
 8002512:	701a      	strb	r2, [r3, #0]
}
 8002514:	e178      	b.n	8002808 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	212c      	movs	r1, #44	; 0x2c
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	4413      	add	r3, r2
 8002522:	3354      	adds	r3, #84	; 0x54
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	f083 0301 	eor.w	r3, r3, #1
 800252a:	b2d8      	uxtb	r0, r3
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3354      	adds	r3, #84	; 0x54
 800253a:	4602      	mov	r2, r0
 800253c:	701a      	strb	r2, [r3, #0]
}
 800253e:	e163      	b.n	8002808 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b02      	cmp	r3, #2
 8002554:	f040 80f6 	bne.w	8002744 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	3361      	adds	r3, #97	; 0x61
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d109      	bne.n	8002580 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	3360      	adds	r3, #96	; 0x60
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	e0c9      	b.n	8002714 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	212c      	movs	r1, #44	; 0x2c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	3361      	adds	r3, #97	; 0x61
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b05      	cmp	r3, #5
 8002592:	d109      	bne.n	80025a8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	212c      	movs	r1, #44	; 0x2c
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	3360      	adds	r3, #96	; 0x60
 80025a2:	2205      	movs	r2, #5
 80025a4:	701a      	strb	r2, [r3, #0]
 80025a6:	e0b5      	b.n	8002714 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3361      	adds	r3, #97	; 0x61
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b06      	cmp	r3, #6
 80025ba:	d009      	beq.n	80025d0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	212c      	movs	r1, #44	; 0x2c
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	3361      	adds	r3, #97	; 0x61
 80025ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d150      	bne.n	8002672 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	212c      	movs	r1, #44	; 0x2c
 80025d6:	fb01 f303 	mul.w	r3, r1, r3
 80025da:	4413      	add	r3, r2
 80025dc:	335c      	adds	r3, #92	; 0x5c
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	202c      	movs	r0, #44	; 0x2c
 80025e8:	fb00 f303 	mul.w	r3, r0, r3
 80025ec:	440b      	add	r3, r1
 80025ee:	335c      	adds	r3, #92	; 0x5c
 80025f0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	212c      	movs	r1, #44	; 0x2c
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	335c      	adds	r3, #92	; 0x5c
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d912      	bls.n	800262c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	212c      	movs	r1, #44	; 0x2c
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	335c      	adds	r3, #92	; 0x5c
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	3360      	adds	r3, #96	; 0x60
 8002626:	2204      	movs	r2, #4
 8002628:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800262a:	e073      	b.n	8002714 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3360      	adds	r3, #96	; 0x60
 800263a:	2202      	movs	r2, #2
 800263c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4413      	add	r3, r2
 8002646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002654:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800265c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4413      	add	r3, r2
 8002666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266a:	461a      	mov	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002670:	e050      	b.n	8002714 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	3361      	adds	r3, #97	; 0x61
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b03      	cmp	r3, #3
 8002684:	d122      	bne.n	80026cc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	3360      	adds	r3, #96	; 0x60
 8002694:	2202      	movs	r2, #2
 8002696:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026ae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026b6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	461a      	mov	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e023      	b.n	8002714 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	212c      	movs	r1, #44	; 0x2c
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	3361      	adds	r3, #97	; 0x61
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b07      	cmp	r3, #7
 80026de:	d119      	bne.n	8002714 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	212c      	movs	r1, #44	; 0x2c
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	335c      	adds	r3, #92	; 0x5c
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	202c      	movs	r0, #44	; 0x2c
 80026f8:	fb00 f303 	mul.w	r3, r0, r3
 80026fc:	440b      	add	r3, r1
 80026fe:	335c      	adds	r3, #92	; 0x5c
 8002700:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	3360      	adds	r3, #96	; 0x60
 8002710:	2204      	movs	r2, #4
 8002712:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	461a      	mov	r2, r3
 8002722:	2302      	movs	r3, #2
 8002724:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	b2d9      	uxtb	r1, r3
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	202c      	movs	r0, #44	; 0x2c
 8002730:	fb00 f303 	mul.w	r3, r0, r3
 8002734:	4413      	add	r3, r2
 8002736:	3360      	adds	r3, #96	; 0x60
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f00a fc67 	bl	800d010 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002742:	e061      	b.n	8002808 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b10      	cmp	r3, #16
 8002758:	d156      	bne.n	8002808 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	212c      	movs	r1, #44	; 0x2c
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	333f      	adds	r3, #63	; 0x3f
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b03      	cmp	r3, #3
 800276c:	d111      	bne.n	8002792 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	335c      	adds	r3, #92	; 0x5c
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f002 fb63 	bl	8004e56 <USB_HC_Halt>
 8002790:	e031      	b.n	80027f6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	333f      	adds	r3, #63	; 0x3f
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	333f      	adds	r3, #63	; 0x3f
 80027b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d11d      	bne.n	80027f6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	335c      	adds	r3, #92	; 0x5c
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d110      	bne.n	80027f6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	3361      	adds	r3, #97	; 0x61
 80027e2:	2203      	movs	r2, #3
 80027e4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f002 fb30 	bl	8004e56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002802:	461a      	mov	r2, r3
 8002804:	2310      	movs	r3, #16
 8002806:	6093      	str	r3, [r2, #8]
}
 8002808:	bf00      	nop
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	4413      	add	r3, r2
 8002832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b04      	cmp	r3, #4
 800283e:	d11a      	bne.n	8002876 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	461a      	mov	r2, r3
 800284e:	2304      	movs	r3, #4
 8002850:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	3361      	adds	r3, #97	; 0x61
 8002860:	2206      	movs	r2, #6
 8002862:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f002 faf1 	bl	8004e56 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002874:	e331      	b.n	8002eda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4413      	add	r3, r2
 800287e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b20      	cmp	r3, #32
 800288a:	d12e      	bne.n	80028ea <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	461a      	mov	r2, r3
 800289a:	2320      	movs	r3, #32
 800289c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	333d      	adds	r3, #61	; 0x3d
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	f040 8313 	bne.w	8002eda <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	333d      	adds	r3, #61	; 0x3d
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	212c      	movs	r1, #44	; 0x2c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	3360      	adds	r3, #96	; 0x60
 80028d4:	2202      	movs	r2, #2
 80028d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	4611      	mov	r1, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f002 fab7 	bl	8004e56 <USB_HC_Halt>
}
 80028e8:	e2f7      	b.n	8002eda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002900:	d112      	bne.n	8002928 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	4413      	add	r3, r2
 800290a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290e:	461a      	mov	r2, r3
 8002910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002914:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f002 fa98 	bl	8004e56 <USB_HC_Halt>
}
 8002926:	e2d8      	b.n	8002eda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	015a      	lsls	r2, r3, #5
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	4413      	add	r3, r2
 8002930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d140      	bne.n	80029c0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	212c      	movs	r1, #44	; 0x2c
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	4413      	add	r3, r2
 800294a:	335c      	adds	r3, #92	; 0x5c
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	2b40      	cmp	r3, #64	; 0x40
 8002964:	d111      	bne.n	800298a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	212c      	movs	r1, #44	; 0x2c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	333d      	adds	r3, #61	; 0x3d
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	461a      	mov	r2, r3
 8002986:	2340      	movs	r3, #64	; 0x40
 8002988:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002996:	461a      	mov	r2, r3
 8002998:	2301      	movs	r3, #1
 800299a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	3361      	adds	r3, #97	; 0x61
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f002 fa4c 	bl	8004e56 <USB_HC_Halt>
}
 80029be:	e28c      	b.n	8002eda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	2b40      	cmp	r3, #64	; 0x40
 80029d4:	d12c      	bne.n	8002a30 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	3361      	adds	r3, #97	; 0x61
 80029e4:	2204      	movs	r2, #4
 80029e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	333d      	adds	r3, #61	; 0x3d
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	335c      	adds	r3, #92	; 0x5c
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f002 fa1d 	bl	8004e56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2340      	movs	r3, #64	; 0x40
 8002a2c:	6093      	str	r3, [r2, #8]
}
 8002a2e:	e254      	b.n	8002eda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d11a      	bne.n	8002a7c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a52:	461a      	mov	r2, r3
 8002a54:	2308      	movs	r3, #8
 8002a56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3361      	adds	r3, #97	; 0x61
 8002a66:	2205      	movs	r2, #5
 8002a68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f002 f9ee 	bl	8004e56 <USB_HC_Halt>
}
 8002a7a:	e22e      	b.n	8002eda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	2b10      	cmp	r3, #16
 8002a90:	d140      	bne.n	8002b14 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	335c      	adds	r3, #92	; 0x5c
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3361      	adds	r3, #97	; 0x61
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	333d      	adds	r3, #61	; 0x3d
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d112      	bne.n	8002af0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	333c      	adds	r3, #60	; 0x3c
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d108      	bne.n	8002af0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	333d      	adds	r3, #61	; 0x3d
 8002aec:	2201      	movs	r2, #1
 8002aee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	4611      	mov	r1, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f002 f9ab 	bl	8004e56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2310      	movs	r3, #16
 8002b10:	6093      	str	r3, [r2, #8]
}
 8002b12:	e1e2      	b.n	8002eda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b26:	2b80      	cmp	r3, #128	; 0x80
 8002b28:	d164      	bne.n	8002bf4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d111      	bne.n	8002b56 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	212c      	movs	r1, #44	; 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3361      	adds	r3, #97	; 0x61
 8002b40:	2206      	movs	r2, #6
 8002b42:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f002 f981 	bl	8004e56 <USB_HC_Halt>
 8002b54:	e044      	b.n	8002be0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	335c      	adds	r3, #92	; 0x5c
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	202c      	movs	r0, #44	; 0x2c
 8002b6e:	fb00 f303 	mul.w	r3, r0, r3
 8002b72:	440b      	add	r3, r1
 8002b74:	335c      	adds	r3, #92	; 0x5c
 8002b76:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	335c      	adds	r3, #92	; 0x5c
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d920      	bls.n	8002bce <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	335c      	adds	r3, #92	; 0x5c
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	3360      	adds	r3, #96	; 0x60
 8002bac:	2204      	movs	r2, #4
 8002bae:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	b2d9      	uxtb	r1, r3
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	202c      	movs	r0, #44	; 0x2c
 8002bba:	fb00 f303 	mul.w	r3, r0, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3360      	adds	r3, #96	; 0x60
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f00a fa22 	bl	800d010 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bcc:	e008      	b.n	8002be0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	3360      	adds	r3, #96	; 0x60
 8002bdc:	2202      	movs	r2, #2
 8002bde:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bec:	461a      	mov	r2, r3
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	6093      	str	r3, [r2, #8]
}
 8002bf2:	e172      	b.n	8002eda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0a:	d11b      	bne.n	8002c44 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	212c      	movs	r1, #44	; 0x2c
 8002c12:	fb01 f303 	mul.w	r3, r1, r3
 8002c16:	4413      	add	r3, r2
 8002c18:	3361      	adds	r3, #97	; 0x61
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f002 f914 	bl	8004e56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c40:	6093      	str	r3, [r2, #8]
}
 8002c42:	e14a      	b.n	8002eda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	f040 813f 	bne.w	8002eda <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	3361      	adds	r3, #97	; 0x61
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d17d      	bne.n	8002d6c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	212c      	movs	r1, #44	; 0x2c
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3360      	adds	r3, #96	; 0x60
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	333f      	adds	r3, #63	; 0x3f
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d00a      	beq.n	8002cac <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	333f      	adds	r3, #63	; 0x3f
 8002ca4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	f040 8100 	bne.w	8002eac <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d113      	bne.n	8002cdc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3355      	adds	r3, #85	; 0x55
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	f083 0301 	eor.w	r3, r3, #1
 8002cc8:	b2d8      	uxtb	r0, r3
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3355      	adds	r3, #85	; 0x55
 8002cd8:	4602      	mov	r2, r0
 8002cda:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	f040 80e3 	bne.w	8002eac <HCD_HC_OUT_IRQHandler+0x69c>
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	334c      	adds	r3, #76	; 0x4c
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 80d8 	beq.w	8002eac <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	334c      	adds	r3, #76	; 0x4c
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	202c      	movs	r0, #44	; 0x2c
 8002d12:	fb00 f202 	mul.w	r2, r0, r2
 8002d16:	440a      	add	r2, r1
 8002d18:	3240      	adds	r2, #64	; 0x40
 8002d1a:	8812      	ldrh	r2, [r2, #0]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	202c      	movs	r0, #44	; 0x2c
 8002d26:	fb00 f202 	mul.w	r2, r0, r2
 8002d2a:	440a      	add	r2, r1
 8002d2c:	3240      	adds	r2, #64	; 0x40
 8002d2e:	8812      	ldrh	r2, [r2, #0]
 8002d30:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80b5 	beq.w	8002eac <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3355      	adds	r3, #85	; 0x55
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	f083 0301 	eor.w	r3, r3, #1
 8002d56:	b2d8      	uxtb	r0, r3
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3355      	adds	r3, #85	; 0x55
 8002d66:	4602      	mov	r2, r0
 8002d68:	701a      	strb	r2, [r3, #0]
 8002d6a:	e09f      	b.n	8002eac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	3361      	adds	r3, #97	; 0x61
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d109      	bne.n	8002d94 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3360      	adds	r3, #96	; 0x60
 8002d8e:	2202      	movs	r2, #2
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	e08b      	b.n	8002eac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	212c      	movs	r1, #44	; 0x2c
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	3361      	adds	r3, #97	; 0x61
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d109      	bne.n	8002dbc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	212c      	movs	r1, #44	; 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3360      	adds	r3, #96	; 0x60
 8002db6:	2202      	movs	r2, #2
 8002db8:	701a      	strb	r2, [r3, #0]
 8002dba:	e077      	b.n	8002eac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	212c      	movs	r1, #44	; 0x2c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3361      	adds	r3, #97	; 0x61
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b05      	cmp	r3, #5
 8002dce:	d109      	bne.n	8002de4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	3360      	adds	r3, #96	; 0x60
 8002dde:	2205      	movs	r2, #5
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e063      	b.n	8002eac <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	3361      	adds	r3, #97	; 0x61
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b06      	cmp	r3, #6
 8002df6:	d009      	beq.n	8002e0c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3361      	adds	r3, #97	; 0x61
 8002e06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d14f      	bne.n	8002eac <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	335c      	adds	r3, #92	; 0x5c
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	202c      	movs	r0, #44	; 0x2c
 8002e24:	fb00 f303 	mul.w	r3, r0, r3
 8002e28:	440b      	add	r3, r1
 8002e2a:	335c      	adds	r3, #92	; 0x5c
 8002e2c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	212c      	movs	r1, #44	; 0x2c
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	335c      	adds	r3, #92	; 0x5c
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d912      	bls.n	8002e68 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	212c      	movs	r1, #44	; 0x2c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	335c      	adds	r3, #92	; 0x5c
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3360      	adds	r3, #96	; 0x60
 8002e62:	2204      	movs	r2, #4
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	e021      	b.n	8002eac <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3360      	adds	r3, #96	; 0x60
 8002e76:	2202      	movs	r2, #2
 8002e78:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e90:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e98:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2302      	movs	r3, #2
 8002ebc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	b2d9      	uxtb	r1, r3
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	202c      	movs	r0, #44	; 0x2c
 8002ec8:	fb00 f303 	mul.w	r3, r0, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	3360      	adds	r3, #96	; 0x60
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f00a f89b 	bl	800d010 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002eda:	bf00      	nop
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b08a      	sub	sp, #40	; 0x28
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	0c5b      	lsrs	r3, r3, #17
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f16:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d004      	beq.n	8002f28 <HCD_RXQLVL_IRQHandler+0x46>
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b05      	cmp	r3, #5
 8002f22:	f000 80a9 	beq.w	8003078 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f26:	e0aa      	b.n	800307e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80a6 	beq.w	800307c <HCD_RXQLVL_IRQHandler+0x19a>
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	212c      	movs	r1, #44	; 0x2c
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3344      	adds	r3, #68	; 0x44
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 809b 	beq.w	800307c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	3350      	adds	r3, #80	; 0x50
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	441a      	add	r2, r3
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	202c      	movs	r0, #44	; 0x2c
 8002f60:	fb00 f303 	mul.w	r3, r0, r3
 8002f64:	440b      	add	r3, r1
 8002f66:	334c      	adds	r3, #76	; 0x4c
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d87a      	bhi.n	8003064 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	212c      	movs	r1, #44	; 0x2c
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3344      	adds	r3, #68	; 0x44
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	b292      	uxth	r2, r2
 8002f86:	4619      	mov	r1, r3
 8002f88:	f001 fabc 	bl	8004504 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	212c      	movs	r1, #44	; 0x2c
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	3344      	adds	r3, #68	; 0x44
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	441a      	add	r2, r3
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	202c      	movs	r0, #44	; 0x2c
 8002fa6:	fb00 f303 	mul.w	r3, r0, r3
 8002faa:	440b      	add	r3, r1
 8002fac:	3344      	adds	r3, #68	; 0x44
 8002fae:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	212c      	movs	r1, #44	; 0x2c
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	3350      	adds	r3, #80	; 0x50
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	441a      	add	r2, r3
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	202c      	movs	r0, #44	; 0x2c
 8002fca:	fb00 f303 	mul.w	r3, r0, r3
 8002fce:	440b      	add	r3, r1
 8002fd0:	3350      	adds	r3, #80	; 0x50
 8002fd2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	0cdb      	lsrs	r3, r3, #19
 8002fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fe8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3340      	adds	r3, #64	; 0x40
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d13c      	bne.n	800307c <HCD_RXQLVL_IRQHandler+0x19a>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d039      	beq.n	800307c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	4413      	add	r3, r2
 8003010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800301e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003026:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	4413      	add	r3, r2
 8003030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003034:	461a      	mov	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	212c      	movs	r1, #44	; 0x2c
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	3354      	adds	r3, #84	; 0x54
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	f083 0301 	eor.w	r3, r3, #1
 800304e:	b2d8      	uxtb	r0, r3
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	212c      	movs	r1, #44	; 0x2c
 8003056:	fb01 f303 	mul.w	r3, r1, r3
 800305a:	4413      	add	r3, r2
 800305c:	3354      	adds	r3, #84	; 0x54
 800305e:	4602      	mov	r2, r0
 8003060:	701a      	strb	r2, [r3, #0]
      break;
 8003062:	e00b      	b.n	800307c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	212c      	movs	r1, #44	; 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	3360      	adds	r3, #96	; 0x60
 8003072:	2204      	movs	r2, #4
 8003074:	701a      	strb	r2, [r3, #0]
      break;
 8003076:	e001      	b.n	800307c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003078:	bf00      	nop
 800307a:	e000      	b.n	800307e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800307c:	bf00      	nop
  }
}
 800307e:	bf00      	nop
 8003080:	3728      	adds	r7, #40	; 0x28
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b086      	sub	sp, #24
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80030b2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d10b      	bne.n	80030d6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d102      	bne.n	80030ce <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f009 ff85 	bl	800cfd8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f043 0302 	orr.w	r3, r3, #2
 80030d4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d132      	bne.n	8003146 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f043 0308 	orr.w	r3, r3, #8
 80030e6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d126      	bne.n	8003140 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d113      	bne.n	8003122 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003100:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003104:	d106      	bne.n	8003114 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2102      	movs	r1, #2
 800310c:	4618      	mov	r0, r3
 800310e:	f001 fb67 	bl	80047e0 <USB_InitFSLSPClkSel>
 8003112:	e011      	b.n	8003138 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2101      	movs	r1, #1
 800311a:	4618      	mov	r0, r3
 800311c:	f001 fb60 	bl	80047e0 <USB_InitFSLSPClkSel>
 8003120:	e00a      	b.n	8003138 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d106      	bne.n	8003138 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003130:	461a      	mov	r2, r3
 8003132:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003136:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f009 ff77 	bl	800d02c <HAL_HCD_PortEnabled_Callback>
 800313e:	e002      	b.n	8003146 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f009 ff81 	bl	800d048 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b20      	cmp	r3, #32
 800314e:	d103      	bne.n	8003158 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f043 0320 	orr.w	r3, r3, #32
 8003156:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800315e:	461a      	mov	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	6013      	str	r3, [r2, #0]
}
 8003164:	bf00      	nop
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e267      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d075      	beq.n	8003276 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800318a:	4b88      	ldr	r3, [pc, #544]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
 8003192:	2b04      	cmp	r3, #4
 8003194:	d00c      	beq.n	80031b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003196:	4b85      	ldr	r3, [pc, #532]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d112      	bne.n	80031c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031a2:	4b82      	ldr	r3, [pc, #520]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ae:	d10b      	bne.n	80031c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b0:	4b7e      	ldr	r3, [pc, #504]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d05b      	beq.n	8003274 <HAL_RCC_OscConfig+0x108>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d157      	bne.n	8003274 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e242      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d0:	d106      	bne.n	80031e0 <HAL_RCC_OscConfig+0x74>
 80031d2:	4b76      	ldr	r3, [pc, #472]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a75      	ldr	r2, [pc, #468]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 80031d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	e01d      	b.n	800321c <HAL_RCC_OscConfig+0xb0>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e8:	d10c      	bne.n	8003204 <HAL_RCC_OscConfig+0x98>
 80031ea:	4b70      	ldr	r3, [pc, #448]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a6f      	ldr	r2, [pc, #444]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 80031f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	4b6d      	ldr	r3, [pc, #436]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a6c      	ldr	r2, [pc, #432]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 80031fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	e00b      	b.n	800321c <HAL_RCC_OscConfig+0xb0>
 8003204:	4b69      	ldr	r3, [pc, #420]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a68      	ldr	r2, [pc, #416]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 800320a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	4b66      	ldr	r3, [pc, #408]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a65      	ldr	r2, [pc, #404]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 8003216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800321a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d013      	beq.n	800324c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003224:	f7fe f8b8 	bl	8001398 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800322c:	f7fe f8b4 	bl	8001398 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e207      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323e:	4b5b      	ldr	r3, [pc, #364]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0xc0>
 800324a:	e014      	b.n	8003276 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324c:	f7fe f8a4 	bl	8001398 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003254:	f7fe f8a0 	bl	8001398 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	; 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e1f3      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003266:	4b51      	ldr	r3, [pc, #324]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0xe8>
 8003272:	e000      	b.n	8003276 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d063      	beq.n	800334a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003282:	4b4a      	ldr	r3, [pc, #296]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00b      	beq.n	80032a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800328e:	4b47      	ldr	r3, [pc, #284]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003296:	2b08      	cmp	r3, #8
 8003298:	d11c      	bne.n	80032d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800329a:	4b44      	ldr	r3, [pc, #272]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d116      	bne.n	80032d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a6:	4b41      	ldr	r3, [pc, #260]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <HAL_RCC_OscConfig+0x152>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d001      	beq.n	80032be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e1c7      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032be:	4b3b      	ldr	r3, [pc, #236]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4937      	ldr	r1, [pc, #220]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d2:	e03a      	b.n	800334a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d020      	beq.n	800331e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032dc:	4b34      	ldr	r3, [pc, #208]	; (80033b0 <HAL_RCC_OscConfig+0x244>)
 80032de:	2201      	movs	r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e2:	f7fe f859 	bl	8001398 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ea:	f7fe f855 	bl	8001398 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e1a8      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fc:	4b2b      	ldr	r3, [pc, #172]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f0      	beq.n	80032ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003308:	4b28      	ldr	r3, [pc, #160]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4925      	ldr	r1, [pc, #148]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 8003318:	4313      	orrs	r3, r2
 800331a:	600b      	str	r3, [r1, #0]
 800331c:	e015      	b.n	800334a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800331e:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <HAL_RCC_OscConfig+0x244>)
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fe f838 	bl	8001398 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800332c:	f7fe f834 	bl	8001398 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e187      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800333e:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d036      	beq.n	80033c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d016      	beq.n	800338c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800335e:	4b15      	ldr	r3, [pc, #84]	; (80033b4 <HAL_RCC_OscConfig+0x248>)
 8003360:	2201      	movs	r2, #1
 8003362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003364:	f7fe f818 	bl	8001398 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800336c:	f7fe f814 	bl	8001398 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e167      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337e:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_RCC_OscConfig+0x240>)
 8003380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x200>
 800338a:	e01b      	b.n	80033c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800338c:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <HAL_RCC_OscConfig+0x248>)
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003392:	f7fe f801 	bl	8001398 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003398:	e00e      	b.n	80033b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800339a:	f7fd fffd 	bl	8001398 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d907      	bls.n	80033b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e150      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
 80033ac:	40023800 	.word	0x40023800
 80033b0:	42470000 	.word	0x42470000
 80033b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b8:	4b88      	ldr	r3, [pc, #544]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 80033ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1ea      	bne.n	800339a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 8097 	beq.w	8003500 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d2:	2300      	movs	r3, #0
 80033d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033d6:	4b81      	ldr	r3, [pc, #516]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10f      	bne.n	8003402 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	4b7d      	ldr	r3, [pc, #500]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	4a7c      	ldr	r2, [pc, #496]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 80033ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f0:	6413      	str	r3, [r2, #64]	; 0x40
 80033f2:	4b7a      	ldr	r3, [pc, #488]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033fe:	2301      	movs	r3, #1
 8003400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003402:	4b77      	ldr	r3, [pc, #476]	; (80035e0 <HAL_RCC_OscConfig+0x474>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d118      	bne.n	8003440 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800340e:	4b74      	ldr	r3, [pc, #464]	; (80035e0 <HAL_RCC_OscConfig+0x474>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a73      	ldr	r2, [pc, #460]	; (80035e0 <HAL_RCC_OscConfig+0x474>)
 8003414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800341a:	f7fd ffbd 	bl	8001398 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003422:	f7fd ffb9 	bl	8001398 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e10c      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003434:	4b6a      	ldr	r3, [pc, #424]	; (80035e0 <HAL_RCC_OscConfig+0x474>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d106      	bne.n	8003456 <HAL_RCC_OscConfig+0x2ea>
 8003448:	4b64      	ldr	r3, [pc, #400]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	4a63      	ldr	r2, [pc, #396]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6713      	str	r3, [r2, #112]	; 0x70
 8003454:	e01c      	b.n	8003490 <HAL_RCC_OscConfig+0x324>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b05      	cmp	r3, #5
 800345c:	d10c      	bne.n	8003478 <HAL_RCC_OscConfig+0x30c>
 800345e:	4b5f      	ldr	r3, [pc, #380]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	4a5e      	ldr	r2, [pc, #376]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 8003464:	f043 0304 	orr.w	r3, r3, #4
 8003468:	6713      	str	r3, [r2, #112]	; 0x70
 800346a:	4b5c      	ldr	r3, [pc, #368]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	4a5b      	ldr	r2, [pc, #364]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6713      	str	r3, [r2, #112]	; 0x70
 8003476:	e00b      	b.n	8003490 <HAL_RCC_OscConfig+0x324>
 8003478:	4b58      	ldr	r3, [pc, #352]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	4a57      	ldr	r2, [pc, #348]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 800347e:	f023 0301 	bic.w	r3, r3, #1
 8003482:	6713      	str	r3, [r2, #112]	; 0x70
 8003484:	4b55      	ldr	r3, [pc, #340]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	4a54      	ldr	r2, [pc, #336]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 800348a:	f023 0304 	bic.w	r3, r3, #4
 800348e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d015      	beq.n	80034c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003498:	f7fd ff7e 	bl	8001398 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a0:	f7fd ff7a 	bl	8001398 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e0cb      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b6:	4b49      	ldr	r3, [pc, #292]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0ee      	beq.n	80034a0 <HAL_RCC_OscConfig+0x334>
 80034c2:	e014      	b.n	80034ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c4:	f7fd ff68 	bl	8001398 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034cc:	f7fd ff64 	bl	8001398 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e0b5      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e2:	4b3e      	ldr	r3, [pc, #248]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1ee      	bne.n	80034cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ee:	7dfb      	ldrb	r3, [r7, #23]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d105      	bne.n	8003500 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f4:	4b39      	ldr	r3, [pc, #228]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	4a38      	ldr	r2, [pc, #224]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 80034fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80a1 	beq.w	800364c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800350a:	4b34      	ldr	r3, [pc, #208]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b08      	cmp	r3, #8
 8003514:	d05c      	beq.n	80035d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d141      	bne.n	80035a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351e:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <HAL_RCC_OscConfig+0x478>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7fd ff38 	bl	8001398 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352c:	f7fd ff34 	bl	8001398 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e087      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353e:	4b27      	ldr	r3, [pc, #156]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69da      	ldr	r2, [r3, #28]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	019b      	lsls	r3, r3, #6
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	085b      	lsrs	r3, r3, #1
 8003562:	3b01      	subs	r3, #1
 8003564:	041b      	lsls	r3, r3, #16
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	061b      	lsls	r3, r3, #24
 800356e:	491b      	ldr	r1, [pc, #108]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 8003570:	4313      	orrs	r3, r2
 8003572:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003574:	4b1b      	ldr	r3, [pc, #108]	; (80035e4 <HAL_RCC_OscConfig+0x478>)
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7fd ff0d 	bl	8001398 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003582:	f7fd ff09 	bl	8001398 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e05c      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003594:	4b11      	ldr	r3, [pc, #68]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0x416>
 80035a0:	e054      	b.n	800364c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a2:	4b10      	ldr	r3, [pc, #64]	; (80035e4 <HAL_RCC_OscConfig+0x478>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7fd fef6 	bl	8001398 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fd fef2 	bl	8001398 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e045      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	4b06      	ldr	r3, [pc, #24]	; (80035dc <HAL_RCC_OscConfig+0x470>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x444>
 80035ce:	e03d      	b.n	800364c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d107      	bne.n	80035e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e038      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
 80035dc:	40023800 	.word	0x40023800
 80035e0:	40007000 	.word	0x40007000
 80035e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035e8:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <HAL_RCC_OscConfig+0x4ec>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d028      	beq.n	8003648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d121      	bne.n	8003648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d11a      	bne.n	8003648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003618:	4013      	ands	r3, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800361e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003620:	4293      	cmp	r3, r2
 8003622:	d111      	bne.n	8003648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	085b      	lsrs	r3, r3, #1
 8003630:	3b01      	subs	r3, #1
 8003632:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d107      	bne.n	8003648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003644:	429a      	cmp	r2, r3
 8003646:	d001      	beq.n	800364c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e000      	b.n	800364e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40023800 	.word	0x40023800

0800365c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0cc      	b.n	800380a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003670:	4b68      	ldr	r3, [pc, #416]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d90c      	bls.n	8003698 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367e:	4b65      	ldr	r3, [pc, #404]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b63      	ldr	r3, [pc, #396]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0b8      	b.n	800380a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d020      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036b0:	4b59      	ldr	r3, [pc, #356]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	4a58      	ldr	r2, [pc, #352]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036c8:	4b53      	ldr	r3, [pc, #332]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	4a52      	ldr	r2, [pc, #328]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d4:	4b50      	ldr	r3, [pc, #320]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	494d      	ldr	r1, [pc, #308]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d044      	beq.n	800377c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d107      	bne.n	800370a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	4b47      	ldr	r3, [pc, #284]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d119      	bne.n	800373a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e07f      	b.n	800380a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d003      	beq.n	800371a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003716:	2b03      	cmp	r3, #3
 8003718:	d107      	bne.n	800372a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371a:	4b3f      	ldr	r3, [pc, #252]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d109      	bne.n	800373a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e06f      	b.n	800380a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372a:	4b3b      	ldr	r3, [pc, #236]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e067      	b.n	800380a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800373a:	4b37      	ldr	r3, [pc, #220]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f023 0203 	bic.w	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	4934      	ldr	r1, [pc, #208]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	4313      	orrs	r3, r2
 800374a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800374c:	f7fd fe24 	bl	8001398 <HAL_GetTick>
 8003750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003752:	e00a      	b.n	800376a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003754:	f7fd fe20 	bl	8001398 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003762:	4293      	cmp	r3, r2
 8003764:	d901      	bls.n	800376a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e04f      	b.n	800380a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376a:	4b2b      	ldr	r3, [pc, #172]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 020c 	and.w	r2, r3, #12
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	429a      	cmp	r2, r3
 800377a:	d1eb      	bne.n	8003754 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800377c:	4b25      	ldr	r3, [pc, #148]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d20c      	bcs.n	80037a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378a:	4b22      	ldr	r3, [pc, #136]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	4b20      	ldr	r3, [pc, #128]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e032      	b.n	800380a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b0:	4b19      	ldr	r3, [pc, #100]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	4916      	ldr	r1, [pc, #88]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ce:	4b12      	ldr	r3, [pc, #72]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	490e      	ldr	r1, [pc, #56]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037e2:	f000 f821 	bl	8003828 <HAL_RCC_GetSysClockFreq>
 80037e6:	4602      	mov	r2, r0
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	091b      	lsrs	r3, r3, #4
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	490a      	ldr	r1, [pc, #40]	; (800381c <HAL_RCC_ClockConfig+0x1c0>)
 80037f4:	5ccb      	ldrb	r3, [r1, r3]
 80037f6:	fa22 f303 	lsr.w	r3, r2, r3
 80037fa:	4a09      	ldr	r2, [pc, #36]	; (8003820 <HAL_RCC_ClockConfig+0x1c4>)
 80037fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037fe:	4b09      	ldr	r3, [pc, #36]	; (8003824 <HAL_RCC_ClockConfig+0x1c8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd fd84 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40023c00 	.word	0x40023c00
 8003818:	40023800 	.word	0x40023800
 800381c:	0800dfb0 	.word	0x0800dfb0
 8003820:	20000000 	.word	0x20000000
 8003824:	20000004 	.word	0x20000004

08003828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800382c:	b094      	sub	sp, #80	; 0x50
 800382e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	647b      	str	r3, [r7, #68]	; 0x44
 8003834:	2300      	movs	r3, #0
 8003836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003838:	2300      	movs	r3, #0
 800383a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003840:	4b79      	ldr	r3, [pc, #484]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	2b08      	cmp	r3, #8
 800384a:	d00d      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x40>
 800384c:	2b08      	cmp	r3, #8
 800384e:	f200 80e1 	bhi.w	8003a14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x34>
 8003856:	2b04      	cmp	r3, #4
 8003858:	d003      	beq.n	8003862 <HAL_RCC_GetSysClockFreq+0x3a>
 800385a:	e0db      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800385c:	4b73      	ldr	r3, [pc, #460]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x204>)
 800385e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003860:	e0db      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003862:	4b73      	ldr	r3, [pc, #460]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x208>)
 8003864:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003866:	e0d8      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003868:	4b6f      	ldr	r3, [pc, #444]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x200>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003870:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003872:	4b6d      	ldr	r3, [pc, #436]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d063      	beq.n	8003946 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800387e:	4b6a      	ldr	r3, [pc, #424]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	099b      	lsrs	r3, r3, #6
 8003884:	2200      	movs	r2, #0
 8003886:	63bb      	str	r3, [r7, #56]	; 0x38
 8003888:	63fa      	str	r2, [r7, #60]	; 0x3c
 800388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003890:	633b      	str	r3, [r7, #48]	; 0x30
 8003892:	2300      	movs	r3, #0
 8003894:	637b      	str	r3, [r7, #52]	; 0x34
 8003896:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800389a:	4622      	mov	r2, r4
 800389c:	462b      	mov	r3, r5
 800389e:	f04f 0000 	mov.w	r0, #0
 80038a2:	f04f 0100 	mov.w	r1, #0
 80038a6:	0159      	lsls	r1, r3, #5
 80038a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ac:	0150      	lsls	r0, r2, #5
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4621      	mov	r1, r4
 80038b4:	1a51      	subs	r1, r2, r1
 80038b6:	6139      	str	r1, [r7, #16]
 80038b8:	4629      	mov	r1, r5
 80038ba:	eb63 0301 	sbc.w	r3, r3, r1
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038cc:	4659      	mov	r1, fp
 80038ce:	018b      	lsls	r3, r1, #6
 80038d0:	4651      	mov	r1, sl
 80038d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038d6:	4651      	mov	r1, sl
 80038d8:	018a      	lsls	r2, r1, #6
 80038da:	4651      	mov	r1, sl
 80038dc:	ebb2 0801 	subs.w	r8, r2, r1
 80038e0:	4659      	mov	r1, fp
 80038e2:	eb63 0901 	sbc.w	r9, r3, r1
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038fa:	4690      	mov	r8, r2
 80038fc:	4699      	mov	r9, r3
 80038fe:	4623      	mov	r3, r4
 8003900:	eb18 0303 	adds.w	r3, r8, r3
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	462b      	mov	r3, r5
 8003908:	eb49 0303 	adc.w	r3, r9, r3
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800391a:	4629      	mov	r1, r5
 800391c:	024b      	lsls	r3, r1, #9
 800391e:	4621      	mov	r1, r4
 8003920:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003924:	4621      	mov	r1, r4
 8003926:	024a      	lsls	r2, r1, #9
 8003928:	4610      	mov	r0, r2
 800392a:	4619      	mov	r1, r3
 800392c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800392e:	2200      	movs	r2, #0
 8003930:	62bb      	str	r3, [r7, #40]	; 0x28
 8003932:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003934:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003938:	f7fc fca2 	bl	8000280 <__aeabi_uldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4613      	mov	r3, r2
 8003942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003944:	e058      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003946:	4b38      	ldr	r3, [pc, #224]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	099b      	lsrs	r3, r3, #6
 800394c:	2200      	movs	r2, #0
 800394e:	4618      	mov	r0, r3
 8003950:	4611      	mov	r1, r2
 8003952:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003956:	623b      	str	r3, [r7, #32]
 8003958:	2300      	movs	r3, #0
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
 800395c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003960:	4642      	mov	r2, r8
 8003962:	464b      	mov	r3, r9
 8003964:	f04f 0000 	mov.w	r0, #0
 8003968:	f04f 0100 	mov.w	r1, #0
 800396c:	0159      	lsls	r1, r3, #5
 800396e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003972:	0150      	lsls	r0, r2, #5
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4641      	mov	r1, r8
 800397a:	ebb2 0a01 	subs.w	sl, r2, r1
 800397e:	4649      	mov	r1, r9
 8003980:	eb63 0b01 	sbc.w	fp, r3, r1
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003990:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003994:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003998:	ebb2 040a 	subs.w	r4, r2, sl
 800399c:	eb63 050b 	sbc.w	r5, r3, fp
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	00eb      	lsls	r3, r5, #3
 80039aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ae:	00e2      	lsls	r2, r4, #3
 80039b0:	4614      	mov	r4, r2
 80039b2:	461d      	mov	r5, r3
 80039b4:	4643      	mov	r3, r8
 80039b6:	18e3      	adds	r3, r4, r3
 80039b8:	603b      	str	r3, [r7, #0]
 80039ba:	464b      	mov	r3, r9
 80039bc:	eb45 0303 	adc.w	r3, r5, r3
 80039c0:	607b      	str	r3, [r7, #4]
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039ce:	4629      	mov	r1, r5
 80039d0:	028b      	lsls	r3, r1, #10
 80039d2:	4621      	mov	r1, r4
 80039d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039d8:	4621      	mov	r1, r4
 80039da:	028a      	lsls	r2, r1, #10
 80039dc:	4610      	mov	r0, r2
 80039de:	4619      	mov	r1, r3
 80039e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e2:	2200      	movs	r2, #0
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	61fa      	str	r2, [r7, #28]
 80039e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ec:	f7fc fc48 	bl	8000280 <__aeabi_uldivmod>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4613      	mov	r3, r2
 80039f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x200>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	0c1b      	lsrs	r3, r3, #16
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	3301      	adds	r3, #1
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a12:	e002      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3750      	adds	r7, #80	; 0x50
 8003a20:	46bd      	mov	sp, r7
 8003a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a26:	bf00      	nop
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	00f42400 	.word	0x00f42400
 8003a30:	007a1200 	.word	0x007a1200

08003a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a38:	4b03      	ldr	r3, [pc, #12]	; (8003a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	20000000 	.word	0x20000000

08003a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a50:	f7ff fff0 	bl	8003a34 <HAL_RCC_GetHCLKFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	0a9b      	lsrs	r3, r3, #10
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4903      	ldr	r1, [pc, #12]	; (8003a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	0800dfc0 	.word	0x0800dfc0

08003a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a78:	f7ff ffdc 	bl	8003a34 <HAL_RCC_GetHCLKFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	0b5b      	lsrs	r3, r3, #13
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	4903      	ldr	r1, [pc, #12]	; (8003a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40023800 	.word	0x40023800
 8003a98:	0800dfc0 	.word	0x0800dfc0

08003a9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e03f      	b.n	8003b2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fd fa06 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2224      	movs	r2, #36	; 0x24
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f929 	bl	8003d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695a      	ldr	r2, [r3, #20]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b08a      	sub	sp, #40	; 0x28
 8003b3a:	af02      	add	r7, sp, #8
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	4613      	mov	r3, r2
 8003b44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d17c      	bne.n	8003c50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <HAL_UART_Transmit+0x2c>
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e075      	b.n	8003c52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_UART_Transmit+0x3e>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e06e      	b.n	8003c52 <HAL_UART_Transmit+0x11c>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2221      	movs	r2, #33	; 0x21
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b8a:	f7fd fc05 	bl	8001398 <HAL_GetTick>
 8003b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	88fa      	ldrh	r2, [r7, #6]
 8003b94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	88fa      	ldrh	r2, [r7, #6]
 8003b9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba4:	d108      	bne.n	8003bb8 <HAL_UART_Transmit+0x82>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d104      	bne.n	8003bb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	e003      	b.n	8003bc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003bc8:	e02a      	b.n	8003c20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2180      	movs	r1, #128	; 0x80
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f840 	bl	8003c5a <UART_WaitOnFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e036      	b.n	8003c52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10b      	bne.n	8003c02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	e007      	b.n	8003c12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	781a      	ldrb	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1cf      	bne.n	8003bca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2200      	movs	r2, #0
 8003c32:	2140      	movs	r1, #64	; 0x40
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f810 	bl	8003c5a <UART_WaitOnFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e006      	b.n	8003c52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e000      	b.n	8003c52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c50:	2302      	movs	r3, #2
  }
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b090      	sub	sp, #64	; 0x40
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	603b      	str	r3, [r7, #0]
 8003c66:	4613      	mov	r3, r2
 8003c68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c6a:	e050      	b.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c72:	d04c      	beq.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d007      	beq.n	8003c8a <UART_WaitOnFlagUntilTimeout+0x30>
 8003c7a:	f7fd fb8d 	bl	8001398 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d241      	bcs.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	330c      	adds	r3, #12
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	e853 3f00 	ldrex	r3, [r3]
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003caa:	637a      	str	r2, [r7, #52]	; 0x34
 8003cac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1e5      	bne.n	8003c8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3314      	adds	r3, #20
 8003cc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	e853 3f00 	ldrex	r3, [r3]
 8003ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3314      	adds	r3, #20
 8003cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cde:	623a      	str	r2, [r7, #32]
 8003ce0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce2:	69f9      	ldr	r1, [r7, #28]
 8003ce4:	6a3a      	ldr	r2, [r7, #32]
 8003ce6:	e841 2300 	strex	r3, r2, [r1]
 8003cea:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1e5      	bne.n	8003cbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e00f      	b.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4013      	ands	r3, r2
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	bf0c      	ite	eq
 8003d1e:	2301      	moveq	r3, #1
 8003d20:	2300      	movne	r3, #0
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	461a      	mov	r2, r3
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d09f      	beq.n	8003c6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3740      	adds	r7, #64	; 0x40
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d3c:	b0c0      	sub	sp, #256	; 0x100
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	68d9      	ldr	r1, [r3, #12]
 8003d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	ea40 0301 	orr.w	r3, r0, r1
 8003d60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d90:	f021 010c 	bic.w	r1, r1, #12
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d9e:	430b      	orrs	r3, r1
 8003da0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db2:	6999      	ldr	r1, [r3, #24]
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	ea40 0301 	orr.w	r3, r0, r1
 8003dbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4b8f      	ldr	r3, [pc, #572]	; (8004004 <UART_SetConfig+0x2cc>)
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d005      	beq.n	8003dd8 <UART_SetConfig+0xa0>
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b8d      	ldr	r3, [pc, #564]	; (8004008 <UART_SetConfig+0x2d0>)
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d104      	bne.n	8003de2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dd8:	f7ff fe4c 	bl	8003a74 <HAL_RCC_GetPCLK2Freq>
 8003ddc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003de0:	e003      	b.n	8003dea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003de2:	f7ff fe33 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8003de6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df4:	f040 810c 	bne.w	8004010 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e0a:	4622      	mov	r2, r4
 8003e0c:	462b      	mov	r3, r5
 8003e0e:	1891      	adds	r1, r2, r2
 8003e10:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e12:	415b      	adcs	r3, r3
 8003e14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	eb12 0801 	adds.w	r8, r2, r1
 8003e20:	4629      	mov	r1, r5
 8003e22:	eb43 0901 	adc.w	r9, r3, r1
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	f04f 0300 	mov.w	r3, #0
 8003e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e3a:	4690      	mov	r8, r2
 8003e3c:	4699      	mov	r9, r3
 8003e3e:	4623      	mov	r3, r4
 8003e40:	eb18 0303 	adds.w	r3, r8, r3
 8003e44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e48:	462b      	mov	r3, r5
 8003e4a:	eb49 0303 	adc.w	r3, r9, r3
 8003e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e66:	460b      	mov	r3, r1
 8003e68:	18db      	adds	r3, r3, r3
 8003e6a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	eb42 0303 	adc.w	r3, r2, r3
 8003e72:	657b      	str	r3, [r7, #84]	; 0x54
 8003e74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e7c:	f7fc fa00 	bl	8000280 <__aeabi_uldivmod>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4b61      	ldr	r3, [pc, #388]	; (800400c <UART_SetConfig+0x2d4>)
 8003e86:	fba3 2302 	umull	r2, r3, r3, r2
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	011c      	lsls	r4, r3, #4
 8003e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ea0:	4642      	mov	r2, r8
 8003ea2:	464b      	mov	r3, r9
 8003ea4:	1891      	adds	r1, r2, r2
 8003ea6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ea8:	415b      	adcs	r3, r3
 8003eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003eb0:	4641      	mov	r1, r8
 8003eb2:	eb12 0a01 	adds.w	sl, r2, r1
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	eb43 0b01 	adc.w	fp, r3, r1
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ec8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ecc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ed0:	4692      	mov	sl, r2
 8003ed2:	469b      	mov	fp, r3
 8003ed4:	4643      	mov	r3, r8
 8003ed6:	eb1a 0303 	adds.w	r3, sl, r3
 8003eda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ede:	464b      	mov	r3, r9
 8003ee0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ee4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ef4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ef8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003efc:	460b      	mov	r3, r1
 8003efe:	18db      	adds	r3, r3, r3
 8003f00:	643b      	str	r3, [r7, #64]	; 0x40
 8003f02:	4613      	mov	r3, r2
 8003f04:	eb42 0303 	adc.w	r3, r2, r3
 8003f08:	647b      	str	r3, [r7, #68]	; 0x44
 8003f0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f12:	f7fc f9b5 	bl	8000280 <__aeabi_uldivmod>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4b3b      	ldr	r3, [pc, #236]	; (800400c <UART_SetConfig+0x2d4>)
 8003f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	2264      	movs	r2, #100	; 0x64
 8003f26:	fb02 f303 	mul.w	r3, r2, r3
 8003f2a:	1acb      	subs	r3, r1, r3
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f32:	4b36      	ldr	r3, [pc, #216]	; (800400c <UART_SetConfig+0x2d4>)
 8003f34:	fba3 2302 	umull	r2, r3, r3, r2
 8003f38:	095b      	lsrs	r3, r3, #5
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f40:	441c      	add	r4, r3
 8003f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f54:	4642      	mov	r2, r8
 8003f56:	464b      	mov	r3, r9
 8003f58:	1891      	adds	r1, r2, r2
 8003f5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f5c:	415b      	adcs	r3, r3
 8003f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f64:	4641      	mov	r1, r8
 8003f66:	1851      	adds	r1, r2, r1
 8003f68:	6339      	str	r1, [r7, #48]	; 0x30
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	414b      	adcs	r3, r1
 8003f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f7c:	4659      	mov	r1, fp
 8003f7e:	00cb      	lsls	r3, r1, #3
 8003f80:	4651      	mov	r1, sl
 8003f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f86:	4651      	mov	r1, sl
 8003f88:	00ca      	lsls	r2, r1, #3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4642      	mov	r2, r8
 8003f92:	189b      	adds	r3, r3, r2
 8003f94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f98:	464b      	mov	r3, r9
 8003f9a:	460a      	mov	r2, r1
 8003f9c:	eb42 0303 	adc.w	r3, r2, r3
 8003fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003fb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fb8:	460b      	mov	r3, r1
 8003fba:	18db      	adds	r3, r3, r3
 8003fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	eb42 0303 	adc.w	r3, r2, r3
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fce:	f7fc f957 	bl	8000280 <__aeabi_uldivmod>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	; (800400c <UART_SetConfig+0x2d4>)
 8003fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fdc:	095b      	lsrs	r3, r3, #5
 8003fde:	2164      	movs	r1, #100	; 0x64
 8003fe0:	fb01 f303 	mul.w	r3, r1, r3
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	3332      	adds	r3, #50	; 0x32
 8003fea:	4a08      	ldr	r2, [pc, #32]	; (800400c <UART_SetConfig+0x2d4>)
 8003fec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	f003 0207 	and.w	r2, r3, #7
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4422      	add	r2, r4
 8003ffe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004000:	e105      	b.n	800420e <UART_SetConfig+0x4d6>
 8004002:	bf00      	nop
 8004004:	40011000 	.word	0x40011000
 8004008:	40011400 	.word	0x40011400
 800400c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004014:	2200      	movs	r2, #0
 8004016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800401a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800401e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004022:	4642      	mov	r2, r8
 8004024:	464b      	mov	r3, r9
 8004026:	1891      	adds	r1, r2, r2
 8004028:	6239      	str	r1, [r7, #32]
 800402a:	415b      	adcs	r3, r3
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
 800402e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004032:	4641      	mov	r1, r8
 8004034:	1854      	adds	r4, r2, r1
 8004036:	4649      	mov	r1, r9
 8004038:	eb43 0501 	adc.w	r5, r3, r1
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	00eb      	lsls	r3, r5, #3
 8004046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800404a:	00e2      	lsls	r2, r4, #3
 800404c:	4614      	mov	r4, r2
 800404e:	461d      	mov	r5, r3
 8004050:	4643      	mov	r3, r8
 8004052:	18e3      	adds	r3, r4, r3
 8004054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004058:	464b      	mov	r3, r9
 800405a:	eb45 0303 	adc.w	r3, r5, r3
 800405e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800406e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800407e:	4629      	mov	r1, r5
 8004080:	008b      	lsls	r3, r1, #2
 8004082:	4621      	mov	r1, r4
 8004084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004088:	4621      	mov	r1, r4
 800408a:	008a      	lsls	r2, r1, #2
 800408c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004090:	f7fc f8f6 	bl	8000280 <__aeabi_uldivmod>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4b60      	ldr	r3, [pc, #384]	; (800421c <UART_SetConfig+0x4e4>)
 800409a:	fba3 2302 	umull	r2, r3, r3, r2
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	011c      	lsls	r4, r3, #4
 80040a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040b4:	4642      	mov	r2, r8
 80040b6:	464b      	mov	r3, r9
 80040b8:	1891      	adds	r1, r2, r2
 80040ba:	61b9      	str	r1, [r7, #24]
 80040bc:	415b      	adcs	r3, r3
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c4:	4641      	mov	r1, r8
 80040c6:	1851      	adds	r1, r2, r1
 80040c8:	6139      	str	r1, [r7, #16]
 80040ca:	4649      	mov	r1, r9
 80040cc:	414b      	adcs	r3, r1
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040dc:	4659      	mov	r1, fp
 80040de:	00cb      	lsls	r3, r1, #3
 80040e0:	4651      	mov	r1, sl
 80040e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040e6:	4651      	mov	r1, sl
 80040e8:	00ca      	lsls	r2, r1, #3
 80040ea:	4610      	mov	r0, r2
 80040ec:	4619      	mov	r1, r3
 80040ee:	4603      	mov	r3, r0
 80040f0:	4642      	mov	r2, r8
 80040f2:	189b      	adds	r3, r3, r2
 80040f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040f8:	464b      	mov	r3, r9
 80040fa:	460a      	mov	r2, r1
 80040fc:	eb42 0303 	adc.w	r3, r2, r3
 8004100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	67bb      	str	r3, [r7, #120]	; 0x78
 800410e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800411c:	4649      	mov	r1, r9
 800411e:	008b      	lsls	r3, r1, #2
 8004120:	4641      	mov	r1, r8
 8004122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004126:	4641      	mov	r1, r8
 8004128:	008a      	lsls	r2, r1, #2
 800412a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800412e:	f7fc f8a7 	bl	8000280 <__aeabi_uldivmod>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4b39      	ldr	r3, [pc, #228]	; (800421c <UART_SetConfig+0x4e4>)
 8004138:	fba3 1302 	umull	r1, r3, r3, r2
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	2164      	movs	r1, #100	; 0x64
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	3332      	adds	r3, #50	; 0x32
 800414a:	4a34      	ldr	r2, [pc, #208]	; (800421c <UART_SetConfig+0x4e4>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004156:	441c      	add	r4, r3
 8004158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800415c:	2200      	movs	r2, #0
 800415e:	673b      	str	r3, [r7, #112]	; 0x70
 8004160:	677a      	str	r2, [r7, #116]	; 0x74
 8004162:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004166:	4642      	mov	r2, r8
 8004168:	464b      	mov	r3, r9
 800416a:	1891      	adds	r1, r2, r2
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	415b      	adcs	r3, r3
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004176:	4641      	mov	r1, r8
 8004178:	1851      	adds	r1, r2, r1
 800417a:	6039      	str	r1, [r7, #0]
 800417c:	4649      	mov	r1, r9
 800417e:	414b      	adcs	r3, r1
 8004180:	607b      	str	r3, [r7, #4]
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800418e:	4659      	mov	r1, fp
 8004190:	00cb      	lsls	r3, r1, #3
 8004192:	4651      	mov	r1, sl
 8004194:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004198:	4651      	mov	r1, sl
 800419a:	00ca      	lsls	r2, r1, #3
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	4603      	mov	r3, r0
 80041a2:	4642      	mov	r2, r8
 80041a4:	189b      	adds	r3, r3, r2
 80041a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80041a8:	464b      	mov	r3, r9
 80041aa:	460a      	mov	r2, r1
 80041ac:	eb42 0303 	adc.w	r3, r2, r3
 80041b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	663b      	str	r3, [r7, #96]	; 0x60
 80041bc:	667a      	str	r2, [r7, #100]	; 0x64
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041ca:	4649      	mov	r1, r9
 80041cc:	008b      	lsls	r3, r1, #2
 80041ce:	4641      	mov	r1, r8
 80041d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041d4:	4641      	mov	r1, r8
 80041d6:	008a      	lsls	r2, r1, #2
 80041d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041dc:	f7fc f850 	bl	8000280 <__aeabi_uldivmod>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4b0d      	ldr	r3, [pc, #52]	; (800421c <UART_SetConfig+0x4e4>)
 80041e6:	fba3 1302 	umull	r1, r3, r3, r2
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	2164      	movs	r1, #100	; 0x64
 80041ee:	fb01 f303 	mul.w	r3, r1, r3
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	3332      	adds	r3, #50	; 0x32
 80041f8:	4a08      	ldr	r2, [pc, #32]	; (800421c <UART_SetConfig+0x4e4>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	f003 020f 	and.w	r2, r3, #15
 8004204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4422      	add	r2, r4
 800420c:	609a      	str	r2, [r3, #8]
}
 800420e:	bf00      	nop
 8004210:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004214:	46bd      	mov	sp, r7
 8004216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800421a:	bf00      	nop
 800421c:	51eb851f 	.word	0x51eb851f

08004220 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004220:	b084      	sub	sp, #16
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	f107 001c 	add.w	r0, r7, #28
 800422e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	2b01      	cmp	r3, #1
 8004236:	d122      	bne.n	800427e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800424c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004262:	2b01      	cmp	r3, #1
 8004264:	d105      	bne.n	8004272 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f9c0 	bl	80045f8 <USB_CoreReset>
 8004278:	4603      	mov	r3, r0
 800427a:	73fb      	strb	r3, [r7, #15]
 800427c:	e01a      	b.n	80042b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f9b4 	bl	80045f8 <USB_CoreReset>
 8004290:	4603      	mov	r3, r0
 8004292:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	639a      	str	r2, [r3, #56]	; 0x38
 80042a6:	e005      	b.n	80042b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d10b      	bne.n	80042d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f043 0206 	orr.w	r2, r3, #6
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f043 0220 	orr.w	r2, r3, #32
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042de:	b004      	add	sp, #16
 80042e0:	4770      	bx	lr

080042e2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f043 0201 	orr.w	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f023 0201 	bic.w	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	460b      	mov	r3, r1
 8004330:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d115      	bne.n	8004374 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004354:	2001      	movs	r0, #1
 8004356:	f7fd f82b 	bl	80013b0 <HAL_Delay>
      ms++;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3301      	adds	r3, #1
 800435e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f93a 	bl	80045da <USB_GetMode>
 8004366:	4603      	mov	r3, r0
 8004368:	2b01      	cmp	r3, #1
 800436a:	d01e      	beq.n	80043aa <USB_SetCurrentMode+0x84>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b31      	cmp	r3, #49	; 0x31
 8004370:	d9f0      	bls.n	8004354 <USB_SetCurrentMode+0x2e>
 8004372:	e01a      	b.n	80043aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d115      	bne.n	80043a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004386:	2001      	movs	r0, #1
 8004388:	f7fd f812 	bl	80013b0 <HAL_Delay>
      ms++;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	3301      	adds	r3, #1
 8004390:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f921 	bl	80045da <USB_GetMode>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <USB_SetCurrentMode+0x84>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b31      	cmp	r3, #49	; 0x31
 80043a2:	d9f0      	bls.n	8004386 <USB_SetCurrentMode+0x60>
 80043a4:	e001      	b.n	80043aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e005      	b.n	80043b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b32      	cmp	r3, #50	; 0x32
 80043ae:	d101      	bne.n	80043b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3301      	adds	r3, #1
 80043d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4a13      	ldr	r2, [pc, #76]	; (8004424 <USB_FlushTxFifo+0x64>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d901      	bls.n	80043e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e01b      	b.n	8004418 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	daf2      	bge.n	80043ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	019b      	lsls	r3, r3, #6
 80043f0:	f043 0220 	orr.w	r2, r3, #32
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3301      	adds	r3, #1
 80043fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a08      	ldr	r2, [pc, #32]	; (8004424 <USB_FlushTxFifo+0x64>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e006      	b.n	8004418 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b20      	cmp	r3, #32
 8004414:	d0f0      	beq.n	80043f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	00030d40 	.word	0x00030d40

08004428 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3301      	adds	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4a11      	ldr	r2, [pc, #68]	; (8004484 <USB_FlushRxFifo+0x5c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e018      	b.n	8004478 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	daf2      	bge.n	8004434 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2210      	movs	r2, #16
 8004456:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3301      	adds	r3, #1
 800445c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4a08      	ldr	r2, [pc, #32]	; (8004484 <USB_FlushRxFifo+0x5c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e006      	b.n	8004478 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	2b10      	cmp	r3, #16
 8004474:	d0f0      	beq.n	8004458 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	00030d40 	.word	0x00030d40

08004488 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004488:	b480      	push	{r7}
 800448a:	b089      	sub	sp, #36	; 0x24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	4611      	mov	r1, r2
 8004494:	461a      	mov	r2, r3
 8004496:	460b      	mov	r3, r1
 8004498:	71fb      	strb	r3, [r7, #7]
 800449a:	4613      	mov	r3, r2
 800449c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80044a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d123      	bne.n	80044f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80044ae:	88bb      	ldrh	r3, [r7, #4]
 80044b0:	3303      	adds	r3, #3
 80044b2:	089b      	lsrs	r3, r3, #2
 80044b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	e018      	b.n	80044ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	031a      	lsls	r2, r3, #12
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c8:	461a      	mov	r2, r3
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	3301      	adds	r3, #1
 80044d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	3301      	adds	r3, #1
 80044da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	3301      	adds	r3, #1
 80044e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	3301      	adds	r3, #1
 80044e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	3301      	adds	r3, #1
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d3e2      	bcc.n	80044bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3724      	adds	r7, #36	; 0x24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004504:	b480      	push	{r7}
 8004506:	b08b      	sub	sp, #44	; 0x2c
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	4613      	mov	r3, r2
 8004510:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	089b      	lsrs	r3, r3, #2
 800451e:	b29b      	uxth	r3, r3
 8004520:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800452a:	2300      	movs	r3, #0
 800452c:	623b      	str	r3, [r7, #32]
 800452e:	e014      	b.n	800455a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	601a      	str	r2, [r3, #0]
    pDest++;
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	3301      	adds	r3, #1
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	3301      	adds	r3, #1
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	3301      	adds	r3, #1
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	3301      	adds	r3, #1
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	3301      	adds	r3, #1
 8004558:	623b      	str	r3, [r7, #32]
 800455a:	6a3a      	ldr	r2, [r7, #32]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	429a      	cmp	r2, r3
 8004560:	d3e6      	bcc.n	8004530 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004562:	8bfb      	ldrh	r3, [r7, #30]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01e      	beq.n	80045a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004572:	461a      	mov	r2, r3
 8004574:	f107 0310 	add.w	r3, r7, #16
 8004578:	6812      	ldr	r2, [r2, #0]
 800457a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	fa22 f303 	lsr.w	r3, r2, r3
 8004588:	b2da      	uxtb	r2, r3
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	701a      	strb	r2, [r3, #0]
      i++;
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	3301      	adds	r3, #1
 8004592:	623b      	str	r3, [r7, #32]
      pDest++;
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	3301      	adds	r3, #1
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800459a:	8bfb      	ldrh	r3, [r7, #30]
 800459c:	3b01      	subs	r3, #1
 800459e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80045a0:	8bfb      	ldrh	r3, [r7, #30]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1ea      	bne.n	800457c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	372c      	adds	r7, #44	; 0x2c
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4013      	ands	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80045cc:	68fb      	ldr	r3, [r7, #12]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f003 0301 	and.w	r3, r3, #1
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
	...

080045f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3301      	adds	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4a13      	ldr	r2, [pc, #76]	; (800465c <USB_CoreReset+0x64>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e01b      	b.n	800464e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	daf2      	bge.n	8004604 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f043 0201 	orr.w	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3301      	adds	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4a09      	ldr	r2, [pc, #36]	; (800465c <USB_CoreReset+0x64>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d901      	bls.n	8004640 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e006      	b.n	800464e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b01      	cmp	r3, #1
 800464a:	d0f0      	beq.n	800462e <USB_CoreReset+0x36>

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	00030d40 	.word	0x00030d40

08004660 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004660:	b084      	sub	sp, #16
 8004662:	b580      	push	{r7, lr}
 8004664:	b086      	sub	sp, #24
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800466e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004680:	461a      	mov	r2, r3
 8004682:	2300      	movs	r3, #0
 8004684:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d018      	beq.n	80046e8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80046b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d10a      	bne.n	80046d2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046ca:	f043 0304 	orr.w	r3, r3, #4
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	e014      	b.n	80046fc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046e0:	f023 0304 	bic.w	r3, r3, #4
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	e009      	b.n	80046fc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046f6:	f023 0304 	bic.w	r3, r3, #4
 80046fa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046fc:	2110      	movs	r1, #16
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7ff fe5e 	bl	80043c0 <USB_FlushTxFifo>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff fe8a 	bl	8004428 <USB_FlushRxFifo>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800471e:	2300      	movs	r3, #0
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	e015      	b.n	8004750 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004730:	461a      	mov	r2, r3
 8004732:	f04f 33ff 	mov.w	r3, #4294967295
 8004736:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004744:	461a      	mov	r2, r3
 8004746:	2300      	movs	r3, #0
 8004748:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	3301      	adds	r3, #1
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	429a      	cmp	r2, r3
 8004756:	d3e5      	bcc.n	8004724 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f04f 32ff 	mov.w	r2, #4294967295
 8004764:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00b      	beq.n	800478a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004778:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a13      	ldr	r2, [pc, #76]	; (80047cc <USB_HostInit+0x16c>)
 800477e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <USB_HostInit+0x170>)
 8004784:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004788:	e009      	b.n	800479e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2280      	movs	r2, #128	; 0x80
 800478e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a10      	ldr	r2, [pc, #64]	; (80047d4 <USB_HostInit+0x174>)
 8004794:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a0f      	ldr	r2, [pc, #60]	; (80047d8 <USB_HostInit+0x178>)
 800479a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d105      	bne.n	80047b0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	f043 0210 	orr.w	r2, r3, #16
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699a      	ldr	r2, [r3, #24]
 80047b4:	4b09      	ldr	r3, [pc, #36]	; (80047dc <USB_HostInit+0x17c>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80047bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047c8:	b004      	add	sp, #16
 80047ca:	4770      	bx	lr
 80047cc:	01000200 	.word	0x01000200
 80047d0:	00e00300 	.word	0x00e00300
 80047d4:	00600080 	.word	0x00600080
 80047d8:	004000e0 	.word	0x004000e0
 80047dc:	a3200008 	.word	0xa3200008

080047e0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047fe:	f023 0303 	bic.w	r3, r3, #3
 8004802:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	68f9      	ldr	r1, [r7, #12]
 8004814:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004818:	4313      	orrs	r3, r2
 800481a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d107      	bne.n	8004832 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004828:	461a      	mov	r2, r3
 800482a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800482e:	6053      	str	r3, [r2, #4]
 8004830:	e009      	b.n	8004846 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	2b02      	cmp	r3, #2
 8004836:	d106      	bne.n	8004846 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800483e:	461a      	mov	r2, r3
 8004840:	f241 7370 	movw	r3, #6000	; 0x1770
 8004844:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004874:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800487e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004882:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004884:	2064      	movs	r0, #100	; 0x64
 8004886:	f7fc fd93 	bl	80013b0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004892:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004896:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004898:	200a      	movs	r0, #10
 800489a:	f7fc fd89 	bl	80013b0 <HAL_Delay>

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80048cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d109      	bne.n	80048ec <USB_DriveVbus+0x44>
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d106      	bne.n	80048ec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80048e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048ea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f6:	d109      	bne.n	800490c <USB_DriveVbus+0x64>
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800490a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	0c5b      	lsrs	r3, r3, #17
 8004938:	f003 0303 	and.w	r3, r3, #3
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	b29b      	uxth	r3, r3
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	4608      	mov	r0, r1
 8004976:	4611      	mov	r1, r2
 8004978:	461a      	mov	r2, r3
 800497a:	4603      	mov	r3, r0
 800497c:	70fb      	strb	r3, [r7, #3]
 800497e:	460b      	mov	r3, r1
 8004980:	70bb      	strb	r3, [r7, #2]
 8004982:	4613      	mov	r3, r2
 8004984:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	4413      	add	r3, r2
 8004996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499a:	461a      	mov	r2, r3
 800499c:	f04f 33ff 	mov.w	r3, #4294967295
 80049a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80049a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d87e      	bhi.n	8004aa8 <USB_HC_Init+0x13c>
 80049aa:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <USB_HC_Init+0x44>)
 80049ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b0:	080049c1 	.word	0x080049c1
 80049b4:	08004a6b 	.word	0x08004a6b
 80049b8:	080049c1 	.word	0x080049c1
 80049bc:	08004a2d 	.word	0x08004a2d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049cc:	461a      	mov	r2, r3
 80049ce:	f240 439d 	movw	r3, #1181	; 0x49d
 80049d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80049d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	da10      	bge.n	80049fe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	0151      	lsls	r1, r2, #5
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	440a      	add	r2, r1
 80049f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049fa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80049fc:	e057      	b.n	8004aae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d051      	beq.n	8004aae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004a0a:	78fb      	ldrb	r3, [r7, #3]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	78fa      	ldrb	r2, [r7, #3]
 8004a1a:	0151      	lsls	r1, r2, #5
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	440a      	add	r2, r1
 8004a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a28:	60d3      	str	r3, [r2, #12]
      break;
 8004a2a:	e040      	b.n	8004aae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f240 639d 	movw	r3, #1693	; 0x69d
 8004a3e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004a40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	da34      	bge.n	8004ab2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004a48:	78fb      	ldrb	r3, [r7, #3]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	78fa      	ldrb	r2, [r7, #3]
 8004a58:	0151      	lsls	r1, r2, #5
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	440a      	add	r2, r1
 8004a5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a66:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004a68:	e023      	b.n	8004ab2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a76:	461a      	mov	r2, r3
 8004a78:	f240 2325 	movw	r3, #549	; 0x225
 8004a7c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004a7e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	da17      	bge.n	8004ab6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004a86:	78fb      	ldrb	r3, [r7, #3]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	78fa      	ldrb	r2, [r7, #3]
 8004a96:	0151      	lsls	r1, r2, #5
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	440a      	add	r2, r1
 8004a9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aa0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004aa4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004aa6:	e006      	b.n	8004ab6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	77fb      	strb	r3, [r7, #31]
      break;
 8004aac:	e004      	b.n	8004ab8 <USB_HC_Init+0x14c>
      break;
 8004aae:	bf00      	nop
 8004ab0:	e002      	b.n	8004ab8 <USB_HC_Init+0x14c>
      break;
 8004ab2:	bf00      	nop
 8004ab4:	e000      	b.n	8004ab8 <USB_HC_Init+0x14c>
      break;
 8004ab6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	0151      	lsls	r1, r2, #5
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	440a      	add	r2, r1
 8004ace:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ad2:	f043 0302 	orr.w	r3, r3, #2
 8004ad6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ade:	699a      	ldr	r2, [r3, #24]
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aec:	6939      	ldr	r1, [r7, #16]
 8004aee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004af2:	4313      	orrs	r3, r2
 8004af4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004b02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	da03      	bge.n	8004b12 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b0e:	61bb      	str	r3, [r7, #24]
 8004b10:	e001      	b.n	8004b16 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff feff 	bl	800491a <USB_GetHostSpeed>
 8004b1c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004b1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d106      	bne.n	8004b34 <USB_HC_Init+0x1c8>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d003      	beq.n	8004b34 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	e001      	b.n	8004b38 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b38:	787b      	ldrb	r3, [r7, #1]
 8004b3a:	059b      	lsls	r3, r3, #22
 8004b3c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004b40:	78bb      	ldrb	r3, [r7, #2]
 8004b42:	02db      	lsls	r3, r3, #11
 8004b44:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b48:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004b4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b4e:	049b      	lsls	r3, r3, #18
 8004b50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004b54:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004b56:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b58:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004b5c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b62:	78fb      	ldrb	r3, [r7, #3]
 8004b64:	0159      	lsls	r1, r3, #5
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	440b      	add	r3, r1
 8004b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b6e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b74:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004b76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d003      	beq.n	8004b86 <USB_HC_Init+0x21a>
 8004b7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d10f      	bne.n	8004ba6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004b86:	78fb      	ldrb	r3, [r7, #3]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	78fa      	ldrb	r2, [r7, #3]
 8004b96:	0151      	lsls	r1, r2, #5
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	440a      	add	r2, r1
 8004b9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ba0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ba4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004ba6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3720      	adds	r7, #32
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08c      	sub	sp, #48	; 0x30
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	785b      	ldrb	r3, [r3, #1]
 8004bc6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bcc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d02d      	beq.n	8004c36 <USB_HC_StartXfer+0x86>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	791b      	ldrb	r3, [r3, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d129      	bne.n	8004c36 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d117      	bne.n	8004c18 <USB_HC_StartXfer+0x68>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	79db      	ldrb	r3, [r3, #7]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <USB_HC_StartXfer+0x48>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	79db      	ldrb	r3, [r3, #7]
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d10f      	bne.n	8004c18 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	6a3a      	ldr	r2, [r7, #32]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c16:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004c18:	79fb      	ldrb	r3, [r7, #7]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10b      	bne.n	8004c36 <USB_HC_StartXfer+0x86>
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	795b      	ldrb	r3, [r3, #5]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d107      	bne.n	8004c36 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	785b      	ldrb	r3, [r3, #1]
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 fa0f 	bl	8005050 <USB_DoPing>
      return HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	e0f8      	b.n	8004e28 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d018      	beq.n	8004c70 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	8912      	ldrh	r2, [r2, #8]
 8004c46:	4413      	add	r3, r2
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	8912      	ldrh	r2, [r2, #8]
 8004c4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c52:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004c54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004c56:	8b7b      	ldrh	r3, [r7, #26]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d90b      	bls.n	8004c74 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004c5c:	8b7b      	ldrh	r3, [r7, #26]
 8004c5e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004c60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	8912      	ldrh	r2, [r2, #8]
 8004c66:	fb03 f202 	mul.w	r2, r3, r2
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	611a      	str	r2, [r3, #16]
 8004c6e:	e001      	b.n	8004c74 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004c70:	2301      	movs	r3, #1
 8004c72:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	78db      	ldrb	r3, [r3, #3]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d007      	beq.n	8004c8c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004c7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	8912      	ldrh	r2, [r2, #8]
 8004c82:	fb03 f202 	mul.w	r2, r3, r2
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	611a      	str	r2, [r3, #16]
 8004c8a:	e003      	b.n	8004c94 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004c9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c9e:	04d9      	lsls	r1, r3, #19
 8004ca0:	4b63      	ldr	r3, [pc, #396]	; (8004e30 <USB_HC_StartXfer+0x280>)
 8004ca2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ca4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	7a9b      	ldrb	r3, [r3, #10]
 8004caa:	075b      	lsls	r3, r3, #29
 8004cac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004cb0:	69f9      	ldr	r1, [r7, #28]
 8004cb2:	0148      	lsls	r0, r1, #5
 8004cb4:	6a39      	ldr	r1, [r7, #32]
 8004cb6:	4401      	add	r1, r0
 8004cb8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004cbc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004cbe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	68d9      	ldr	r1, [r3, #12]
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd6:	460a      	mov	r2, r1
 8004cd8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bf0c      	ite	eq
 8004cea:	2301      	moveq	r3, #1
 8004cec:	2300      	movne	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	0151      	lsls	r1, r2, #5
 8004d04:	6a3a      	ldr	r2, [r7, #32]
 8004d06:	440a      	add	r2, r1
 8004d08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d10:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	7e7b      	ldrb	r3, [r7, #25]
 8004d22:	075b      	lsls	r3, r3, #29
 8004d24:	69f9      	ldr	r1, [r7, #28]
 8004d26:	0148      	lsls	r0, r1, #5
 8004d28:	6a39      	ldr	r1, [r7, #32]
 8004d2a:	4401      	add	r1, r0
 8004d2c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004d30:	4313      	orrs	r3, r2
 8004d32:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d4a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	78db      	ldrb	r3, [r3, #3]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d004      	beq.n	8004d5e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	e003      	b.n	8004d66 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d64:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d6c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004d80:	79fb      	ldrb	r3, [r7, #7]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	e04e      	b.n	8004e28 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	78db      	ldrb	r3, [r3, #3]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d149      	bne.n	8004e26 <USB_HC_StartXfer+0x276>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d045      	beq.n	8004e26 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	79db      	ldrb	r3, [r3, #7]
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d830      	bhi.n	8004e04 <USB_HC_StartXfer+0x254>
 8004da2:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <USB_HC_StartXfer+0x1f8>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004db9 	.word	0x08004db9
 8004dac:	08004ddd 	.word	0x08004ddd
 8004db0:	08004db9 	.word	0x08004db9
 8004db4:	08004ddd 	.word	0x08004ddd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	3303      	adds	r3, #3
 8004dbe:	089b      	lsrs	r3, r3, #2
 8004dc0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004dc2:	8afa      	ldrh	r2, [r7, #22]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d91c      	bls.n	8004e08 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	f043 0220 	orr.w	r2, r3, #32
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	619a      	str	r2, [r3, #24]
        }
        break;
 8004dda:	e015      	b.n	8004e08 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	3303      	adds	r3, #3
 8004de2:	089b      	lsrs	r3, r3, #2
 8004de4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004de6:	8afa      	ldrh	r2, [r7, #22]
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d90a      	bls.n	8004e0c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	619a      	str	r2, [r3, #24]
        }
        break;
 8004e02:	e003      	b.n	8004e0c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004e04:	bf00      	nop
 8004e06:	e002      	b.n	8004e0e <USB_HC_StartXfer+0x25e>
        break;
 8004e08:	bf00      	nop
 8004e0a:	e000      	b.n	8004e0e <USB_HC_StartXfer+0x25e>
        break;
 8004e0c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	68d9      	ldr	r1, [r3, #12]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	785a      	ldrb	r2, [r3, #1]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	9000      	str	r0, [sp, #0]
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f7ff fb31 	bl	8004488 <USB_WritePacket>
  }

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3728      	adds	r7, #40	; 0x28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	1ff80000 	.word	0x1ff80000

08004e34 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	b29b      	uxth	r3, r3
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b089      	sub	sp, #36	; 0x24
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	0c9b      	lsrs	r3, r3, #18
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	0fdb      	lsrs	r3, r3, #31
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	d104      	bne.n	8004eb0 <USB_HC_Halt+0x5a>
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e0c8      	b.n	8005042 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <USB_HC_Halt+0x66>
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d163      	bne.n	8004f84 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	0151      	lsls	r1, r2, #5
 8004ece:	69fa      	ldr	r2, [r7, #28]
 8004ed0:	440a      	add	r2, r1
 8004ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ed6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eda:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 0320 	and.w	r3, r3, #32
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f040 80ab 	bne.w	8005040 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d133      	bne.n	8004f5e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	0151      	lsls	r1, r2, #5
 8004f08:	69fa      	ldr	r2, [r7, #28]
 8004f0a:	440a      	add	r2, r1
 8004f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f14:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	0151      	lsls	r1, r2, #5
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	440a      	add	r2, r1
 8004f2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f34:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f42:	d81d      	bhi.n	8004f80 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f5a:	d0ec      	beq.n	8004f36 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004f5c:	e070      	b.n	8005040 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	0151      	lsls	r1, r2, #5
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	440a      	add	r2, r1
 8004f74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f7c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004f7e:	e05f      	b.n	8005040 <USB_HC_Halt+0x1ea>
            break;
 8004f80:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004f82:	e05d      	b.n	8005040 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	0151      	lsls	r1, r2, #5
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	440a      	add	r2, r1
 8004f9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fa2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d133      	bne.n	800501c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	0151      	lsls	r1, r2, #5
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	440a      	add	r2, r1
 8004fca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fd2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	0151      	lsls	r1, r2, #5
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	440a      	add	r2, r1
 8004fea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ff2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005000:	d81d      	bhi.n	800503e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	4413      	add	r3, r2
 800500a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005014:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005018:	d0ec      	beq.n	8004ff4 <USB_HC_Halt+0x19e>
 800501a:	e011      	b.n	8005040 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	4413      	add	r3, r2
 8005024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	0151      	lsls	r1, r2, #5
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	440a      	add	r2, r1
 8005032:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005036:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	e000      	b.n	8005040 <USB_HC_Halt+0x1ea>
          break;
 800503e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3724      	adds	r7, #36	; 0x24
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005064:	2301      	movs	r3, #1
 8005066:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	04da      	lsls	r2, r3, #19
 800506c:	4b15      	ldr	r3, [pc, #84]	; (80050c4 <USB_DoPing+0x74>)
 800506e:	4013      	ands	r3, r2
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	0151      	lsls	r1, r2, #5
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	440a      	add	r2, r1
 8005078:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800507c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005080:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	4413      	add	r3, r2
 800508a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005098:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050a0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ae:	461a      	mov	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	371c      	adds	r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	1ff80000 	.word	0x1ff80000

080050c8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff f911 	bl	8004304 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050e2:	2110      	movs	r1, #16
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7ff f96b 	bl	80043c0 <USB_FlushTxFifo>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7ff f997 	bl	8004428 <USB_FlushRxFifo>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005104:	2300      	movs	r3, #0
 8005106:	61bb      	str	r3, [r7, #24]
 8005108:	e01f      	b.n	800514a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	4413      	add	r3, r2
 8005112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005120:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005128:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005130:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	4413      	add	r3, r2
 800513a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513e:	461a      	mov	r2, r3
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	3301      	adds	r3, #1
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b0f      	cmp	r3, #15
 800514e:	d9dc      	bls.n	800510a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005150:	2300      	movs	r3, #0
 8005152:	61bb      	str	r3, [r7, #24]
 8005154:	e034      	b.n	80051c0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	4413      	add	r3, r2
 800515e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800516c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005174:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800517c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	4413      	add	r3, r2
 8005186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518a:	461a      	mov	r2, r3
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	3301      	adds	r3, #1
 8005194:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800519c:	d80c      	bhi.n	80051b8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051b4:	d0ec      	beq.n	8005190 <USB_StopHost+0xc8>
 80051b6:	e000      	b.n	80051ba <USB_StopHost+0xf2>
        break;
 80051b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	3301      	adds	r3, #1
 80051be:	61bb      	str	r3, [r7, #24]
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	2b0f      	cmp	r3, #15
 80051c4:	d9c7      	bls.n	8005156 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051cc:	461a      	mov	r2, r3
 80051ce:	f04f 33ff 	mov.w	r3, #4294967295
 80051d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f04f 32ff 	mov.w	r2, #4294967295
 80051da:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff f880 	bl	80042e2 <USB_EnableGlobalInt>

  return ret;
 80051e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3720      	adds	r7, #32
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80051f0:	4904      	ldr	r1, [pc, #16]	; (8005204 <MX_FATFS_Init+0x18>)
 80051f2:	4805      	ldr	r0, [pc, #20]	; (8005208 <MX_FATFS_Init+0x1c>)
 80051f4:	f007 fd4c 	bl	800cc90 <FATFS_LinkDriver>
 80051f8:	4603      	mov	r3, r0
 80051fa:	461a      	mov	r2, r3
 80051fc:	4b03      	ldr	r3, [pc, #12]	; (800520c <MX_FATFS_Init+0x20>)
 80051fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005200:	bf00      	nop
 8005202:	bd80      	pop	{r7, pc}
 8005204:	200031f0 	.word	0x200031f0
 8005208:	0800dfc8 	.word	0x0800dfc8
 800520c:	200031ec 	.word	0x200031ec

08005210 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005214:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005216:	4618      	mov	r0, r3
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	4603      	mov	r3, r0
 8005240:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	4619      	mov	r1, r3
 800524a:	4808      	ldr	r0, [pc, #32]	; (800526c <USBH_status+0x34>)
 800524c:	f000 fe32 	bl	8005eb4 <USBH_MSC_UnitIsReady>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <USBH_status+0x24>
  {
    res = RES_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	73fb      	strb	r3, [r7, #15]
 800525a:	e001      	b.n	8005260 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005260:	7bfb      	ldrb	r3, [r7, #15]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20003688 	.word	0x20003688

08005270 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b094      	sub	sp, #80	; 0x50
 8005274:	af02      	add	r7, sp, #8
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	607a      	str	r2, [r7, #4]
 800527a:	603b      	str	r3, [r7, #0]
 800527c:	4603      	mov	r3, r0
 800527e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8005286:	7bf9      	ldrb	r1, [r7, #15]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4813      	ldr	r0, [pc, #76]	; (80052e0 <USBH_read+0x70>)
 8005292:	f000 fe59 	bl	8005f48 <USBH_MSC_Read>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d103      	bne.n	80052a4 <USBH_read+0x34>
  {
    res = RES_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80052a2:	e017      	b.n	80052d4 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80052a4:	f107 0210 	add.w	r2, r7, #16
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	4619      	mov	r1, r3
 80052ac:	480c      	ldr	r0, [pc, #48]	; (80052e0 <USBH_read+0x70>)
 80052ae:	f000 fe27 	bl	8005f00 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80052b2:	7f7b      	ldrb	r3, [r7, #29]
 80052b4:	2b3a      	cmp	r3, #58	; 0x3a
 80052b6:	d005      	beq.n	80052c4 <USBH_read+0x54>
 80052b8:	2b3a      	cmp	r3, #58	; 0x3a
 80052ba:	dc07      	bgt.n	80052cc <USBH_read+0x5c>
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d001      	beq.n	80052c4 <USBH_read+0x54>
 80052c0:	2b28      	cmp	r3, #40	; 0x28
 80052c2:	d103      	bne.n	80052cc <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80052c4:	2303      	movs	r3, #3
 80052c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80052ca:	e003      	b.n	80052d4 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80052d2:	bf00      	nop
    }
  }

  return res;
 80052d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3748      	adds	r7, #72	; 0x48
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	20003688 	.word	0x20003688

080052e4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b094      	sub	sp, #80	; 0x50
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	607a      	str	r2, [r7, #4]
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	4603      	mov	r3, r0
 80052f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80052fa:	7bf9      	ldrb	r1, [r7, #15]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	4817      	ldr	r0, [pc, #92]	; (8005364 <USBH_write+0x80>)
 8005306:	f000 fe88 	bl	800601a <USBH_MSC_Write>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d103      	bne.n	8005318 <USBH_write+0x34>
  {
    res = RES_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005316:	e01f      	b.n	8005358 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005318:	f107 0210 	add.w	r2, r7, #16
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	4619      	mov	r1, r3
 8005320:	4810      	ldr	r0, [pc, #64]	; (8005364 <USBH_write+0x80>)
 8005322:	f000 fded 	bl	8005f00 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005326:	7f7b      	ldrb	r3, [r7, #29]
 8005328:	2b3a      	cmp	r3, #58	; 0x3a
 800532a:	d00d      	beq.n	8005348 <USBH_write+0x64>
 800532c:	2b3a      	cmp	r3, #58	; 0x3a
 800532e:	dc0f      	bgt.n	8005350 <USBH_write+0x6c>
 8005330:	2b28      	cmp	r3, #40	; 0x28
 8005332:	d009      	beq.n	8005348 <USBH_write+0x64>
 8005334:	2b28      	cmp	r3, #40	; 0x28
 8005336:	dc0b      	bgt.n	8005350 <USBH_write+0x6c>
 8005338:	2b04      	cmp	r3, #4
 800533a:	d005      	beq.n	8005348 <USBH_write+0x64>
 800533c:	2b27      	cmp	r3, #39	; 0x27
 800533e:	d107      	bne.n	8005350 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8005340:	2302      	movs	r3, #2
 8005342:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005346:	e007      	b.n	8005358 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005348:	2303      	movs	r3, #3
 800534a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800534e:	e003      	b.n	8005358 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005356:	bf00      	nop
    }
  }

  return res;
 8005358:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800535c:	4618      	mov	r0, r3
 800535e:	3748      	adds	r7, #72	; 0x48
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	20003688 	.word	0x20003688

08005368 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b090      	sub	sp, #64	; 0x40
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	603a      	str	r2, [r7, #0]
 8005372:	71fb      	strb	r3, [r7, #7]
 8005374:	460b      	mov	r3, r1
 8005376:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800537e:	79bb      	ldrb	r3, [r7, #6]
 8005380:	2b03      	cmp	r3, #3
 8005382:	d852      	bhi.n	800542a <USBH_ioctl+0xc2>
 8005384:	a201      	add	r2, pc, #4	; (adr r2, 800538c <USBH_ioctl+0x24>)
 8005386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538a:	bf00      	nop
 800538c:	0800539d 	.word	0x0800539d
 8005390:	080053a5 	.word	0x080053a5
 8005394:	080053cf 	.word	0x080053cf
 8005398:	080053fb 	.word	0x080053fb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80053a2:	e045      	b.n	8005430 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80053a4:	f107 0208 	add.w	r2, r7, #8
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	4619      	mov	r1, r3
 80053ac:	4823      	ldr	r0, [pc, #140]	; (800543c <USBH_ioctl+0xd4>)
 80053ae:	f000 fda7 	bl	8005f00 <USBH_MSC_GetLUNInfo>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d106      	bne.n	80053c6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80053c4:	e034      	b.n	8005430 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80053cc:	e030      	b.n	8005430 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80053ce:	f107 0208 	add.w	r2, r7, #8
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	4619      	mov	r1, r3
 80053d6:	4819      	ldr	r0, [pc, #100]	; (800543c <USBH_ioctl+0xd4>)
 80053d8:	f000 fd92 	bl	8005f00 <USBH_MSC_GetLUNInfo>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d107      	bne.n	80053f2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80053e2:	8a3b      	ldrh	r3, [r7, #16]
 80053e4:	461a      	mov	r2, r3
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80053f0:	e01e      	b.n	8005430 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80053f8:	e01a      	b.n	8005430 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80053fa:	f107 0208 	add.w	r2, r7, #8
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	4619      	mov	r1, r3
 8005402:	480e      	ldr	r0, [pc, #56]	; (800543c <USBH_ioctl+0xd4>)
 8005404:	f000 fd7c 	bl	8005f00 <USBH_MSC_GetLUNInfo>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800540e:	8a3b      	ldrh	r3, [r7, #16]
 8005410:	0a5b      	lsrs	r3, r3, #9
 8005412:	b29b      	uxth	r3, r3
 8005414:	461a      	mov	r2, r3
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005420:	e006      	b.n	8005430 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005428:	e002      	b.n	8005430 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800542a:	2304      	movs	r3, #4
 800542c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8005430:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005434:	4618      	mov	r0, r3
 8005436:	3740      	adds	r7, #64	; 0x40
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	20003688 	.word	0x20003688

08005440 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005440:	b590      	push	{r4, r7, lr}
 8005442:	b089      	sub	sp, #36	; 0x24
 8005444:	af04      	add	r7, sp, #16
 8005446:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800544e:	7919      	ldrb	r1, [r3, #4]
 8005450:	2350      	movs	r3, #80	; 0x50
 8005452:	2206      	movs	r2, #6
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f001 fc6b 	bl	8006d30 <USBH_FindInterface>
 800545a:	4603      	mov	r3, r0
 800545c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800545e:	7bfb      	ldrb	r3, [r7, #15]
 8005460:	2bff      	cmp	r3, #255	; 0xff
 8005462:	d002      	beq.n	800546a <USBH_MSC_InterfaceInit+0x2a>
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d901      	bls.n	800546e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800546a:	2302      	movs	r3, #2
 800546c:	e106      	b.n	800567c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800546e:	7bfb      	ldrb	r3, [r7, #15]
 8005470:	4619      	mov	r1, r3
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f001 fc40 	bl	8006cf8 <USBH_SelectInterface>
 8005478:	4603      	mov	r3, r0
 800547a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800547c:	7bbb      	ldrb	r3, [r7, #14]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8005482:	2302      	movs	r3, #2
 8005484:	e0fa      	b.n	800567c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800548c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005490:	f008 f810 	bl	800d4b4 <malloc>
 8005494:	4603      	mov	r3, r0
 8005496:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80054a8:	2302      	movs	r3, #2
 80054aa:	e0e7      	b.n	800567c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80054ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054b0:	2100      	movs	r1, #0
 80054b2:	68b8      	ldr	r0, [r7, #8]
 80054b4:	f008 f81c 	bl	800d4f0 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	211a      	movs	r1, #26
 80054be:	fb01 f303 	mul.w	r3, r1, r3
 80054c2:	4413      	add	r3, r2
 80054c4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	b25b      	sxtb	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	da16      	bge.n	80054fe <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	211a      	movs	r1, #26
 80054d6:	fb01 f303 	mul.w	r3, r1, r3
 80054da:	4413      	add	r3, r2
 80054dc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054e0:	781a      	ldrb	r2, [r3, #0]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	211a      	movs	r1, #26
 80054ec:	fb01 f303 	mul.w	r3, r1, r3
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80054f6:	881a      	ldrh	r2, [r3, #0]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	815a      	strh	r2, [r3, #10]
 80054fc:	e015      	b.n	800552a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	211a      	movs	r1, #26
 8005504:	fb01 f303 	mul.w	r3, r1, r3
 8005508:	4413      	add	r3, r2
 800550a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800550e:	781a      	ldrb	r2, [r3, #0]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	211a      	movs	r1, #26
 800551a:	fb01 f303 	mul.w	r3, r1, r3
 800551e:	4413      	add	r3, r2
 8005520:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005524:	881a      	ldrh	r2, [r3, #0]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	211a      	movs	r1, #26
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	4413      	add	r3, r2
 8005536:	f203 3356 	addw	r3, r3, #854	; 0x356
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	b25b      	sxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	da16      	bge.n	8005570 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	211a      	movs	r1, #26
 8005548:	fb01 f303 	mul.w	r3, r1, r3
 800554c:	4413      	add	r3, r2
 800554e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005552:	781a      	ldrb	r2, [r3, #0]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005558:	7bfb      	ldrb	r3, [r7, #15]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	211a      	movs	r1, #26
 800555e:	fb01 f303 	mul.w	r3, r1, r3
 8005562:	4413      	add	r3, r2
 8005564:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005568:	881a      	ldrh	r2, [r3, #0]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	815a      	strh	r2, [r3, #10]
 800556e:	e015      	b.n	800559c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	211a      	movs	r1, #26
 8005576:	fb01 f303 	mul.w	r3, r1, r3
 800557a:	4413      	add	r3, r2
 800557c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005580:	781a      	ldrb	r2, [r3, #0]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	211a      	movs	r1, #26
 800558c:	fb01 f303 	mul.w	r3, r1, r3
 8005590:	4413      	add	r3, r2
 8005592:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005596:	881a      	ldrh	r2, [r3, #0]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2200      	movs	r2, #0
 80055a0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2200      	movs	r2, #0
 80055a6:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2200      	movs	r2, #0
 80055ac:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	799b      	ldrb	r3, [r3, #6]
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f002 fed6 	bl	8008366 <USBH_AllocPipe>
 80055ba:	4603      	mov	r3, r0
 80055bc:	461a      	mov	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	79db      	ldrb	r3, [r3, #7]
 80055c6:	4619      	mov	r1, r3
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f002 fecc 	bl	8008366 <USBH_AllocPipe>
 80055ce:	4603      	mov	r3, r0
 80055d0:	461a      	mov	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fdc4 	bl	8006164 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	799b      	ldrb	r3, [r3, #6]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d01e      	beq.n	8005622 <USBH_MSC_InterfaceInit+0x1e2>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	891b      	ldrh	r3, [r3, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01a      	beq.n	8005622 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	7959      	ldrb	r1, [r3, #5]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	7998      	ldrb	r0, [r3, #6]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	8912      	ldrh	r2, [r2, #8]
 8005604:	9202      	str	r2, [sp, #8]
 8005606:	2202      	movs	r2, #2
 8005608:	9201      	str	r2, [sp, #4]
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	4623      	mov	r3, r4
 800560e:	4602      	mov	r2, r0
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f002 fe79 	bl	8008308 <USBH_OpenPipe>
 8005616:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	79db      	ldrb	r3, [r3, #7]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d02c      	beq.n	800567a <USBH_MSC_InterfaceInit+0x23a>
 8005620:	e001      	b.n	8005626 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8005622:	2303      	movs	r3, #3
 8005624:	e02a      	b.n	800567c <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	895b      	ldrh	r3, [r3, #10]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d025      	beq.n	800567a <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	7919      	ldrb	r1, [r3, #4]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	79d8      	ldrb	r0, [r3, #7]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	8952      	ldrh	r2, [r2, #10]
 8005646:	9202      	str	r2, [sp, #8]
 8005648:	2202      	movs	r2, #2
 800564a:	9201      	str	r2, [sp, #4]
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	4623      	mov	r3, r4
 8005650:	4602      	mov	r2, r0
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f002 fe58 	bl	8008308 <USBH_OpenPipe>
 8005658:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	791b      	ldrb	r3, [r3, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f007 fe65 	bl	800d332 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	795b      	ldrb	r3, [r3, #5]
 800566c:	2200      	movs	r2, #0
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f007 fe5e 	bl	800d332 <USBH_LL_SetToggle>

  return USBH_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	e000      	b.n	800567c <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800567a:	2303      	movs	r3, #3
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	bd90      	pop	{r4, r7, pc}

08005684 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	795b      	ldrb	r3, [r3, #5]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00e      	beq.n	80056bc <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	795b      	ldrb	r3, [r3, #5]
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f002 fe4e 	bl	8008346 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	795b      	ldrb	r3, [r3, #5]
 80056ae:	4619      	mov	r1, r3
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f002 fe79 	bl	80083a8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	791b      	ldrb	r3, [r3, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00e      	beq.n	80056e2 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	791b      	ldrb	r3, [r3, #4]
 80056c8:	4619      	mov	r1, r3
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f002 fe3b 	bl	8008346 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	791b      	ldrb	r3, [r3, #4]
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f002 fe66 	bl	80083a8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00b      	beq.n	8005706 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f007 fee4 	bl	800d4c4 <free>
    phost->pActiveClass->pData = 0U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005702:	2200      	movs	r2, #0
 8005704:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005722:	2301      	movs	r3, #1
 8005724:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	7b9b      	ldrb	r3, [r3, #14]
 800572a:	2b03      	cmp	r3, #3
 800572c:	d041      	beq.n	80057b2 <USBH_MSC_ClassRequest+0xa2>
 800572e:	2b03      	cmp	r3, #3
 8005730:	dc4b      	bgt.n	80057ca <USBH_MSC_ClassRequest+0xba>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <USBH_MSC_ClassRequest+0x2a>
 8005736:	2b02      	cmp	r3, #2
 8005738:	d147      	bne.n	80057ca <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4619      	mov	r1, r3
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fcf1 	bl	8006126 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8005744:	4603      	mov	r3, r0
 8005746:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	2b03      	cmp	r3, #3
 800574c:	d104      	bne.n	8005758 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2200      	movs	r2, #0
 8005752:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d137      	bne.n	80057ce <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b02      	cmp	r3, #2
 8005764:	d804      	bhi.n	8005770 <USBH_MSC_ClassRequest+0x60>
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	3301      	adds	r3, #1
 800576c:	b2da      	uxtb	r2, r3
 800576e:	e000      	b.n	8005772 <USBH_MSC_ClassRequest+0x62>
 8005770:	2202      	movs	r2, #2
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005776:	2300      	movs	r3, #0
 8005778:	73bb      	strb	r3, [r7, #14]
 800577a:	e014      	b.n	80057a6 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800577c:	7bbb      	ldrb	r3, [r7, #14]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	2134      	movs	r1, #52	; 0x34
 8005782:	fb01 f303 	mul.w	r3, r1, r3
 8005786:	4413      	add	r3, r2
 8005788:	3392      	adds	r3, #146	; 0x92
 800578a:	2202      	movs	r2, #2
 800578c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800578e:	7bbb      	ldrb	r3, [r7, #14]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	2134      	movs	r1, #52	; 0x34
 8005794:	fb01 f303 	mul.w	r3, r1, r3
 8005798:	4413      	add	r3, r2
 800579a:	33c1      	adds	r3, #193	; 0xc1
 800579c:	2200      	movs	r2, #0
 800579e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80057a0:	7bbb      	ldrb	r3, [r7, #14]
 80057a2:	3301      	adds	r3, #1
 80057a4:	73bb      	strb	r3, [r7, #14]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	7bba      	ldrb	r2, [r7, #14]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d3e5      	bcc.n	800577c <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 80057b0:	e00d      	b.n	80057ce <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80057b2:	2100      	movs	r1, #0
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f002 f888 	bl	80078ca <USBH_ClrFeature>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d108      	bne.n	80057d2 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	7bda      	ldrb	r2, [r3, #15]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	739a      	strb	r2, [r3, #14]
      }
      break;
 80057c8:	e003      	b.n	80057d2 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 80057ca:	bf00      	nop
 80057cc:	e002      	b.n	80057d4 <USBH_MSC_ClassRequest+0xc4>
      break;
 80057ce:	bf00      	nop
 80057d0:	e000      	b.n	80057d4 <USBH_MSC_ClassRequest+0xc4>
      break;
 80057d2:	bf00      	nop
  }

  return status;
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80057f2:	2301      	movs	r3, #1
 80057f4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80057f6:	2301      	movs	r3, #1
 80057f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80057fa:	2301      	movs	r3, #1
 80057fc:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	7b1b      	ldrb	r3, [r3, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <USBH_MSC_Process+0x2e>
 8005806:	2b01      	cmp	r3, #1
 8005808:	f000 8271 	beq.w	8005cee <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800580c:	e272      	b.n	8005cf4 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	429a      	cmp	r2, r3
 800581c:	f080 824f 	bcs.w	8005cbe <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005826:	4619      	mov	r1, r3
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	2334      	movs	r3, #52	; 0x34
 800582c:	fb01 f303 	mul.w	r3, r1, r3
 8005830:	4413      	add	r3, r2
 8005832:	3391      	adds	r3, #145	; 0x91
 8005834:	2201      	movs	r2, #1
 8005836:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800583e:	4619      	mov	r1, r3
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	2334      	movs	r3, #52	; 0x34
 8005844:	fb01 f303 	mul.w	r3, r1, r3
 8005848:	4413      	add	r3, r2
 800584a:	3390      	adds	r3, #144	; 0x90
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b08      	cmp	r3, #8
 8005850:	f200 8243 	bhi.w	8005cda <USBH_MSC_Process+0x4fa>
 8005854:	a201      	add	r2, pc, #4	; (adr r2, 800585c <USBH_MSC_Process+0x7c>)
 8005856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585a:	bf00      	nop
 800585c:	08005881 	.word	0x08005881
 8005860:	08005cdb 	.word	0x08005cdb
 8005864:	08005949 	.word	0x08005949
 8005868:	08005acd 	.word	0x08005acd
 800586c:	080058a7 	.word	0x080058a7
 8005870:	08005b99 	.word	0x08005b99
 8005874:	08005cdb 	.word	0x08005cdb
 8005878:	08005cdb 	.word	0x08005cdb
 800587c:	08005cad 	.word	0x08005cad
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005886:	4619      	mov	r1, r3
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	2334      	movs	r3, #52	; 0x34
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	4413      	add	r3, r2
 8005892:	3390      	adds	r3, #144	; 0x90
 8005894:	2204      	movs	r2, #4
 8005896:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80058a4:	e222      	b.n	8005cec <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80058ac:	b2d9      	uxtb	r1, r3
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80058b4:	461a      	mov	r2, r3
 80058b6:	2334      	movs	r3, #52	; 0x34
 80058b8:	fb02 f303 	mul.w	r3, r2, r3
 80058bc:	3398      	adds	r3, #152	; 0x98
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4413      	add	r3, r2
 80058c2:	3307      	adds	r3, #7
 80058c4:	461a      	mov	r2, r3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 ff6a 	bl	80067a0 <USBH_MSC_SCSI_Inquiry>
 80058cc:	4603      	mov	r3, r0
 80058ce:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10b      	bne.n	80058ee <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80058dc:	4619      	mov	r1, r3
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	2334      	movs	r3, #52	; 0x34
 80058e2:	fb01 f303 	mul.w	r3, r1, r3
 80058e6:	4413      	add	r3, r2
 80058e8:	3390      	adds	r3, #144	; 0x90
 80058ea:	2202      	movs	r2, #2
 80058ec:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d10c      	bne.n	800590e <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80058fa:	4619      	mov	r1, r3
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	2334      	movs	r3, #52	; 0x34
 8005900:	fb01 f303 	mul.w	r3, r1, r3
 8005904:	4413      	add	r3, r2
 8005906:	3390      	adds	r3, #144	; 0x90
 8005908:	2205      	movs	r2, #5
 800590a:	701a      	strb	r2, [r3, #0]
            break;
 800590c:	e1e7      	b.n	8005cde <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	2b04      	cmp	r3, #4
 8005912:	f040 81e4 	bne.w	8005cde <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800591c:	4619      	mov	r1, r3
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	2334      	movs	r3, #52	; 0x34
 8005922:	fb01 f303 	mul.w	r3, r1, r3
 8005926:	4413      	add	r3, r2
 8005928:	3390      	adds	r3, #144	; 0x90
 800592a:	2201      	movs	r2, #1
 800592c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005934:	4619      	mov	r1, r3
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	2334      	movs	r3, #52	; 0x34
 800593a:	fb01 f303 	mul.w	r3, r1, r3
 800593e:	4413      	add	r3, r2
 8005940:	3391      	adds	r3, #145	; 0x91
 8005942:	2202      	movs	r2, #2
 8005944:	701a      	strb	r2, [r3, #0]
            break;
 8005946:	e1ca      	b.n	8005cde <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800594e:	b2db      	uxtb	r3, r3
 8005950:	4619      	mov	r1, r3
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fe66 	bl	8006624 <USBH_MSC_SCSI_TestUnitReady>
 8005958:	4603      	mov	r3, r0
 800595a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800595c:	7bbb      	ldrb	r3, [r7, #14]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d149      	bne.n	80059f6 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005968:	4619      	mov	r1, r3
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	2334      	movs	r3, #52	; 0x34
 800596e:	fb01 f303 	mul.w	r3, r1, r3
 8005972:	4413      	add	r3, r2
 8005974:	3392      	adds	r3, #146	; 0x92
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00c      	beq.n	8005996 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005982:	4619      	mov	r1, r3
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	2334      	movs	r3, #52	; 0x34
 8005988:	fb01 f303 	mul.w	r3, r1, r3
 800598c:	4413      	add	r3, r2
 800598e:	33c1      	adds	r3, #193	; 0xc1
 8005990:	2201      	movs	r2, #1
 8005992:	701a      	strb	r2, [r3, #0]
 8005994:	e00b      	b.n	80059ae <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800599c:	4619      	mov	r1, r3
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	2334      	movs	r3, #52	; 0x34
 80059a2:	fb01 f303 	mul.w	r3, r1, r3
 80059a6:	4413      	add	r3, r2
 80059a8:	33c1      	adds	r3, #193	; 0xc1
 80059aa:	2200      	movs	r2, #0
 80059ac:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80059b4:	4619      	mov	r1, r3
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	2334      	movs	r3, #52	; 0x34
 80059ba:	fb01 f303 	mul.w	r3, r1, r3
 80059be:	4413      	add	r3, r2
 80059c0:	3390      	adds	r3, #144	; 0x90
 80059c2:	2203      	movs	r2, #3
 80059c4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80059cc:	4619      	mov	r1, r3
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	2334      	movs	r3, #52	; 0x34
 80059d2:	fb01 f303 	mul.w	r3, r1, r3
 80059d6:	4413      	add	r3, r2
 80059d8:	3391      	adds	r3, #145	; 0x91
 80059da:	2200      	movs	r2, #0
 80059dc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80059e4:	4619      	mov	r1, r3
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	2334      	movs	r3, #52	; 0x34
 80059ea:	fb01 f303 	mul.w	r3, r1, r3
 80059ee:	4413      	add	r3, r2
 80059f0:	3392      	adds	r3, #146	; 0x92
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80059f6:	7bbb      	ldrb	r3, [r7, #14]
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d14a      	bne.n	8005a92 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a02:	4619      	mov	r1, r3
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	2334      	movs	r3, #52	; 0x34
 8005a08:	fb01 f303 	mul.w	r3, r1, r3
 8005a0c:	4413      	add	r3, r2
 8005a0e:	3392      	adds	r3, #146	; 0x92
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d00c      	beq.n	8005a30 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	2334      	movs	r3, #52	; 0x34
 8005a22:	fb01 f303 	mul.w	r3, r1, r3
 8005a26:	4413      	add	r3, r2
 8005a28:	33c1      	adds	r3, #193	; 0xc1
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	e00b      	b.n	8005a48 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a36:	4619      	mov	r1, r3
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	2334      	movs	r3, #52	; 0x34
 8005a3c:	fb01 f303 	mul.w	r3, r1, r3
 8005a40:	4413      	add	r3, r2
 8005a42:	33c1      	adds	r3, #193	; 0xc1
 8005a44:	2200      	movs	r2, #0
 8005a46:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a4e:	4619      	mov	r1, r3
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	2334      	movs	r3, #52	; 0x34
 8005a54:	fb01 f303 	mul.w	r3, r1, r3
 8005a58:	4413      	add	r3, r2
 8005a5a:	3390      	adds	r3, #144	; 0x90
 8005a5c:	2205      	movs	r2, #5
 8005a5e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a66:	4619      	mov	r1, r3
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	2334      	movs	r3, #52	; 0x34
 8005a6c:	fb01 f303 	mul.w	r3, r1, r3
 8005a70:	4413      	add	r3, r2
 8005a72:	3391      	adds	r3, #145	; 0x91
 8005a74:	2201      	movs	r2, #1
 8005a76:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a7e:	4619      	mov	r1, r3
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	2334      	movs	r3, #52	; 0x34
 8005a84:	fb01 f303 	mul.w	r3, r1, r3
 8005a88:	4413      	add	r3, r2
 8005a8a:	3392      	adds	r3, #146	; 0x92
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	701a      	strb	r2, [r3, #0]
            break;
 8005a90:	e127      	b.n	8005ce2 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8005a92:	7bbb      	ldrb	r3, [r7, #14]
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	f040 8124 	bne.w	8005ce2 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	2334      	movs	r3, #52	; 0x34
 8005aa6:	fb01 f303 	mul.w	r3, r1, r3
 8005aaa:	4413      	add	r3, r2
 8005aac:	3390      	adds	r3, #144	; 0x90
 8005aae:	2201      	movs	r2, #1
 8005ab0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ab8:	4619      	mov	r1, r3
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	2334      	movs	r3, #52	; 0x34
 8005abe:	fb01 f303 	mul.w	r3, r1, r3
 8005ac2:	4413      	add	r3, r2
 8005ac4:	3391      	adds	r3, #145	; 0x91
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	701a      	strb	r2, [r3, #0]
            break;
 8005aca:	e10a      	b.n	8005ce2 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ad2:	b2d9      	uxtb	r1, r3
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ada:	461a      	mov	r2, r3
 8005adc:	2334      	movs	r3, #52	; 0x34
 8005ade:	fb02 f303 	mul.w	r3, r2, r3
 8005ae2:	3390      	adds	r3, #144	; 0x90
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	3304      	adds	r3, #4
 8005aea:	461a      	mov	r2, r3
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fddc 	bl	80066aa <USBH_MSC_SCSI_ReadCapacity>
 8005af2:	4603      	mov	r3, r0
 8005af4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d120      	bne.n	8005b3e <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b02:	4619      	mov	r1, r3
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	2334      	movs	r3, #52	; 0x34
 8005b08:	fb01 f303 	mul.w	r3, r1, r3
 8005b0c:	4413      	add	r3, r2
 8005b0e:	3390      	adds	r3, #144	; 0x90
 8005b10:	2201      	movs	r2, #1
 8005b12:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	2334      	movs	r3, #52	; 0x34
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	4413      	add	r3, r2
 8005b26:	3391      	adds	r3, #145	; 0x91
 8005b28:	2200      	movs	r2, #0
 8005b2a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b32:	3301      	adds	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8005b3c:	e0d3      	b.n	8005ce6 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d10c      	bne.n	8005b5e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	2334      	movs	r3, #52	; 0x34
 8005b50:	fb01 f303 	mul.w	r3, r1, r3
 8005b54:	4413      	add	r3, r2
 8005b56:	3390      	adds	r3, #144	; 0x90
 8005b58:	2205      	movs	r2, #5
 8005b5a:	701a      	strb	r2, [r3, #0]
            break;
 8005b5c:	e0c3      	b.n	8005ce6 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	f040 80c0 	bne.w	8005ce6 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	2334      	movs	r3, #52	; 0x34
 8005b72:	fb01 f303 	mul.w	r3, r1, r3
 8005b76:	4413      	add	r3, r2
 8005b78:	3390      	adds	r3, #144	; 0x90
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b84:	4619      	mov	r1, r3
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	2334      	movs	r3, #52	; 0x34
 8005b8a:	fb01 f303 	mul.w	r3, r1, r3
 8005b8e:	4413      	add	r3, r2
 8005b90:	3391      	adds	r3, #145	; 0x91
 8005b92:	2202      	movs	r2, #2
 8005b94:	701a      	strb	r2, [r3, #0]
            break;
 8005b96:	e0a6      	b.n	8005ce6 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b9e:	b2d9      	uxtb	r1, r3
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	2334      	movs	r3, #52	; 0x34
 8005baa:	fb02 f303 	mul.w	r3, r2, r3
 8005bae:	3398      	adds	r3, #152	; 0x98
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fe96 	bl	80068ea <USBH_MSC_SCSI_RequestSense>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d145      	bne.n	8005c54 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005bce:	4619      	mov	r1, r3
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	2334      	movs	r3, #52	; 0x34
 8005bd4:	fb01 f303 	mul.w	r3, r1, r3
 8005bd8:	4413      	add	r3, r2
 8005bda:	339c      	adds	r3, #156	; 0x9c
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b06      	cmp	r3, #6
 8005be0:	d00c      	beq.n	8005bfc <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005be8:	4619      	mov	r1, r3
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	2334      	movs	r3, #52	; 0x34
 8005bee:	fb01 f303 	mul.w	r3, r1, r3
 8005bf2:	4413      	add	r3, r2
 8005bf4:	339c      	adds	r3, #156	; 0x9c
 8005bf6:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d117      	bne.n	8005c2c <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	f242 720f 	movw	r2, #9999	; 0x270f
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d80c      	bhi.n	8005c2c <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c18:	4619      	mov	r1, r3
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	2334      	movs	r3, #52	; 0x34
 8005c1e:	fb01 f303 	mul.w	r3, r1, r3
 8005c22:	4413      	add	r3, r2
 8005c24:	3390      	adds	r3, #144	; 0x90
 8005c26:	2202      	movs	r2, #2
 8005c28:	701a      	strb	r2, [r3, #0]
                  break;
 8005c2a:	e05f      	b.n	8005cec <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c32:	4619      	mov	r1, r3
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	2334      	movs	r3, #52	; 0x34
 8005c38:	fb01 f303 	mul.w	r3, r1, r3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	3390      	adds	r3, #144	; 0x90
 8005c40:	2201      	movs	r2, #1
 8005c42:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d10c      	bne.n	8005c74 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c60:	4619      	mov	r1, r3
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	2334      	movs	r3, #52	; 0x34
 8005c66:	fb01 f303 	mul.w	r3, r1, r3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	3390      	adds	r3, #144	; 0x90
 8005c6e:	2208      	movs	r2, #8
 8005c70:	701a      	strb	r2, [r3, #0]
            break;
 8005c72:	e03a      	b.n	8005cea <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d137      	bne.n	8005cea <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c80:	4619      	mov	r1, r3
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	2334      	movs	r3, #52	; 0x34
 8005c86:	fb01 f303 	mul.w	r3, r1, r3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	3390      	adds	r3, #144	; 0x90
 8005c8e:	2201      	movs	r2, #1
 8005c90:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c98:	4619      	mov	r1, r3
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	2334      	movs	r3, #52	; 0x34
 8005c9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	3391      	adds	r3, #145	; 0x91
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	701a      	strb	r2, [r3, #0]
            break;
 8005caa:	e01e      	b.n	8005cea <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8005cbc:	e016      	b.n	8005cec <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005cd2:	2102      	movs	r1, #2
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	4798      	blx	r3
      break;
 8005cd8:	e00c      	b.n	8005cf4 <USBH_MSC_Process+0x514>
            break;
 8005cda:	bf00      	nop
 8005cdc:	e00a      	b.n	8005cf4 <USBH_MSC_Process+0x514>
            break;
 8005cde:	bf00      	nop
 8005ce0:	e008      	b.n	8005cf4 <USBH_MSC_Process+0x514>
            break;
 8005ce2:	bf00      	nop
 8005ce4:	e006      	b.n	8005cf4 <USBH_MSC_Process+0x514>
            break;
 8005ce6:	bf00      	nop
 8005ce8:	e004      	b.n	8005cf4 <USBH_MSC_Process+0x514>
            break;
 8005cea:	bf00      	nop
      break;
 8005cec:	e002      	b.n	8005cf4 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf2:	bf00      	nop
  }
  return error;
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop

08005d00 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b088      	sub	sp, #32
 8005d1a:	af02      	add	r7, sp, #8
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8005d30:	2301      	movs	r3, #1
 8005d32:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8005d34:	78fb      	ldrb	r3, [r7, #3]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	2134      	movs	r1, #52	; 0x34
 8005d3a:	fb01 f303 	mul.w	r3, r1, r3
 8005d3e:	4413      	add	r3, r2
 8005d40:	3390      	adds	r3, #144	; 0x90
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b07      	cmp	r3, #7
 8005d46:	d03c      	beq.n	8005dc2 <USBH_MSC_RdWrProcess+0xac>
 8005d48:	2b07      	cmp	r3, #7
 8005d4a:	f300 80a7 	bgt.w	8005e9c <USBH_MSC_RdWrProcess+0x186>
 8005d4e:	2b05      	cmp	r3, #5
 8005d50:	d06c      	beq.n	8005e2c <USBH_MSC_RdWrProcess+0x116>
 8005d52:	2b06      	cmp	r3, #6
 8005d54:	f040 80a2 	bne.w	8005e9c <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8005d58:	78f9      	ldrb	r1, [r7, #3]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2200      	movs	r2, #0
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fea5 	bl	8006ab2 <USBH_MSC_SCSI_Read>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10b      	bne.n	8005d8a <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	2134      	movs	r1, #52	; 0x34
 8005d78:	fb01 f303 	mul.w	r3, r1, r3
 8005d7c:	4413      	add	r3, r2
 8005d7e:	3390      	adds	r3, #144	; 0x90
 8005d80:	2201      	movs	r2, #1
 8005d82:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005d88:	e08a      	b.n	8005ea0 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d109      	bne.n	8005da4 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	2134      	movs	r1, #52	; 0x34
 8005d96:	fb01 f303 	mul.w	r3, r1, r3
 8005d9a:	4413      	add	r3, r2
 8005d9c:	3390      	adds	r3, #144	; 0x90
 8005d9e:	2205      	movs	r2, #5
 8005da0:	701a      	strb	r2, [r3, #0]
      break;
 8005da2:	e07d      	b.n	8005ea0 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d17a      	bne.n	8005ea0 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005daa:	78fb      	ldrb	r3, [r7, #3]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	2134      	movs	r1, #52	; 0x34
 8005db0:	fb01 f303 	mul.w	r3, r1, r3
 8005db4:	4413      	add	r3, r2
 8005db6:	3390      	adds	r3, #144	; 0x90
 8005db8:	2208      	movs	r2, #8
 8005dba:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005dc0:	e06e      	b.n	8005ea0 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8005dc2:	78f9      	ldrb	r1, [r7, #3]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	2200      	movs	r2, #0
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fe05 	bl	80069dc <USBH_MSC_SCSI_Write>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10b      	bne.n	8005df4 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	2134      	movs	r1, #52	; 0x34
 8005de2:	fb01 f303 	mul.w	r3, r1, r3
 8005de6:	4413      	add	r3, r2
 8005de8:	3390      	adds	r3, #144	; 0x90
 8005dea:	2201      	movs	r2, #1
 8005dec:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005df2:	e057      	b.n	8005ea4 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d109      	bne.n	8005e0e <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8005dfa:	78fb      	ldrb	r3, [r7, #3]
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	2134      	movs	r1, #52	; 0x34
 8005e00:	fb01 f303 	mul.w	r3, r1, r3
 8005e04:	4413      	add	r3, r2
 8005e06:	3390      	adds	r3, #144	; 0x90
 8005e08:	2205      	movs	r2, #5
 8005e0a:	701a      	strb	r2, [r3, #0]
      break;
 8005e0c:	e04a      	b.n	8005ea4 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d147      	bne.n	8005ea4 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	2134      	movs	r1, #52	; 0x34
 8005e1a:	fb01 f303 	mul.w	r3, r1, r3
 8005e1e:	4413      	add	r3, r2
 8005e20:	3390      	adds	r3, #144	; 0x90
 8005e22:	2208      	movs	r2, #8
 8005e24:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8005e26:	2302      	movs	r3, #2
 8005e28:	75fb      	strb	r3, [r7, #23]
      break;
 8005e2a:	e03b      	b.n	8005ea4 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	2234      	movs	r2, #52	; 0x34
 8005e30:	fb02 f303 	mul.w	r3, r2, r3
 8005e34:	3398      	adds	r3, #152	; 0x98
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4413      	add	r3, r2
 8005e3a:	1d1a      	adds	r2, r3, #4
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fd52 	bl	80068ea <USBH_MSC_SCSI_RequestSense>
 8005e46:	4603      	mov	r3, r0
 8005e48:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d113      	bne.n	8005e78 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005e50:	78fb      	ldrb	r3, [r7, #3]
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	2134      	movs	r1, #52	; 0x34
 8005e56:	fb01 f303 	mul.w	r3, r1, r3
 8005e5a:	4413      	add	r3, r2
 8005e5c:	3390      	adds	r3, #144	; 0x90
 8005e5e:	2201      	movs	r2, #1
 8005e60:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8005e62:	78fb      	ldrb	r3, [r7, #3]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	2134      	movs	r1, #52	; 0x34
 8005e68:	fb01 f303 	mul.w	r3, r1, r3
 8005e6c:	4413      	add	r3, r2
 8005e6e:	3391      	adds	r3, #145	; 0x91
 8005e70:	2202      	movs	r2, #2
 8005e72:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8005e74:	2302      	movs	r3, #2
 8005e76:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d014      	beq.n	8005ea8 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d111      	bne.n	8005ea8 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	2134      	movs	r1, #52	; 0x34
 8005e8a:	fb01 f303 	mul.w	r3, r1, r3
 8005e8e:	4413      	add	r3, r2
 8005e90:	3390      	adds	r3, #144	; 0x90
 8005e92:	2208      	movs	r2, #8
 8005e94:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8005e96:	2302      	movs	r3, #2
 8005e98:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005e9a:	e005      	b.n	8005ea8 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8005e9c:	bf00      	nop
 8005e9e:	e004      	b.n	8005eaa <USBH_MSC_RdWrProcess+0x194>
      break;
 8005ea0:	bf00      	nop
 8005ea2:	e002      	b.n	8005eaa <USBH_MSC_RdWrProcess+0x194>
      break;
 8005ea4:	bf00      	nop
 8005ea6:	e000      	b.n	8005eaa <USBH_MSC_RdWrProcess+0x194>
      break;
 8005ea8:	bf00      	nop

  }
  return error;
 8005eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b0b      	cmp	r3, #11
 8005ed2:	d10c      	bne.n	8005eee <USBH_MSC_UnitIsReady+0x3a>
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	2134      	movs	r1, #52	; 0x34
 8005eda:	fb01 f303 	mul.w	r3, r1, r3
 8005ede:	4413      	add	r3, r2
 8005ee0:	3391      	adds	r3, #145	; 0x91
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d102      	bne.n	8005eee <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
 8005eec:	e001      	b.n	8005ef2 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b0b      	cmp	r3, #11
 8005f20:	d10d      	bne.n	8005f3e <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8005f22:	7afb      	ldrb	r3, [r7, #11]
 8005f24:	2234      	movs	r2, #52	; 0x34
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	3390      	adds	r3, #144	; 0x90
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	4413      	add	r3, r2
 8005f30:	2234      	movs	r2, #52	; 0x34
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f007 facd 	bl	800d4d4 <memcpy>
    return USBH_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e000      	b.n	8005f40 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8005f3e:	2302      	movs	r3, #2
  }
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	607a      	str	r2, [r7, #4]
 8005f52:	603b      	str	r3, [r7, #0]
 8005f54:	460b      	mov	r3, r1
 8005f56:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00e      	beq.n	8005f8c <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8005f74:	2b0b      	cmp	r3, #11
 8005f76:	d109      	bne.n	8005f8c <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8005f78:	7afb      	ldrb	r3, [r7, #11]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	2134      	movs	r1, #52	; 0x34
 8005f7e:	fb01 f303 	mul.w	r3, r1, r3
 8005f82:	4413      	add	r3, r2
 8005f84:	3390      	adds	r3, #144	; 0x90
 8005f86:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d001      	beq.n	8005f90 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e040      	b.n	8006012 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2206      	movs	r2, #6
 8005f94:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8005f96:	7afb      	ldrb	r3, [r7, #11]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	2134      	movs	r1, #52	; 0x34
 8005f9c:	fb01 f303 	mul.w	r3, r1, r3
 8005fa0:	4413      	add	r3, r2
 8005fa2:	3390      	adds	r3, #144	; 0x90
 8005fa4:	2206      	movs	r2, #6
 8005fa6:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8005fa8:	7afb      	ldrb	r3, [r7, #11]
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8005fb2:	7af9      	ldrb	r1, [r7, #11]
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 fd78 	bl	8006ab2 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005fc8:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8005fca:	e016      	b.n	8005ffa <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad2      	subs	r2, r2, r3
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	f242 7110 	movw	r1, #10000	; 0x2710
 8005fdc:	fb01 f303 	mul.w	r3, r1, r3
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d805      	bhi.n	8005ff0 <USBH_MSC_Read+0xa8>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d104      	bne.n	8005ffa <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e00b      	b.n	8006012 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8005ffa:	7afb      	ldrb	r3, [r7, #11]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f7ff fe89 	bl	8005d16 <USBH_MSC_RdWrProcess>
 8006004:	4603      	mov	r3, r0
 8006006:	2b01      	cmp	r3, #1
 8006008:	d0e0      	beq.n	8005fcc <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2201      	movs	r2, #1
 800600e:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b088      	sub	sp, #32
 800601e:	af02      	add	r7, sp, #8
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]
 8006026:	460b      	mov	r3, r1
 8006028:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00e      	beq.n	800605e <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006046:	2b0b      	cmp	r3, #11
 8006048:	d109      	bne.n	800605e <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800604a:	7afb      	ldrb	r3, [r7, #11]
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	2134      	movs	r1, #52	; 0x34
 8006050:	fb01 f303 	mul.w	r3, r1, r3
 8006054:	4413      	add	r3, r2
 8006056:	3390      	adds	r3, #144	; 0x90
 8006058:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800605a:	2b01      	cmp	r3, #1
 800605c:	d001      	beq.n	8006062 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800605e:	2302      	movs	r3, #2
 8006060:	e040      	b.n	80060e4 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2207      	movs	r2, #7
 8006066:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8006068:	7afb      	ldrb	r3, [r7, #11]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	2134      	movs	r1, #52	; 0x34
 800606e:	fb01 f303 	mul.w	r3, r1, r3
 8006072:	4413      	add	r3, r2
 8006074:	3390      	adds	r3, #144	; 0x90
 8006076:	2207      	movs	r2, #7
 8006078:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800607a:	7afb      	ldrb	r3, [r7, #11]
 800607c:	b29a      	uxth	r2, r3
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006084:	7af9      	ldrb	r1, [r7, #11]
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 fca4 	bl	80069dc <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800609a:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800609c:	e016      	b.n	80060cc <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad2      	subs	r2, r2, r3
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	f242 7110 	movw	r1, #10000	; 0x2710
 80060ae:	fb01 f303 	mul.w	r3, r1, r3
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d805      	bhi.n	80060c2 <USBH_MSC_Write+0xa8>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d104      	bne.n	80060cc <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2201      	movs	r2, #1
 80060c6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80060c8:	2302      	movs	r3, #2
 80060ca:	e00b      	b.n	80060e4 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80060cc:	7afb      	ldrb	r3, [r7, #11]
 80060ce:	4619      	mov	r1, r3
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f7ff fe20 	bl	8005d16 <USBH_MSC_RdWrProcess>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d0e0      	beq.n	800609e <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2201      	movs	r2, #1
 80060e0:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2221      	movs	r2, #33	; 0x21
 80060f8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	22ff      	movs	r2, #255	; 0xff
 80060fe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8006112:	2200      	movs	r2, #0
 8006114:	2100      	movs	r1, #0
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f001 fea4 	bl	8007e64 <USBH_CtlReq>
 800611c:	4603      	mov	r3, r0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b082      	sub	sp, #8
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	22a1      	movs	r2, #161	; 0xa1
 8006134:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	22fe      	movs	r2, #254	; 0xfe
 800613a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800614e:	2201      	movs	r2, #1
 8006150:	6839      	ldr	r1, [r7, #0]
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 fe86 	bl	8007e64 <USBH_CtlReq>
 8006158:	4603      	mov	r3, r0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
	...

08006164 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4a09      	ldr	r2, [pc, #36]	; (80061a0 <USBH_MSC_BOT_Init+0x3c>)
 800617a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4a09      	ldr	r2, [pc, #36]	; (80061a4 <USBH_MSC_BOT_Init+0x40>)
 8006180:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	43425355 	.word	0x43425355
 80061a4:	20304050 	.word	0x20304050

080061a8 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b088      	sub	sp, #32
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80061b4:	2301      	movs	r3, #1
 80061b6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80061b8:	2301      	movs	r3, #1
 80061ba:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80061bc:	2301      	movs	r3, #1
 80061be:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80061c0:	2300      	movs	r3, #0
 80061c2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061d8:	3b01      	subs	r3, #1
 80061da:	2b0a      	cmp	r3, #10
 80061dc:	f200 819e 	bhi.w	800651c <USBH_MSC_BOT_Process+0x374>
 80061e0:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <USBH_MSC_BOT_Process+0x40>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	08006215 	.word	0x08006215
 80061ec:	0800623d 	.word	0x0800623d
 80061f0:	080062a7 	.word	0x080062a7
 80061f4:	080062c5 	.word	0x080062c5
 80061f8:	08006349 	.word	0x08006349
 80061fc:	0800636b 	.word	0x0800636b
 8006200:	08006403 	.word	0x08006403
 8006204:	0800641f 	.word	0x0800641f
 8006208:	08006471 	.word	0x08006471
 800620c:	080064a1 	.word	0x080064a1
 8006210:	08006503 	.word	0x08006503
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	78fa      	ldrb	r2, [r7, #3]
 8006218:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	795b      	ldrb	r3, [r3, #5]
 800622e:	2201      	movs	r2, #1
 8006230:	9200      	str	r2, [sp, #0]
 8006232:	221f      	movs	r2, #31
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f002 f824 	bl	8008282 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800623a:	e17e      	b.n	800653a <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	795b      	ldrb	r3, [r3, #5]
 8006240:	4619      	mov	r1, r3
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f007 f854 	bl	800d2f0 <USBH_LL_GetURBState>
 8006248:	4603      	mov	r3, r0
 800624a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800624c:	7d3b      	ldrb	r3, [r7, #20]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d118      	bne.n	8006284 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00f      	beq.n	800627a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006260:	b25b      	sxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	da04      	bge.n	8006270 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2203      	movs	r2, #3
 800626a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800626e:	e157      	b.n	8006520 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	2205      	movs	r2, #5
 8006274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006278:	e152      	b.n	8006520 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	2207      	movs	r2, #7
 800627e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006282:	e14d      	b.n	8006520 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006284:	7d3b      	ldrb	r3, [r7, #20]
 8006286:	2b02      	cmp	r3, #2
 8006288:	d104      	bne.n	8006294 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006292:	e145      	b.n	8006520 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8006294:	7d3b      	ldrb	r3, [r7, #20]
 8006296:	2b05      	cmp	r3, #5
 8006298:	f040 8142 	bne.w	8006520 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	220a      	movs	r2, #10
 80062a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80062a4:	e13c      	b.n	8006520 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	895a      	ldrh	r2, [r3, #10]
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	791b      	ldrb	r3, [r3, #4]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f002 f809 	bl	80082cc <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	2204      	movs	r2, #4
 80062be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80062c2:	e13a      	b.n	800653a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	791b      	ldrb	r3, [r3, #4]
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f007 f810 	bl	800d2f0 <USBH_LL_GetURBState>
 80062d0:	4603      	mov	r3, r0
 80062d2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80062d4:	7d3b      	ldrb	r3, [r7, #20]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d12d      	bne.n	8006336 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	8952      	ldrh	r2, [r2, #10]
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d910      	bls.n	8006308 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	8952      	ldrh	r2, [r2, #10]
 80062f0:	441a      	add	r2, r3
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	8952      	ldrh	r2, [r2, #10]
 8006300:	1a9a      	subs	r2, r3, r2
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	65da      	str	r2, [r3, #92]	; 0x5c
 8006306:	e002      	b.n	800630e <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	2200      	movs	r2, #0
 800630c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00a      	beq.n	800632c <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	895a      	ldrh	r2, [r3, #10]
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	791b      	ldrb	r3, [r3, #4]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f001 ffd1 	bl	80082cc <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800632a:	e0fb      	b.n	8006524 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2207      	movs	r2, #7
 8006330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006334:	e0f6      	b.n	8006524 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8006336:	7d3b      	ldrb	r3, [r7, #20]
 8006338:	2b05      	cmp	r3, #5
 800633a:	f040 80f3 	bne.w	8006524 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2209      	movs	r2, #9
 8006342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006346:	e0ed      	b.n	8006524 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	891a      	ldrh	r2, [r3, #8]
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	795b      	ldrb	r3, [r3, #5]
 8006356:	2001      	movs	r0, #1
 8006358:	9000      	str	r0, [sp, #0]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 ff91 	bl	8008282 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	2206      	movs	r2, #6
 8006364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006368:	e0e7      	b.n	800653a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	795b      	ldrb	r3, [r3, #5]
 800636e:	4619      	mov	r1, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f006 ffbd 	bl	800d2f0 <USBH_LL_GetURBState>
 8006376:	4603      	mov	r3, r0
 8006378:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800637a:	7d3b      	ldrb	r3, [r7, #20]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d12f      	bne.n	80063e0 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	8912      	ldrh	r2, [r2, #8]
 8006388:	4293      	cmp	r3, r2
 800638a:	d910      	bls.n	80063ae <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	8912      	ldrh	r2, [r2, #8]
 8006396:	441a      	add	r2, r3
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	8912      	ldrh	r2, [r2, #8]
 80063a6:	1a9a      	subs	r2, r3, r2
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80063ac:	e002      	b.n	80063b4 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2200      	movs	r2, #0
 80063b2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00c      	beq.n	80063d6 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	891a      	ldrh	r2, [r3, #8]
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	795b      	ldrb	r3, [r3, #5]
 80063ca:	2001      	movs	r0, #1
 80063cc:	9000      	str	r0, [sp, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f001 ff57 	bl	8008282 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80063d4:	e0a8      	b.n	8006528 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	2207      	movs	r2, #7
 80063da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80063de:	e0a3      	b.n	8006528 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80063e0:	7d3b      	ldrb	r3, [r7, #20]
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d104      	bne.n	80063f0 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2205      	movs	r2, #5
 80063ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80063ee:	e09b      	b.n	8006528 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80063f0:	7d3b      	ldrb	r3, [r7, #20]
 80063f2:	2b05      	cmp	r3, #5
 80063f4:	f040 8098 	bne.w	8006528 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	220a      	movs	r2, #10
 80063fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006400:	e092      	b.n	8006528 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	791b      	ldrb	r3, [r3, #4]
 800640c:	220d      	movs	r2, #13
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f001 ff5c 	bl	80082cc <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	2208      	movs	r2, #8
 8006418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800641c:	e08d      	b.n	800653a <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	791b      	ldrb	r3, [r3, #4]
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f006 ff63 	bl	800d2f0 <USBH_LL_GetURBState>
 800642a:	4603      	mov	r3, r0
 800642c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800642e:	7d3b      	ldrb	r3, [r7, #20]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d115      	bne.n	8006460 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f8a9 	bl	800659c <USBH_MSC_DecodeCSW>
 800644a:	4603      	mov	r3, r0
 800644c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800644e:	7d7b      	ldrb	r3, [r7, #21]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d102      	bne.n	800645a <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8006458:	e068      	b.n	800652c <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800645a:	2302      	movs	r3, #2
 800645c:	75fb      	strb	r3, [r7, #23]
      break;
 800645e:	e065      	b.n	800652c <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8006460:	7d3b      	ldrb	r3, [r7, #20]
 8006462:	2b05      	cmp	r3, #5
 8006464:	d162      	bne.n	800652c <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	2209      	movs	r2, #9
 800646a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800646e:	e05d      	b.n	800652c <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	2200      	movs	r2, #0
 8006474:	4619      	mov	r1, r3
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f864 	bl	8006544 <USBH_MSC_BOT_Abort>
 800647c:	4603      	mov	r3, r0
 800647e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006480:	7dbb      	ldrb	r3, [r7, #22]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d104      	bne.n	8006490 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	2207      	movs	r2, #7
 800648a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800648e:	e04f      	b.n	8006530 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8006490:	7dbb      	ldrb	r3, [r7, #22]
 8006492:	2b04      	cmp	r3, #4
 8006494:	d14c      	bne.n	8006530 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	220b      	movs	r2, #11
 800649a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800649e:	e047      	b.n	8006530 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	2201      	movs	r2, #1
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f84c 	bl	8006544 <USBH_MSC_BOT_Abort>
 80064ac:	4603      	mov	r3, r0
 80064ae:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80064b0:	7dbb      	ldrb	r3, [r7, #22]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d11d      	bne.n	80064f2 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	795b      	ldrb	r3, [r3, #5]
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f006 ff68 	bl	800d392 <USBH_LL_GetToggle>
 80064c2:	4603      	mov	r3, r0
 80064c4:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	7959      	ldrb	r1, [r3, #5]
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	f1c3 0301 	rsb	r3, r3, #1
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	461a      	mov	r2, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f006 ff2c 	bl	800d332 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	791b      	ldrb	r3, [r3, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f006 ff25 	bl	800d332 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	2209      	movs	r2, #9
 80064ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80064f0:	e020      	b.n	8006534 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 80064f2:	7dbb      	ldrb	r3, [r7, #22]
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	d11d      	bne.n	8006534 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	220b      	movs	r2, #11
 80064fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006500:	e018      	b.n	8006534 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff fdf2 	bl	80060ec <USBH_MSC_BOT_REQ_Reset>
 8006508:	4603      	mov	r3, r0
 800650a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800650c:	7dfb      	ldrb	r3, [r7, #23]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d112      	bne.n	8006538 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800651a:	e00d      	b.n	8006538 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800651c:	bf00      	nop
 800651e:	e00c      	b.n	800653a <USBH_MSC_BOT_Process+0x392>
      break;
 8006520:	bf00      	nop
 8006522:	e00a      	b.n	800653a <USBH_MSC_BOT_Process+0x392>
      break;
 8006524:	bf00      	nop
 8006526:	e008      	b.n	800653a <USBH_MSC_BOT_Process+0x392>
      break;
 8006528:	bf00      	nop
 800652a:	e006      	b.n	800653a <USBH_MSC_BOT_Process+0x392>
      break;
 800652c:	bf00      	nop
 800652e:	e004      	b.n	800653a <USBH_MSC_BOT_Process+0x392>
      break;
 8006530:	bf00      	nop
 8006532:	e002      	b.n	800653a <USBH_MSC_BOT_Process+0x392>
      break;
 8006534:	bf00      	nop
 8006536:	e000      	b.n	800653a <USBH_MSC_BOT_Process+0x392>
      break;
 8006538:	bf00      	nop
  }
  return status;
 800653a:	7dfb      	ldrb	r3, [r7, #23]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
 8006550:	4613      	mov	r3, r2
 8006552:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8006554:	2302      	movs	r3, #2
 8006556:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8006562:	78bb      	ldrb	r3, [r7, #2]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <USBH_MSC_BOT_Abort+0x2a>
 8006568:	2b01      	cmp	r3, #1
 800656a:	d009      	beq.n	8006580 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800656c:	e011      	b.n	8006592 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	79db      	ldrb	r3, [r3, #7]
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 f9a8 	bl	80078ca <USBH_ClrFeature>
 800657a:	4603      	mov	r3, r0
 800657c:	73fb      	strb	r3, [r7, #15]
      break;
 800657e:	e008      	b.n	8006592 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	799b      	ldrb	r3, [r3, #6]
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f001 f99f 	bl	80078ca <USBH_ClrFeature>
 800658c:	4603      	mov	r3, r0
 800658e:	73fb      	strb	r3, [r7, #15]
      break;
 8006590:	bf00      	nop
  }
  return status;
 8006592:	7bfb      	ldrb	r3, [r7, #15]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80065ae:	2301      	movs	r3, #1
 80065b0:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	791b      	ldrb	r3, [r3, #4]
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f006 fe07 	bl	800d1cc <USBH_LL_GetLastXferSize>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b0d      	cmp	r3, #13
 80065c2:	d002      	beq.n	80065ca <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80065c4:	2302      	movs	r3, #2
 80065c6:	73fb      	strb	r3, [r7, #15]
 80065c8:	e024      	b.n	8006614 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065ce:	4a14      	ldr	r2, [pc, #80]	; (8006620 <USBH_MSC_DecodeCSW+0x84>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d11d      	bne.n	8006610 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065dc:	429a      	cmp	r2, r3
 80065de:	d119      	bne.n	8006614 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d102      	bne.n	80065f0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80065ea:	2300      	movs	r3, #0
 80065ec:	73fb      	strb	r3, [r7, #15]
 80065ee:	e011      	b.n	8006614 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d102      	bne.n	8006600 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80065fa:	2301      	movs	r3, #1
 80065fc:	73fb      	strb	r3, [r7, #15]
 80065fe:	e009      	b.n	8006614 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006606:	2b02      	cmp	r3, #2
 8006608:	d104      	bne.n	8006614 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800660a:	2302      	movs	r3, #2
 800660c:	73fb      	strb	r3, [r7, #15]
 800660e:	e001      	b.n	8006614 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8006610:	2302      	movs	r3, #2
 8006612:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8006614:	7bfb      	ldrb	r3, [r7, #15]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	53425355 	.word	0x53425355

08006624 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	460b      	mov	r3, r1
 800662e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006630:	2302      	movs	r3, #2
 8006632:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006644:	2b01      	cmp	r3, #1
 8006646:	d002      	beq.n	800664e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006648:	2b02      	cmp	r3, #2
 800664a:	d021      	beq.n	8006690 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800664c:	e028      	b.n	80066a0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2200      	movs	r2, #0
 8006652:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	220a      	movs	r2, #10
 8006660:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	3363      	adds	r3, #99	; 0x63
 8006668:	2210      	movs	r2, #16
 800666a:	2100      	movs	r1, #0
 800666c:	4618      	mov	r0, r3
 800666e:	f006 ff3f 	bl	800d4f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2202      	movs	r2, #2
 8006686:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800668a:	2301      	movs	r3, #1
 800668c:	73fb      	strb	r3, [r7, #15]
      break;
 800668e:	e007      	b.n	80066a0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7ff fd87 	bl	80061a8 <USBH_MSC_BOT_Process>
 800669a:	4603      	mov	r3, r0
 800669c:	73fb      	strb	r3, [r7, #15]
      break;
 800669e:	bf00      	nop
  }

  return error;
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b086      	sub	sp, #24
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	460b      	mov	r3, r1
 80066b4:	607a      	str	r2, [r7, #4]
 80066b6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80066b8:	2301      	movs	r3, #1
 80066ba:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d002      	beq.n	80066d6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d027      	beq.n	8006724 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80066d4:	e05f      	b.n	8006796 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	2208      	movs	r2, #8
 80066da:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	2280      	movs	r2, #128	; 0x80
 80066e0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	220a      	movs	r2, #10
 80066e8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	3363      	adds	r3, #99	; 0x63
 80066f0:	2210      	movs	r2, #16
 80066f2:	2100      	movs	r1, #0
 80066f4:	4618      	mov	r0, r3
 80066f6:	f006 fefb 	bl	800d4f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	2225      	movs	r2, #37	; 0x25
 80066fe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	2202      	movs	r2, #2
 800670e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f103 0210 	add.w	r2, r3, #16
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800671e:	2301      	movs	r3, #1
 8006720:	75fb      	strb	r3, [r7, #23]
      break;
 8006722:	e038      	b.n	8006796 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006724:	7afb      	ldrb	r3, [r7, #11]
 8006726:	4619      	mov	r1, r3
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f7ff fd3d 	bl	80061a8 <USBH_MSC_BOT_Process>
 800672e:	4603      	mov	r3, r0
 8006730:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006732:	7dfb      	ldrb	r3, [r7, #23]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d12d      	bne.n	8006794 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800673e:	3303      	adds	r3, #3
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800674a:	3302      	adds	r3, #2
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006758:	3301      	adds	r3, #1
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800675e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	061b      	lsls	r3, r3, #24
 800676a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006776:	3307      	adds	r3, #7
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	b29a      	uxth	r2, r3
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006782:	3306      	adds	r3, #6
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	b29b      	uxth	r3, r3
 8006788:	021b      	lsls	r3, r3, #8
 800678a:	b29b      	uxth	r3, r3
 800678c:	4313      	orrs	r3, r2
 800678e:	b29a      	uxth	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	809a      	strh	r2, [r3, #4]
      break;
 8006794:	bf00      	nop
  }

  return error;
 8006796:	7dfb      	ldrb	r3, [r7, #23]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	460b      	mov	r3, r1
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80067ae:	2302      	movs	r3, #2
 80067b0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d002      	beq.n	80067cc <USBH_MSC_SCSI_Inquiry+0x2c>
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d03d      	beq.n	8006846 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80067ca:	e089      	b.n	80068e0 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	2224      	movs	r2, #36	; 0x24
 80067d0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	2280      	movs	r2, #128	; 0x80
 80067d6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	220a      	movs	r2, #10
 80067de:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	3363      	adds	r3, #99	; 0x63
 80067e6:	220a      	movs	r2, #10
 80067e8:	2100      	movs	r1, #0
 80067ea:	4618      	mov	r0, r3
 80067ec:	f006 fe80 	bl	800d4f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	2212      	movs	r2, #18
 80067f4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80067f8:	7afb      	ldrb	r3, [r7, #11]
 80067fa:	015b      	lsls	r3, r3, #5
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	2224      	movs	r2, #36	; 0x24
 8006818:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f103 0210 	add.w	r2, r3, #16
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006840:	2301      	movs	r3, #1
 8006842:	75fb      	strb	r3, [r7, #23]
      break;
 8006844:	e04c      	b.n	80068e0 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006846:	7afb      	ldrb	r3, [r7, #11]
 8006848:	4619      	mov	r1, r3
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f7ff fcac 	bl	80061a8 <USBH_MSC_BOT_Process>
 8006850:	4603      	mov	r3, r0
 8006852:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006854:	7dfb      	ldrb	r3, [r7, #23]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d141      	bne.n	80068de <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800685a:	2222      	movs	r2, #34	; 0x22
 800685c:	2100      	movs	r1, #0
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f006 fe46 	bl	800d4f0 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	f003 031f 	and.w	r3, r3, #31
 8006870:	b2da      	uxtb	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	095b      	lsrs	r3, r3, #5
 8006880:	b2da      	uxtb	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800688c:	3301      	adds	r3, #1
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	b25b      	sxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	da03      	bge.n	800689e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	709a      	strb	r2, [r3, #2]
 800689c:	e002      	b.n	80068a4 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	1cd8      	adds	r0, r3, #3
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ae:	3308      	adds	r3, #8
 80068b0:	2208      	movs	r2, #8
 80068b2:	4619      	mov	r1, r3
 80068b4:	f006 fe0e 	bl	800d4d4 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f103 000c 	add.w	r0, r3, #12
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068c4:	3310      	adds	r3, #16
 80068c6:	2210      	movs	r2, #16
 80068c8:	4619      	mov	r1, r3
 80068ca:	f006 fe03 	bl	800d4d4 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	331d      	adds	r3, #29
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80068d8:	3220      	adds	r2, #32
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	601a      	str	r2, [r3, #0]
      break;
 80068de:	bf00      	nop
  }

  return error;
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b086      	sub	sp, #24
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	460b      	mov	r3, r1
 80068f4:	607a      	str	r2, [r7, #4]
 80068f6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80068f8:	2302      	movs	r3, #2
 80068fa:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800690c:	2b01      	cmp	r3, #1
 800690e:	d002      	beq.n	8006916 <USBH_MSC_SCSI_RequestSense+0x2c>
 8006910:	2b02      	cmp	r3, #2
 8006912:	d03d      	beq.n	8006990 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8006914:	e05d      	b.n	80069d2 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	220e      	movs	r2, #14
 800691a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2280      	movs	r2, #128	; 0x80
 8006920:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	220a      	movs	r2, #10
 8006928:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	3363      	adds	r3, #99	; 0x63
 8006930:	2210      	movs	r2, #16
 8006932:	2100      	movs	r1, #0
 8006934:	4618      	mov	r0, r3
 8006936:	f006 fddb 	bl	800d4f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	2203      	movs	r2, #3
 800693e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006942:	7afb      	ldrb	r3, [r7, #11]
 8006944:	015b      	lsls	r3, r3, #5
 8006946:	b2da      	uxtb	r2, r3
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	220e      	movs	r2, #14
 8006962:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	2202      	movs	r2, #2
 800697a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f103 0210 	add.w	r2, r3, #16
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800698a:	2301      	movs	r3, #1
 800698c:	75fb      	strb	r3, [r7, #23]
      break;
 800698e:	e020      	b.n	80069d2 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006990:	7afb      	ldrb	r3, [r7, #11]
 8006992:	4619      	mov	r1, r3
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f7ff fc07 	bl	80061a8 <USBH_MSC_BOT_Process>
 800699a:	4603      	mov	r3, r0
 800699c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800699e:	7dfb      	ldrb	r3, [r7, #23]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d115      	bne.n	80069d0 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069aa:	3302      	adds	r3, #2
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069be:	7b1a      	ldrb	r2, [r3, #12]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ca:	7b5a      	ldrb	r2, [r3, #13]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	709a      	strb	r2, [r3, #2]
      break;
 80069d0:	bf00      	nop
  }

  return error;
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	607a      	str	r2, [r7, #4]
 80069e6:	603b      	str	r3, [r7, #0]
 80069e8:	460b      	mov	r3, r1
 80069ea:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80069ec:	2302      	movs	r3, #2
 80069ee:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d002      	beq.n	8006a0a <USBH_MSC_SCSI_Write+0x2e>
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d047      	beq.n	8006a98 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006a08:	e04e      	b.n	8006aa8 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8006a10:	461a      	mov	r2, r3
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	fb03 f202 	mul.w	r2, r3, r2
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	220a      	movs	r2, #10
 8006a28:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	3363      	adds	r3, #99	; 0x63
 8006a30:	2210      	movs	r2, #16
 8006a32:	2100      	movs	r1, #0
 8006a34:	4618      	mov	r0, r3
 8006a36:	f006 fd5b 	bl	800d4f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	222a      	movs	r2, #42	; 0x2a
 8006a3e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8006a42:	79fa      	ldrb	r2, [r7, #7]
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006a4a:	79ba      	ldrb	r2, [r7, #6]
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8006a52:	797a      	ldrb	r2, [r7, #5]
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006a5a:	1d3b      	adds	r3, r7, #4
 8006a5c:	781a      	ldrb	r2, [r3, #0]
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006a64:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006a6e:	f107 0320 	add.w	r3, r7, #32
 8006a72:	781a      	ldrb	r2, [r3, #0]
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	2202      	movs	r2, #2
 8006a86:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006a92:	2301      	movs	r3, #1
 8006a94:	75fb      	strb	r3, [r7, #23]
      break;
 8006a96:	e007      	b.n	8006aa8 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006a98:	7afb      	ldrb	r3, [r7, #11]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f7ff fb83 	bl	80061a8 <USBH_MSC_BOT_Process>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8006aa6:	bf00      	nop
  }

  return error;
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b086      	sub	sp, #24
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	60f8      	str	r0, [r7, #12]
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	603b      	str	r3, [r7, #0]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d002      	beq.n	8006ae0 <USBH_MSC_SCSI_Read+0x2e>
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d047      	beq.n	8006b6e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006ade:	e04e      	b.n	8006b7e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	fb03 f202 	mul.w	r2, r3, r2
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2280      	movs	r2, #128	; 0x80
 8006af6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	220a      	movs	r2, #10
 8006afe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	3363      	adds	r3, #99	; 0x63
 8006b06:	2210      	movs	r2, #16
 8006b08:	2100      	movs	r1, #0
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f006 fcf0 	bl	800d4f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	2228      	movs	r2, #40	; 0x28
 8006b14:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8006b18:	79fa      	ldrb	r2, [r7, #7]
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006b20:	79ba      	ldrb	r2, [r7, #6]
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8006b28:	797a      	ldrb	r2, [r7, #5]
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006b30:	1d3b      	adds	r3, r7, #4
 8006b32:	781a      	ldrb	r2, [r3, #0]
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006b3a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006b44:	f107 0320 	add.w	r3, r7, #32
 8006b48:	781a      	ldrb	r2, [r3, #0]
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b6c:	e007      	b.n	8006b7e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006b6e:	7afb      	ldrb	r3, [r7, #11]
 8006b70:	4619      	mov	r1, r3
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f7ff fb18 	bl	80061a8 <USBH_MSC_BOT_Process>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b7c:	bf00      	nop
  }

  return error;
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3718      	adds	r7, #24
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	4613      	mov	r3, r2
 8006b94:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e029      	b.n	8006bf4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	79fa      	ldrb	r2, [r7, #7]
 8006ba4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f81f 	bl	8006bfc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f006 fa39 	bl	800d064 <USBH_LL_Init>

  return USBH_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	e009      	b.n	8006c22 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	33e0      	adds	r3, #224	; 0xe0
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	2200      	movs	r2, #0
 8006c1a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	60fb      	str	r3, [r7, #12]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b0f      	cmp	r3, #15
 8006c26:	d9f2      	bls.n	8006c0e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	e009      	b.n	8006c42 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c38:	2200      	movs	r2, #0
 8006c3a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c48:	d3f1      	bcc.n	8006c2e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2240      	movs	r2, #64	; 0x40
 8006c6e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d016      	beq.n	8006ce6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10e      	bne.n	8006ce0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006cc8:	1c59      	adds	r1, r3, #1
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	33de      	adds	r3, #222	; 0xde
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]
 8006cde:	e004      	b.n	8006cea <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	73fb      	strb	r3, [r7, #15]
 8006ce4:	e001      	b.n	8006cea <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006d0e:	78fa      	ldrb	r2, [r7, #3]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d204      	bcs.n	8006d1e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	78fa      	ldrb	r2, [r7, #3]
 8006d18:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006d1c:	e001      	b.n	8006d22 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006d1e:	2302      	movs	r3, #2
 8006d20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	4608      	mov	r0, r1
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4603      	mov	r3, r0
 8006d40:	70fb      	strb	r3, [r7, #3]
 8006d42:	460b      	mov	r3, r1
 8006d44:	70bb      	strb	r3, [r7, #2]
 8006d46:	4613      	mov	r3, r2
 8006d48:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006d58:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d5a:	e025      	b.n	8006da8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006d5c:	7dfb      	ldrb	r3, [r7, #23]
 8006d5e:	221a      	movs	r2, #26
 8006d60:	fb02 f303 	mul.w	r3, r2, r3
 8006d64:	3308      	adds	r3, #8
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	4413      	add	r3, r2
 8006d6a:	3302      	adds	r3, #2
 8006d6c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	795b      	ldrb	r3, [r3, #5]
 8006d72:	78fa      	ldrb	r2, [r7, #3]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d002      	beq.n	8006d7e <USBH_FindInterface+0x4e>
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	2bff      	cmp	r3, #255	; 0xff
 8006d7c:	d111      	bne.n	8006da2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006d82:	78ba      	ldrb	r2, [r7, #2]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d002      	beq.n	8006d8e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d88:	78bb      	ldrb	r3, [r7, #2]
 8006d8a:	2bff      	cmp	r3, #255	; 0xff
 8006d8c:	d109      	bne.n	8006da2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d92:	787a      	ldrb	r2, [r7, #1]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d002      	beq.n	8006d9e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006d98:	787b      	ldrb	r3, [r7, #1]
 8006d9a:	2bff      	cmp	r3, #255	; 0xff
 8006d9c:	d101      	bne.n	8006da2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	e006      	b.n	8006db0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006da2:	7dfb      	ldrb	r3, [r7, #23]
 8006da4:	3301      	adds	r3, #1
 8006da6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006da8:	7dfb      	ldrb	r3, [r7, #23]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d9d6      	bls.n	8006d5c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006dae:	23ff      	movs	r3, #255	; 0xff
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f006 f989 	bl	800d0dc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006dca:	2101      	movs	r1, #1
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f006 faa2 	bl	800d316 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af04      	add	r7, sp, #16
 8006de2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006de4:	2302      	movs	r3, #2
 8006de6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d102      	bne.n	8006dfe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2203      	movs	r2, #3
 8006dfc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b0b      	cmp	r3, #11
 8006e06:	f200 81be 	bhi.w	8007186 <USBH_Process+0x3aa>
 8006e0a:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <USBH_Process+0x34>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006e41 	.word	0x08006e41
 8006e14:	08006e73 	.word	0x08006e73
 8006e18:	08006edb 	.word	0x08006edb
 8006e1c:	08007121 	.word	0x08007121
 8006e20:	08007187 	.word	0x08007187
 8006e24:	08006f7f 	.word	0x08006f7f
 8006e28:	080070c7 	.word	0x080070c7
 8006e2c:	08006fb5 	.word	0x08006fb5
 8006e30:	08006fd5 	.word	0x08006fd5
 8006e34:	08006ff5 	.word	0x08006ff5
 8006e38:	08007039 	.word	0x08007039
 8006e3c:	08007109 	.word	0x08007109
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 819e 	beq.w	800718a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006e54:	20c8      	movs	r0, #200	; 0xc8
 8006e56:	f006 facc 	bl	800d3f2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f006 f99b 	bl	800d196 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e70:	e18b      	b.n	800718a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d107      	bne.n	8006e8c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e8a:	e18d      	b.n	80071a8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e96:	d914      	bls.n	8006ec2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d903      	bls.n	8006eba <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	220d      	movs	r2, #13
 8006eb6:	701a      	strb	r2, [r3, #0]
      break;
 8006eb8:	e176      	b.n	80071a8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
      break;
 8006ec0:	e172      	b.n	80071a8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ec8:	f103 020a 	add.w	r2, r3, #10
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006ed2:	200a      	movs	r0, #10
 8006ed4:	f006 fa8d 	bl	800d3f2 <USBH_Delay>
      break;
 8006ed8:	e166      	b.n	80071a8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d005      	beq.n	8006ef0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006eea:	2104      	movs	r1, #4
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006ef0:	2064      	movs	r0, #100	; 0x64
 8006ef2:	f006 fa7e 	bl	800d3f2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f006 f926 	bl	800d148 <USBH_LL_GetSpeed>
 8006efc:	4603      	mov	r3, r0
 8006efe:	461a      	mov	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2205      	movs	r2, #5
 8006f0a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 fa29 	bl	8008366 <USBH_AllocPipe>
 8006f14:	4603      	mov	r3, r0
 8006f16:	461a      	mov	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006f1c:	2180      	movs	r1, #128	; 0x80
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f001 fa21 	bl	8008366 <USBH_AllocPipe>
 8006f24:	4603      	mov	r3, r0
 8006f26:	461a      	mov	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	7919      	ldrb	r1, [r3, #4]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006f40:	b292      	uxth	r2, r2
 8006f42:	9202      	str	r2, [sp, #8]
 8006f44:	2200      	movs	r2, #0
 8006f46:	9201      	str	r2, [sp, #4]
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2280      	movs	r2, #128	; 0x80
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 f9da 	bl	8008308 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	7959      	ldrb	r1, [r3, #5]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006f68:	b292      	uxth	r2, r2
 8006f6a:	9202      	str	r2, [sp, #8]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	9201      	str	r2, [sp, #4]
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	4603      	mov	r3, r0
 8006f74:	2200      	movs	r2, #0
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 f9c6 	bl	8008308 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f7c:	e114      	b.n	80071a8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f918 	bl	80071b4 <USBH_HandleEnum>
 8006f84:	4603      	mov	r3, r0
 8006f86:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006f88:	7bbb      	ldrb	r3, [r7, #14]
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f040 80fe 	bne.w	800718e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d103      	bne.n	8006fac <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2208      	movs	r2, #8
 8006fa8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006faa:	e0f0      	b.n	800718e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2207      	movs	r2, #7
 8006fb0:	701a      	strb	r2, [r3, #0]
      break;
 8006fb2:	e0ec      	b.n	800718e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 80e9 	beq.w	8007192 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2208      	movs	r2, #8
 8006fd0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006fd2:	e0de      	b.n	8007192 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fc2c 	bl	800783c <USBH_SetCfg>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f040 80d5 	bne.w	8007196 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2209      	movs	r2, #9
 8006ff0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ff2:	e0d0      	b.n	8007196 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006ffa:	f003 0320 	and.w	r3, r3, #32
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d016      	beq.n	8007030 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007002:	2101      	movs	r1, #1
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fc3c 	bl	8007882 <USBH_SetFeature>
 800700a:	4603      	mov	r3, r0
 800700c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800700e:	7bbb      	ldrb	r3, [r7, #14]
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d103      	bne.n	800701e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	220a      	movs	r2, #10
 800701a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800701c:	e0bd      	b.n	800719a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800701e:	7bbb      	ldrb	r3, [r7, #14]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b03      	cmp	r3, #3
 8007024:	f040 80b9 	bne.w	800719a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	220a      	movs	r2, #10
 800702c:	701a      	strb	r2, [r3, #0]
      break;
 800702e:	e0b4      	b.n	800719a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	220a      	movs	r2, #10
 8007034:	701a      	strb	r2, [r3, #0]
      break;
 8007036:	e0b0      	b.n	800719a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 80ad 	beq.w	800719e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800704c:	2300      	movs	r3, #0
 800704e:	73fb      	strb	r3, [r7, #15]
 8007050:	e016      	b.n	8007080 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007052:	7bfa      	ldrb	r2, [r7, #15]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	32de      	adds	r2, #222	; 0xde
 8007058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705c:	791a      	ldrb	r2, [r3, #4]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007064:	429a      	cmp	r2, r3
 8007066:	d108      	bne.n	800707a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007068:	7bfa      	ldrb	r2, [r7, #15]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	32de      	adds	r2, #222	; 0xde
 800706e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007078:	e005      	b.n	8007086 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800707a:	7bfb      	ldrb	r3, [r7, #15]
 800707c:	3301      	adds	r3, #1
 800707e:	73fb      	strb	r3, [r7, #15]
 8007080:	7bfb      	ldrb	r3, [r7, #15]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0e5      	beq.n	8007052 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800708c:	2b00      	cmp	r3, #0
 800708e:	d016      	beq.n	80070be <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	4798      	blx	r3
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d109      	bne.n	80070b6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2206      	movs	r2, #6
 80070a6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070ae:	2103      	movs	r1, #3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070b4:	e073      	b.n	800719e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	220d      	movs	r2, #13
 80070ba:	701a      	strb	r2, [r3, #0]
      break;
 80070bc:	e06f      	b.n	800719e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	220d      	movs	r2, #13
 80070c2:	701a      	strb	r2, [r3, #0]
      break;
 80070c4:	e06b      	b.n	800719e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d017      	beq.n	8007100 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	4798      	blx	r3
 80070dc:	4603      	mov	r3, r0
 80070de:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d103      	bne.n	80070f0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	220b      	movs	r2, #11
 80070ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070ee:	e058      	b.n	80071a2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80070f0:	7bbb      	ldrb	r3, [r7, #14]
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d154      	bne.n	80071a2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	220d      	movs	r2, #13
 80070fc:	701a      	strb	r2, [r3, #0]
      break;
 80070fe:	e050      	b.n	80071a2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	220d      	movs	r2, #13
 8007104:	701a      	strb	r2, [r3, #0]
      break;
 8007106:	e04c      	b.n	80071a2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d049      	beq.n	80071a6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
      }
      break;
 800711e:	e042      	b.n	80071a6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7ff fd67 	bl	8006bfc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007134:	2b00      	cmp	r3, #0
 8007136:	d009      	beq.n	800714c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800715c:	2105      	movs	r1, #5
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b01      	cmp	r3, #1
 800716c:	d107      	bne.n	800717e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff fe20 	bl	8006dbc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800717c:	e014      	b.n	80071a8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f005 ffac 	bl	800d0dc <USBH_LL_Start>
      break;
 8007184:	e010      	b.n	80071a8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007186:	bf00      	nop
 8007188:	e00e      	b.n	80071a8 <USBH_Process+0x3cc>
      break;
 800718a:	bf00      	nop
 800718c:	e00c      	b.n	80071a8 <USBH_Process+0x3cc>
      break;
 800718e:	bf00      	nop
 8007190:	e00a      	b.n	80071a8 <USBH_Process+0x3cc>
    break;
 8007192:	bf00      	nop
 8007194:	e008      	b.n	80071a8 <USBH_Process+0x3cc>
      break;
 8007196:	bf00      	nop
 8007198:	e006      	b.n	80071a8 <USBH_Process+0x3cc>
      break;
 800719a:	bf00      	nop
 800719c:	e004      	b.n	80071a8 <USBH_Process+0x3cc>
      break;
 800719e:	bf00      	nop
 80071a0:	e002      	b.n	80071a8 <USBH_Process+0x3cc>
      break;
 80071a2:	bf00      	nop
 80071a4:	e000      	b.n	80071a8 <USBH_Process+0x3cc>
      break;
 80071a6:	bf00      	nop
  }
  return USBH_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop

080071b4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af04      	add	r7, sp, #16
 80071ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80071bc:	2301      	movs	r3, #1
 80071be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80071c0:	2301      	movs	r3, #1
 80071c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	785b      	ldrb	r3, [r3, #1]
 80071c8:	2b07      	cmp	r3, #7
 80071ca:	f200 81c1 	bhi.w	8007550 <USBH_HandleEnum+0x39c>
 80071ce:	a201      	add	r2, pc, #4	; (adr r2, 80071d4 <USBH_HandleEnum+0x20>)
 80071d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d4:	080071f5 	.word	0x080071f5
 80071d8:	080072b3 	.word	0x080072b3
 80071dc:	0800731d 	.word	0x0800731d
 80071e0:	080073ab 	.word	0x080073ab
 80071e4:	08007415 	.word	0x08007415
 80071e8:	08007485 	.word	0x08007485
 80071ec:	080074cb 	.word	0x080074cb
 80071f0:	08007511 	.word	0x08007511
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80071f4:	2108      	movs	r1, #8
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fa50 	bl	800769c <USBH_Get_DevDesc>
 80071fc:	4603      	mov	r3, r0
 80071fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007200:	7bbb      	ldrb	r3, [r7, #14]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d130      	bne.n	8007268 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	7919      	ldrb	r1, [r3, #4]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800722a:	b292      	uxth	r2, r2
 800722c:	9202      	str	r2, [sp, #8]
 800722e:	2200      	movs	r2, #0
 8007230:	9201      	str	r2, [sp, #4]
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	4603      	mov	r3, r0
 8007236:	2280      	movs	r2, #128	; 0x80
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 f865 	bl	8008308 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	7959      	ldrb	r1, [r3, #5]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007252:	b292      	uxth	r2, r2
 8007254:	9202      	str	r2, [sp, #8]
 8007256:	2200      	movs	r2, #0
 8007258:	9201      	str	r2, [sp, #4]
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	4603      	mov	r3, r0
 800725e:	2200      	movs	r2, #0
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f001 f851 	bl	8008308 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007266:	e175      	b.n	8007554 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	2b03      	cmp	r3, #3
 800726c:	f040 8172 	bne.w	8007554 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007276:	3301      	adds	r3, #1
 8007278:	b2da      	uxtb	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007286:	2b03      	cmp	r3, #3
 8007288:	d903      	bls.n	8007292 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	220d      	movs	r2, #13
 800728e:	701a      	strb	r2, [r3, #0]
      break;
 8007290:	e160      	b.n	8007554 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	795b      	ldrb	r3, [r3, #5]
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 f885 	bl	80083a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	791b      	ldrb	r3, [r3, #4]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f001 f87f 	bl	80083a8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	701a      	strb	r2, [r3, #0]
      break;
 80072b0:	e150      	b.n	8007554 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80072b2:	2112      	movs	r1, #18
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f9f1 	bl	800769c <USBH_Get_DevDesc>
 80072ba:	4603      	mov	r3, r0
 80072bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072be:	7bbb      	ldrb	r3, [r7, #14]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d103      	bne.n	80072cc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072ca:	e145      	b.n	8007558 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	f040 8142 	bne.w	8007558 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072da:	3301      	adds	r3, #1
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d903      	bls.n	80072f6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	220d      	movs	r2, #13
 80072f2:	701a      	strb	r2, [r3, #0]
      break;
 80072f4:	e130      	b.n	8007558 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	795b      	ldrb	r3, [r3, #5]
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 f853 	bl	80083a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	791b      	ldrb	r3, [r3, #4]
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 f84d 	bl	80083a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	701a      	strb	r2, [r3, #0]
      break;
 800731a:	e11d      	b.n	8007558 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800731c:	2101      	movs	r1, #1
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fa68 	bl	80077f4 <USBH_SetAddress>
 8007324:	4603      	mov	r3, r0
 8007326:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d132      	bne.n	8007394 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800732e:	2002      	movs	r0, #2
 8007330:	f006 f85f 	bl	800d3f2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2203      	movs	r2, #3
 8007340:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	7919      	ldrb	r1, [r3, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007356:	b292      	uxth	r2, r2
 8007358:	9202      	str	r2, [sp, #8]
 800735a:	2200      	movs	r2, #0
 800735c:	9201      	str	r2, [sp, #4]
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	4603      	mov	r3, r0
 8007362:	2280      	movs	r2, #128	; 0x80
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 ffcf 	bl	8008308 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	7959      	ldrb	r1, [r3, #5]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800737e:	b292      	uxth	r2, r2
 8007380:	9202      	str	r2, [sp, #8]
 8007382:	2200      	movs	r2, #0
 8007384:	9201      	str	r2, [sp, #4]
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	4603      	mov	r3, r0
 800738a:	2200      	movs	r2, #0
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 ffbb 	bl	8008308 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007392:	e0e3      	b.n	800755c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	2b03      	cmp	r3, #3
 8007398:	f040 80e0 	bne.w	800755c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	220d      	movs	r2, #13
 80073a0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	705a      	strb	r2, [r3, #1]
      break;
 80073a8:	e0d8      	b.n	800755c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80073aa:	2109      	movs	r1, #9
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f99d 	bl	80076ec <USBH_Get_CfgDesc>
 80073b2:	4603      	mov	r3, r0
 80073b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d103      	bne.n	80073c4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2204      	movs	r2, #4
 80073c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80073c2:	e0cd      	b.n	8007560 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	f040 80ca 	bne.w	8007560 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073d2:	3301      	adds	r3, #1
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d903      	bls.n	80073ee <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	220d      	movs	r2, #13
 80073ea:	701a      	strb	r2, [r3, #0]
      break;
 80073ec:	e0b8      	b.n	8007560 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	795b      	ldrb	r3, [r3, #5]
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 ffd7 	bl	80083a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	791b      	ldrb	r3, [r3, #4]
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 ffd1 	bl	80083a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	701a      	strb	r2, [r3, #0]
      break;
 8007412:	e0a5      	b.n	8007560 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f965 	bl	80076ec <USBH_Get_CfgDesc>
 8007422:	4603      	mov	r3, r0
 8007424:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007426:	7bbb      	ldrb	r3, [r7, #14]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d103      	bne.n	8007434 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2205      	movs	r2, #5
 8007430:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007432:	e097      	b.n	8007564 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	2b03      	cmp	r3, #3
 8007438:	f040 8094 	bne.w	8007564 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007442:	3301      	adds	r3, #1
 8007444:	b2da      	uxtb	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007452:	2b03      	cmp	r3, #3
 8007454:	d903      	bls.n	800745e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	220d      	movs	r2, #13
 800745a:	701a      	strb	r2, [r3, #0]
      break;
 800745c:	e082      	b.n	8007564 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	795b      	ldrb	r3, [r3, #5]
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 ff9f 	bl	80083a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	791b      	ldrb	r3, [r3, #4]
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 ff99 	bl	80083a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	701a      	strb	r2, [r3, #0]
      break;
 8007482:	e06f      	b.n	8007564 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800748a:	2b00      	cmp	r3, #0
 800748c:	d019      	beq.n	80074c2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800749a:	23ff      	movs	r3, #255	; 0xff
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f949 	bl	8007734 <USBH_Get_StringDesc>
 80074a2:	4603      	mov	r3, r0
 80074a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d103      	bne.n	80074b4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2206      	movs	r2, #6
 80074b0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80074b2:	e059      	b.n	8007568 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d156      	bne.n	8007568 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2206      	movs	r2, #6
 80074be:	705a      	strb	r2, [r3, #1]
      break;
 80074c0:	e052      	b.n	8007568 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2206      	movs	r2, #6
 80074c6:	705a      	strb	r2, [r3, #1]
      break;
 80074c8:	e04e      	b.n	8007568 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d019      	beq.n	8007508 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80074e0:	23ff      	movs	r3, #255	; 0xff
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f926 	bl	8007734 <USBH_Get_StringDesc>
 80074e8:	4603      	mov	r3, r0
 80074ea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d103      	bne.n	80074fa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2207      	movs	r2, #7
 80074f6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80074f8:	e038      	b.n	800756c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d135      	bne.n	800756c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2207      	movs	r2, #7
 8007504:	705a      	strb	r2, [r3, #1]
      break;
 8007506:	e031      	b.n	800756c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2207      	movs	r2, #7
 800750c:	705a      	strb	r2, [r3, #1]
      break;
 800750e:	e02d      	b.n	800756c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007516:	2b00      	cmp	r3, #0
 8007518:	d017      	beq.n	800754a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007526:	23ff      	movs	r3, #255	; 0xff
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f903 	bl	8007734 <USBH_Get_StringDesc>
 800752e:	4603      	mov	r3, r0
 8007530:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d102      	bne.n	800753e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800753c:	e018      	b.n	8007570 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	2b03      	cmp	r3, #3
 8007542:	d115      	bne.n	8007570 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	73fb      	strb	r3, [r7, #15]
      break;
 8007548:	e012      	b.n	8007570 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]
      break;
 800754e:	e00f      	b.n	8007570 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007550:	bf00      	nop
 8007552:	e00e      	b.n	8007572 <USBH_HandleEnum+0x3be>
      break;
 8007554:	bf00      	nop
 8007556:	e00c      	b.n	8007572 <USBH_HandleEnum+0x3be>
      break;
 8007558:	bf00      	nop
 800755a:	e00a      	b.n	8007572 <USBH_HandleEnum+0x3be>
      break;
 800755c:	bf00      	nop
 800755e:	e008      	b.n	8007572 <USBH_HandleEnum+0x3be>
      break;
 8007560:	bf00      	nop
 8007562:	e006      	b.n	8007572 <USBH_HandleEnum+0x3be>
      break;
 8007564:	bf00      	nop
 8007566:	e004      	b.n	8007572 <USBH_HandleEnum+0x3be>
      break;
 8007568:	bf00      	nop
 800756a:	e002      	b.n	8007572 <USBH_HandleEnum+0x3be>
      break;
 800756c:	bf00      	nop
 800756e:	e000      	b.n	8007572 <USBH_HandleEnum+0x3be>
      break;
 8007570:	bf00      	nop
  }
  return Status;
 8007572:	7bfb      	ldrb	r3, [r7, #15]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800758e:	bf00      	nop
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b082      	sub	sp, #8
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f804 	bl	80075be <USBH_HandleSof>
}
 80075b6:	bf00      	nop
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b082      	sub	sp, #8
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b0b      	cmp	r3, #11
 80075ce:	d10a      	bne.n	80075e6 <USBH_HandleSof+0x28>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d005      	beq.n	80075e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	4798      	blx	r3
  }
}
 80075e6:	bf00      	nop
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b083      	sub	sp, #12
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80075fe:	bf00      	nop
}
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800761a:	bf00      	nop
}
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f005 fd4c 	bl	800d112 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	791b      	ldrb	r3, [r3, #4]
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fe91 	bl	80083a8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	795b      	ldrb	r3, [r3, #5]
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fe8b 	bl	80083a8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af02      	add	r7, sp, #8
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	4613      	mov	r3, r2
 80076b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076ba:	2100      	movs	r1, #0
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f864 	bl	800778a <USBH_GetDescriptor>
 80076c2:	4603      	mov	r3, r0
 80076c4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f203 3026 	addw	r0, r3, #806	; 0x326
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80076d8:	78fa      	ldrb	r2, [r7, #3]
 80076da:	b292      	uxth	r2, r2
 80076dc:	4619      	mov	r1, r3
 80076de:	f000 f918 	bl	8007912 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af02      	add	r7, sp, #8
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	460b      	mov	r3, r1
 80076f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	331c      	adds	r3, #28
 80076fc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80076fe:	887b      	ldrh	r3, [r7, #2]
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007708:	2100      	movs	r1, #0
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f83d 	bl	800778a <USBH_GetDescriptor>
 8007710:	4603      	mov	r3, r0
 8007712:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007714:	7bfb      	ldrb	r3, [r7, #15]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d107      	bne.n	800772a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800771a:	887b      	ldrh	r3, [r7, #2]
 800771c:	461a      	mov	r2, r3
 800771e:	68b9      	ldr	r1, [r7, #8]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f987 	bl	8007a34 <USBH_ParseCfgDesc>
 8007726:	4603      	mov	r3, r0
 8007728:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800772a:	7bfb      	ldrb	r3, [r7, #15]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af02      	add	r7, sp, #8
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	607a      	str	r2, [r7, #4]
 800773e:	461a      	mov	r2, r3
 8007740:	460b      	mov	r3, r1
 8007742:	72fb      	strb	r3, [r7, #11]
 8007744:	4613      	mov	r3, r2
 8007746:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007748:	7afb      	ldrb	r3, [r7, #11]
 800774a:	b29b      	uxth	r3, r3
 800774c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007750:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007758:	893b      	ldrh	r3, [r7, #8]
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	460b      	mov	r3, r1
 800775e:	2100      	movs	r1, #0
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 f812 	bl	800778a <USBH_GetDescriptor>
 8007766:	4603      	mov	r3, r0
 8007768:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800776a:	7dfb      	ldrb	r3, [r7, #23]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d107      	bne.n	8007780 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007776:	893a      	ldrh	r2, [r7, #8]
 8007778:	6879      	ldr	r1, [r7, #4]
 800777a:	4618      	mov	r0, r3
 800777c:	f000 fb24 	bl	8007dc8 <USBH_ParseStringDesc>
  }

  return status;
 8007780:	7dfb      	ldrb	r3, [r7, #23]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	60f8      	str	r0, [r7, #12]
 8007792:	607b      	str	r3, [r7, #4]
 8007794:	460b      	mov	r3, r1
 8007796:	72fb      	strb	r3, [r7, #11]
 8007798:	4613      	mov	r3, r2
 800779a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	789b      	ldrb	r3, [r3, #2]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d11c      	bne.n	80077de <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80077a4:	7afb      	ldrb	r3, [r7, #11]
 80077a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2206      	movs	r2, #6
 80077b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	893a      	ldrh	r2, [r7, #8]
 80077ba:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80077bc:	893b      	ldrh	r3, [r7, #8]
 80077be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80077c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077c6:	d104      	bne.n	80077d2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f240 4209 	movw	r2, #1033	; 0x409
 80077ce:	829a      	strh	r2, [r3, #20]
 80077d0:	e002      	b.n	80077d8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	8b3a      	ldrh	r2, [r7, #24]
 80077dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80077de:	8b3b      	ldrh	r3, [r7, #24]
 80077e0:	461a      	mov	r2, r3
 80077e2:	6879      	ldr	r1, [r7, #4]
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 fb3d 	bl	8007e64 <USBH_CtlReq>
 80077ea:	4603      	mov	r3, r0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	789b      	ldrb	r3, [r3, #2]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d10f      	bne.n	8007828 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2205      	movs	r2, #5
 8007812:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007814:	78fb      	ldrb	r3, [r7, #3]
 8007816:	b29a      	uxth	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007828:	2200      	movs	r2, #0
 800782a:	2100      	movs	r1, #0
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fb19 	bl	8007e64 <USBH_CtlReq>
 8007832:	4603      	mov	r3, r0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	789b      	ldrb	r3, [r3, #2]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d10e      	bne.n	800786e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2209      	movs	r2, #9
 800785a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	887a      	ldrh	r2, [r7, #2]
 8007860:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800786e:	2200      	movs	r2, #0
 8007870:	2100      	movs	r1, #0
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 faf6 	bl	8007e64 <USBH_CtlReq>
 8007878:	4603      	mov	r3, r0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b082      	sub	sp, #8
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	460b      	mov	r3, r1
 800788c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	789b      	ldrb	r3, [r3, #2]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d10f      	bne.n	80078b6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2203      	movs	r2, #3
 80078a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80078a2:	78fb      	ldrb	r3, [r7, #3]
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80078b6:	2200      	movs	r2, #0
 80078b8:	2100      	movs	r1, #0
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fad2 	bl	8007e64 <USBH_CtlReq>
 80078c0:	4603      	mov	r3, r0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	460b      	mov	r3, r1
 80078d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	789b      	ldrb	r3, [r3, #2]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d10f      	bne.n	80078fe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2202      	movs	r2, #2
 80078e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80078fe:	2200      	movs	r2, #0
 8007900:	2100      	movs	r1, #0
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 faae 	bl	8007e64 <USBH_CtlReq>
 8007908:	4603      	mov	r3, r0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007912:	b480      	push	{r7}
 8007914:	b085      	sub	sp, #20
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	4613      	mov	r3, r2
 800791e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	781a      	ldrb	r2, [r3, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	785a      	ldrb	r2, [r3, #1]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	3302      	adds	r3, #2
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	b29a      	uxth	r2, r3
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	3303      	adds	r3, #3
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	b29b      	uxth	r3, r3
 8007940:	021b      	lsls	r3, r3, #8
 8007942:	b29b      	uxth	r3, r3
 8007944:	4313      	orrs	r3, r2
 8007946:	b29a      	uxth	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	791a      	ldrb	r2, [r3, #4]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	795a      	ldrb	r2, [r3, #5]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	799a      	ldrb	r2, [r3, #6]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	79da      	ldrb	r2, [r3, #7]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	79db      	ldrb	r3, [r3, #7]
 8007970:	2b20      	cmp	r3, #32
 8007972:	dc11      	bgt.n	8007998 <USBH_ParseDevDesc+0x86>
 8007974:	2b08      	cmp	r3, #8
 8007976:	db16      	blt.n	80079a6 <USBH_ParseDevDesc+0x94>
 8007978:	3b08      	subs	r3, #8
 800797a:	2201      	movs	r2, #1
 800797c:	fa02 f303 	lsl.w	r3, r2, r3
 8007980:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007988:	2b00      	cmp	r3, #0
 800798a:	bf14      	ite	ne
 800798c:	2301      	movne	r3, #1
 800798e:	2300      	moveq	r3, #0
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	d102      	bne.n	800799c <USBH_ParseDevDesc+0x8a>
 8007996:	e006      	b.n	80079a6 <USBH_ParseDevDesc+0x94>
 8007998:	2b40      	cmp	r3, #64	; 0x40
 800799a:	d104      	bne.n	80079a6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	79da      	ldrb	r2, [r3, #7]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	71da      	strb	r2, [r3, #7]
      break;
 80079a4:	e003      	b.n	80079ae <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2240      	movs	r2, #64	; 0x40
 80079aa:	71da      	strb	r2, [r3, #7]
      break;
 80079ac:	bf00      	nop
  }

  if (length > 8U)
 80079ae:	88fb      	ldrh	r3, [r7, #6]
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d939      	bls.n	8007a28 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	3308      	adds	r3, #8
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	3309      	adds	r3, #9
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	021b      	lsls	r3, r3, #8
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	4313      	orrs	r3, r2
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	330a      	adds	r3, #10
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	330b      	adds	r3, #11
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	b29b      	uxth	r3, r3
 80079e0:	021b      	lsls	r3, r3, #8
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	4313      	orrs	r3, r2
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	330c      	adds	r3, #12
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	330d      	adds	r3, #13
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	021b      	lsls	r3, r3, #8
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	4313      	orrs	r3, r2
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	7b9a      	ldrb	r2, [r3, #14]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	7bda      	ldrb	r2, [r3, #15]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	7c1a      	ldrb	r2, [r3, #16]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	7c5a      	ldrb	r2, [r3, #17]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	745a      	strb	r2, [r3, #17]
  }
}
 8007a28:	bf00      	nop
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b08c      	sub	sp, #48	; 0x30
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007a48:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	781a      	ldrb	r2, [r3, #0]
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	785a      	ldrb	r2, [r3, #1]
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	3302      	adds	r3, #2
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	3303      	adds	r3, #3
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	021b      	lsls	r3, r3, #8
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a90:	bf28      	it	cs
 8007a92:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	791a      	ldrb	r2, [r3, #4]
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	795a      	ldrb	r2, [r3, #5]
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	799a      	ldrb	r2, [r3, #6]
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	79da      	ldrb	r2, [r3, #7]
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	7a1a      	ldrb	r2, [r3, #8]
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	2b09      	cmp	r3, #9
 8007aca:	d002      	beq.n	8007ad2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	2209      	movs	r2, #9
 8007ad0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007ad2:	88fb      	ldrh	r3, [r7, #6]
 8007ad4:	2b09      	cmp	r3, #9
 8007ad6:	f240 809d 	bls.w	8007c14 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007ada:	2309      	movs	r3, #9
 8007adc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ae2:	e081      	b.n	8007be8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ae4:	f107 0316 	add.w	r3, r7, #22
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aec:	f000 f99f 	bl	8007e2e <USBH_GetNextDesc>
 8007af0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af4:	785b      	ldrb	r3, [r3, #1]
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	d176      	bne.n	8007be8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	2b09      	cmp	r3, #9
 8007b00:	d002      	beq.n	8007b08 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b04:	2209      	movs	r2, #9
 8007b06:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b0c:	221a      	movs	r2, #26
 8007b0e:	fb02 f303 	mul.w	r3, r2, r3
 8007b12:	3308      	adds	r3, #8
 8007b14:	6a3a      	ldr	r2, [r7, #32]
 8007b16:	4413      	add	r3, r2
 8007b18:	3302      	adds	r3, #2
 8007b1a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007b1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b1e:	69f8      	ldr	r0, [r7, #28]
 8007b20:	f000 f87e 	bl	8007c20 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b2e:	e043      	b.n	8007bb8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007b30:	f107 0316 	add.w	r3, r7, #22
 8007b34:	4619      	mov	r1, r3
 8007b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b38:	f000 f979 	bl	8007e2e <USBH_GetNextDesc>
 8007b3c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b40:	785b      	ldrb	r3, [r3, #1]
 8007b42:	2b05      	cmp	r3, #5
 8007b44:	d138      	bne.n	8007bb8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	795b      	ldrb	r3, [r3, #5]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d10f      	bne.n	8007b6e <USBH_ParseCfgDesc+0x13a>
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	799b      	ldrb	r3, [r3, #6]
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d10b      	bne.n	8007b6e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	79db      	ldrb	r3, [r3, #7]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10f      	bne.n	8007b7e <USBH_ParseCfgDesc+0x14a>
 8007b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	2b09      	cmp	r3, #9
 8007b64:	d00b      	beq.n	8007b7e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b68:	2209      	movs	r2, #9
 8007b6a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007b6c:	e007      	b.n	8007b7e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	2b07      	cmp	r3, #7
 8007b74:	d004      	beq.n	8007b80 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b78:	2207      	movs	r2, #7
 8007b7a:	701a      	strb	r2, [r3, #0]
 8007b7c:	e000      	b.n	8007b80 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007b7e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b84:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007b88:	3201      	adds	r2, #1
 8007b8a:	00d2      	lsls	r2, r2, #3
 8007b8c:	211a      	movs	r1, #26
 8007b8e:	fb01 f303 	mul.w	r3, r1, r3
 8007b92:	4413      	add	r3, r2
 8007b94:	3308      	adds	r3, #8
 8007b96:	6a3a      	ldr	r2, [r7, #32]
 8007b98:	4413      	add	r3, r2
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ba0:	69b9      	ldr	r1, [r7, #24]
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 f86b 	bl	8007c7e <USBH_ParseEPDesc>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007bae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	791b      	ldrb	r3, [r3, #4]
 8007bbc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d204      	bcs.n	8007bce <USBH_ParseCfgDesc+0x19a>
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	885a      	ldrh	r2, [r3, #2]
 8007bc8:	8afb      	ldrh	r3, [r7, #22]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d8b0      	bhi.n	8007b30 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	791b      	ldrb	r3, [r3, #4]
 8007bd2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d201      	bcs.n	8007bde <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e01c      	b.n	8007c18 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007bde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007be2:	3301      	adds	r3, #1
 8007be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d805      	bhi.n	8007bfc <USBH_ParseCfgDesc+0x1c8>
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	885a      	ldrh	r2, [r3, #2]
 8007bf4:	8afb      	ldrh	r3, [r7, #22]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	f63f af74 	bhi.w	8007ae4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
 8007bfe:	791b      	ldrb	r3, [r3, #4]
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	bf28      	it	cs
 8007c04:	2302      	movcs	r3, #2
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d201      	bcs.n	8007c14 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e001      	b.n	8007c18 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007c14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3730      	adds	r7, #48	; 0x30
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781a      	ldrb	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	785a      	ldrb	r2, [r3, #1]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	789a      	ldrb	r2, [r3, #2]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	78da      	ldrb	r2, [r3, #3]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	791a      	ldrb	r2, [r3, #4]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	795a      	ldrb	r2, [r3, #5]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	799a      	ldrb	r2, [r3, #6]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	79da      	ldrb	r2, [r3, #7]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	7a1a      	ldrb	r2, [r3, #8]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	721a      	strb	r2, [r3, #8]
}
 8007c72:	bf00      	nop
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b087      	sub	sp, #28
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	60f8      	str	r0, [r7, #12]
 8007c86:	60b9      	str	r1, [r7, #8]
 8007c88:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	781a      	ldrb	r2, [r3, #0]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	785a      	ldrb	r2, [r3, #1]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	789a      	ldrb	r2, [r3, #2]
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	78da      	ldrb	r2, [r3, #3]
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3305      	adds	r3, #5
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	021b      	lsls	r3, r3, #8
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	799a      	ldrb	r2, [r3, #6]
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	889b      	ldrh	r3, [r3, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d102      	bne.n	8007ce0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	75fb      	strb	r3, [r7, #23]
 8007cde:	e033      	b.n	8007d48 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	889b      	ldrh	r3, [r3, #4]
 8007ce4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ce8:	f023 0307 	bic.w	r3, r3, #7
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	889b      	ldrh	r3, [r3, #4]
 8007cf6:	b21a      	sxth	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	b299      	uxth	r1, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3305      	adds	r3, #5
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	021b      	lsls	r3, r3, #8
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	430b      	orrs	r3, r1
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d110      	bne.n	8007d3a <USBH_ParseEPDesc+0xbc>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	3304      	adds	r3, #4
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	b299      	uxth	r1, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3305      	adds	r3, #5
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	021b      	lsls	r3, r3, #8
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	430b      	orrs	r3, r1
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	b21b      	sxth	r3, r3
 8007d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d36:	b21b      	sxth	r3, r3
 8007d38:	e001      	b.n	8007d3e <USBH_ParseEPDesc+0xc0>
 8007d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	b21b      	sxth	r3, r3
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d116      	bne.n	8007d80 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	78db      	ldrb	r3, [r3, #3]
 8007d56:	f003 0303 	and.w	r3, r3, #3
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d005      	beq.n	8007d6a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	78db      	ldrb	r3, [r3, #3]
 8007d62:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d127      	bne.n	8007dba <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	799b      	ldrb	r3, [r3, #6]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <USBH_ParseEPDesc+0xfc>
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	799b      	ldrb	r3, [r3, #6]
 8007d76:	2b10      	cmp	r3, #16
 8007d78:	d91f      	bls.n	8007dba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	75fb      	strb	r3, [r7, #23]
 8007d7e:	e01c      	b.n	8007dba <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	78db      	ldrb	r3, [r3, #3]
 8007d84:	f003 0303 	and.w	r3, r3, #3
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d10a      	bne.n	8007da2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	799b      	ldrb	r3, [r3, #6]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d003      	beq.n	8007d9c <USBH_ParseEPDesc+0x11e>
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	799b      	ldrb	r3, [r3, #6]
 8007d98:	2b10      	cmp	r3, #16
 8007d9a:	d90e      	bls.n	8007dba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	75fb      	strb	r3, [r7, #23]
 8007da0:	e00b      	b.n	8007dba <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	78db      	ldrb	r3, [r3, #3]
 8007da6:	f003 0303 	and.w	r3, r3, #3
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d105      	bne.n	8007dba <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	799b      	ldrb	r3, [r3, #6]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007db6:	2303      	movs	r3, #3
 8007db8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d120      	bne.n	8007e22 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	1e9a      	subs	r2, r3, #2
 8007de6:	88fb      	ldrh	r3, [r7, #6]
 8007de8:	4293      	cmp	r3, r2
 8007dea:	bf28      	it	cs
 8007dec:	4613      	movcs	r3, r2
 8007dee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3302      	adds	r3, #2
 8007df4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007df6:	2300      	movs	r3, #0
 8007df8:	82fb      	strh	r3, [r7, #22]
 8007dfa:	e00b      	b.n	8007e14 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007dfc:	8afb      	ldrh	r3, [r7, #22]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	4413      	add	r3, r2
 8007e02:	781a      	ldrb	r2, [r3, #0]
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007e0e:	8afb      	ldrh	r3, [r7, #22]
 8007e10:	3302      	adds	r3, #2
 8007e12:	82fb      	strh	r3, [r7, #22]
 8007e14:	8afa      	ldrh	r2, [r7, #22]
 8007e16:	8abb      	ldrh	r3, [r7, #20]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d3ef      	bcc.n	8007dfc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	701a      	strb	r2, [r3, #0]
  }
}
 8007e22:	bf00      	nop
 8007e24:	371c      	adds	r7, #28
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b085      	sub	sp, #20
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	881a      	ldrh	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	4413      	add	r3, r2
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4413      	add	r3, r2
 8007e54:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e56:	68fb      	ldr	r3, [r7, #12]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007e72:	2301      	movs	r3, #1
 8007e74:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	789b      	ldrb	r3, [r3, #2]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d002      	beq.n	8007e84 <USBH_CtlReq+0x20>
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d00f      	beq.n	8007ea2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007e82:	e027      	b.n	8007ed4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	88fa      	ldrh	r2, [r7, #6]
 8007e8e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2201      	movs	r2, #1
 8007e94:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2202      	movs	r2, #2
 8007e9a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007ea0:	e018      	b.n	8007ed4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 f81c 	bl	8007ee0 <USBH_HandleControl>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <USBH_CtlReq+0x54>
 8007eb2:	7dfb      	ldrb	r3, [r7, #23]
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d106      	bne.n	8007ec6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	761a      	strb	r2, [r3, #24]
      break;
 8007ec4:	e005      	b.n	8007ed2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d102      	bne.n	8007ed2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	709a      	strb	r2, [r3, #2]
      break;
 8007ed2:	bf00      	nop
  }
  return status;
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
	...

08007ee0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af02      	add	r7, sp, #8
 8007ee6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007eec:	2300      	movs	r3, #0
 8007eee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	7e1b      	ldrb	r3, [r3, #24]
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	2b0a      	cmp	r3, #10
 8007ef8:	f200 8156 	bhi.w	80081a8 <USBH_HandleControl+0x2c8>
 8007efc:	a201      	add	r2, pc, #4	; (adr r2, 8007f04 <USBH_HandleControl+0x24>)
 8007efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f02:	bf00      	nop
 8007f04:	08007f31 	.word	0x08007f31
 8007f08:	08007f4b 	.word	0x08007f4b
 8007f0c:	08007fb5 	.word	0x08007fb5
 8007f10:	08007fdb 	.word	0x08007fdb
 8007f14:	08008013 	.word	0x08008013
 8007f18:	0800803d 	.word	0x0800803d
 8007f1c:	0800808f 	.word	0x0800808f
 8007f20:	080080b1 	.word	0x080080b1
 8007f24:	080080ed 	.word	0x080080ed
 8007f28:	08008113 	.word	0x08008113
 8007f2c:	08008151 	.word	0x08008151
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f103 0110 	add.w	r1, r3, #16
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	795b      	ldrb	r3, [r3, #5]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f943 	bl	80081c8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2202      	movs	r2, #2
 8007f46:	761a      	strb	r2, [r3, #24]
      break;
 8007f48:	e139      	b.n	80081be <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	795b      	ldrb	r3, [r3, #5]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f005 f9cd 	bl	800d2f0 <USBH_LL_GetURBState>
 8007f56:	4603      	mov	r3, r0
 8007f58:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d11e      	bne.n	8007f9e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	7c1b      	ldrb	r3, [r3, #16]
 8007f64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f68:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	8adb      	ldrh	r3, [r3, #22]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007f72:	7b7b      	ldrb	r3, [r7, #13]
 8007f74:	2b80      	cmp	r3, #128	; 0x80
 8007f76:	d103      	bne.n	8007f80 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2203      	movs	r2, #3
 8007f7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f7e:	e115      	b.n	80081ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2205      	movs	r2, #5
 8007f84:	761a      	strb	r2, [r3, #24]
      break;
 8007f86:	e111      	b.n	80081ac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007f88:	7b7b      	ldrb	r3, [r7, #13]
 8007f8a:	2b80      	cmp	r3, #128	; 0x80
 8007f8c:	d103      	bne.n	8007f96 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2209      	movs	r2, #9
 8007f92:	761a      	strb	r2, [r3, #24]
      break;
 8007f94:	e10a      	b.n	80081ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2207      	movs	r2, #7
 8007f9a:	761a      	strb	r2, [r3, #24]
      break;
 8007f9c:	e106      	b.n	80081ac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
 8007fa0:	2b04      	cmp	r3, #4
 8007fa2:	d003      	beq.n	8007fac <USBH_HandleControl+0xcc>
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	f040 8100 	bne.w	80081ac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	220b      	movs	r2, #11
 8007fb0:	761a      	strb	r2, [r3, #24]
      break;
 8007fb2:	e0fb      	b.n	80081ac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6899      	ldr	r1, [r3, #8]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	899a      	ldrh	r2, [r3, #12]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	791b      	ldrb	r3, [r3, #4]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f93a 	bl	8008246 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2204      	movs	r2, #4
 8007fd6:	761a      	strb	r2, [r3, #24]
      break;
 8007fd8:	e0f1      	b.n	80081be <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	791b      	ldrb	r3, [r3, #4]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f005 f985 	bl	800d2f0 <USBH_LL_GetURBState>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d102      	bne.n	8007ff6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2209      	movs	r2, #9
 8007ff4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	2b05      	cmp	r3, #5
 8007ffa:	d102      	bne.n	8008002 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008000:	e0d6      	b.n	80081b0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	2b04      	cmp	r3, #4
 8008006:	f040 80d3 	bne.w	80081b0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	220b      	movs	r2, #11
 800800e:	761a      	strb	r2, [r3, #24]
      break;
 8008010:	e0ce      	b.n	80081b0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6899      	ldr	r1, [r3, #8]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	899a      	ldrh	r2, [r3, #12]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	795b      	ldrb	r3, [r3, #5]
 800801e:	2001      	movs	r0, #1
 8008020:	9000      	str	r0, [sp, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f8ea 	bl	80081fc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800802e:	b29a      	uxth	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2206      	movs	r2, #6
 8008038:	761a      	strb	r2, [r3, #24]
      break;
 800803a:	e0c0      	b.n	80081be <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	795b      	ldrb	r3, [r3, #5]
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f005 f954 	bl	800d2f0 <USBH_LL_GetURBState>
 8008048:	4603      	mov	r3, r0
 800804a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800804c:	7bbb      	ldrb	r3, [r7, #14]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d103      	bne.n	800805a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2207      	movs	r2, #7
 8008056:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008058:	e0ac      	b.n	80081b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800805a:	7bbb      	ldrb	r3, [r7, #14]
 800805c:	2b05      	cmp	r3, #5
 800805e:	d105      	bne.n	800806c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	220c      	movs	r2, #12
 8008064:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008066:	2303      	movs	r3, #3
 8008068:	73fb      	strb	r3, [r7, #15]
      break;
 800806a:	e0a3      	b.n	80081b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	2b02      	cmp	r3, #2
 8008070:	d103      	bne.n	800807a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2205      	movs	r2, #5
 8008076:	761a      	strb	r2, [r3, #24]
      break;
 8008078:	e09c      	b.n	80081b4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	2b04      	cmp	r3, #4
 800807e:	f040 8099 	bne.w	80081b4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	220b      	movs	r2, #11
 8008086:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008088:	2302      	movs	r3, #2
 800808a:	73fb      	strb	r3, [r7, #15]
      break;
 800808c:	e092      	b.n	80081b4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	791b      	ldrb	r3, [r3, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	2100      	movs	r1, #0
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f8d5 	bl	8008246 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2208      	movs	r2, #8
 80080ac:	761a      	strb	r2, [r3, #24]

      break;
 80080ae:	e086      	b.n	80081be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	791b      	ldrb	r3, [r3, #4]
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f005 f91a 	bl	800d2f0 <USBH_LL_GetURBState>
 80080bc:	4603      	mov	r3, r0
 80080be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d105      	bne.n	80080d2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	220d      	movs	r2, #13
 80080ca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080d0:	e072      	b.n	80081b8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	d103      	bne.n	80080e0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	220b      	movs	r2, #11
 80080dc:	761a      	strb	r2, [r3, #24]
      break;
 80080de:	e06b      	b.n	80081b8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	2b05      	cmp	r3, #5
 80080e4:	d168      	bne.n	80081b8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80080e6:	2303      	movs	r3, #3
 80080e8:	73fb      	strb	r3, [r7, #15]
      break;
 80080ea:	e065      	b.n	80081b8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	795b      	ldrb	r3, [r3, #5]
 80080f0:	2201      	movs	r2, #1
 80080f2:	9200      	str	r2, [sp, #0]
 80080f4:	2200      	movs	r2, #0
 80080f6:	2100      	movs	r1, #0
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f87f 	bl	80081fc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008104:	b29a      	uxth	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	220a      	movs	r2, #10
 800810e:	761a      	strb	r2, [r3, #24]
      break;
 8008110:	e055      	b.n	80081be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	795b      	ldrb	r3, [r3, #5]
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f005 f8e9 	bl	800d2f0 <USBH_LL_GetURBState>
 800811e:	4603      	mov	r3, r0
 8008120:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d105      	bne.n	8008134 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008128:	2300      	movs	r3, #0
 800812a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	220d      	movs	r2, #13
 8008130:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008132:	e043      	b.n	80081bc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008134:	7bbb      	ldrb	r3, [r7, #14]
 8008136:	2b02      	cmp	r3, #2
 8008138:	d103      	bne.n	8008142 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2209      	movs	r2, #9
 800813e:	761a      	strb	r2, [r3, #24]
      break;
 8008140:	e03c      	b.n	80081bc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008142:	7bbb      	ldrb	r3, [r7, #14]
 8008144:	2b04      	cmp	r3, #4
 8008146:	d139      	bne.n	80081bc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	220b      	movs	r2, #11
 800814c:	761a      	strb	r2, [r3, #24]
      break;
 800814e:	e035      	b.n	80081bc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	7e5b      	ldrb	r3, [r3, #25]
 8008154:	3301      	adds	r3, #1
 8008156:	b2da      	uxtb	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	765a      	strb	r2, [r3, #25]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	7e5b      	ldrb	r3, [r3, #25]
 8008160:	2b02      	cmp	r3, #2
 8008162:	d806      	bhi.n	8008172 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008170:	e025      	b.n	80081be <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008178:	2106      	movs	r1, #6
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	795b      	ldrb	r3, [r3, #5]
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f90c 	bl	80083a8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	791b      	ldrb	r3, [r3, #4]
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f906 	bl	80083a8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80081a2:	2302      	movs	r3, #2
 80081a4:	73fb      	strb	r3, [r7, #15]
      break;
 80081a6:	e00a      	b.n	80081be <USBH_HandleControl+0x2de>

    default:
      break;
 80081a8:	bf00      	nop
 80081aa:	e008      	b.n	80081be <USBH_HandleControl+0x2de>
      break;
 80081ac:	bf00      	nop
 80081ae:	e006      	b.n	80081be <USBH_HandleControl+0x2de>
      break;
 80081b0:	bf00      	nop
 80081b2:	e004      	b.n	80081be <USBH_HandleControl+0x2de>
      break;
 80081b4:	bf00      	nop
 80081b6:	e002      	b.n	80081be <USBH_HandleControl+0x2de>
      break;
 80081b8:	bf00      	nop
 80081ba:	e000      	b.n	80081be <USBH_HandleControl+0x2de>
      break;
 80081bc:	bf00      	nop
  }

  return status;
 80081be:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af04      	add	r7, sp, #16
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	4613      	mov	r3, r2
 80081d4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081d6:	79f9      	ldrb	r1, [r7, #7]
 80081d8:	2300      	movs	r3, #0
 80081da:	9303      	str	r3, [sp, #12]
 80081dc:	2308      	movs	r3, #8
 80081de:	9302      	str	r3, [sp, #8]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	9301      	str	r3, [sp, #4]
 80081e4:	2300      	movs	r3, #0
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	2300      	movs	r3, #0
 80081ea:	2200      	movs	r2, #0
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f005 f84e 	bl	800d28e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b088      	sub	sp, #32
 8008200:	af04      	add	r7, sp, #16
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	4611      	mov	r1, r2
 8008208:	461a      	mov	r2, r3
 800820a:	460b      	mov	r3, r1
 800820c:	80fb      	strh	r3, [r7, #6]
 800820e:	4613      	mov	r3, r2
 8008210:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008220:	7979      	ldrb	r1, [r7, #5]
 8008222:	7e3b      	ldrb	r3, [r7, #24]
 8008224:	9303      	str	r3, [sp, #12]
 8008226:	88fb      	ldrh	r3, [r7, #6]
 8008228:	9302      	str	r3, [sp, #8]
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	9301      	str	r3, [sp, #4]
 800822e:	2301      	movs	r3, #1
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	2300      	movs	r3, #0
 8008234:	2200      	movs	r2, #0
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f005 f829 	bl	800d28e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b088      	sub	sp, #32
 800824a:	af04      	add	r7, sp, #16
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	4611      	mov	r1, r2
 8008252:	461a      	mov	r2, r3
 8008254:	460b      	mov	r3, r1
 8008256:	80fb      	strh	r3, [r7, #6]
 8008258:	4613      	mov	r3, r2
 800825a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800825c:	7979      	ldrb	r1, [r7, #5]
 800825e:	2300      	movs	r3, #0
 8008260:	9303      	str	r3, [sp, #12]
 8008262:	88fb      	ldrh	r3, [r7, #6]
 8008264:	9302      	str	r3, [sp, #8]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	2301      	movs	r3, #1
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	2300      	movs	r3, #0
 8008270:	2201      	movs	r2, #1
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f005 f80b 	bl	800d28e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008278:	2300      	movs	r3, #0

}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b088      	sub	sp, #32
 8008286:	af04      	add	r7, sp, #16
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	60b9      	str	r1, [r7, #8]
 800828c:	4611      	mov	r1, r2
 800828e:	461a      	mov	r2, r3
 8008290:	460b      	mov	r3, r1
 8008292:	80fb      	strh	r3, [r7, #6]
 8008294:	4613      	mov	r3, r2
 8008296:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082a6:	7979      	ldrb	r1, [r7, #5]
 80082a8:	7e3b      	ldrb	r3, [r7, #24]
 80082aa:	9303      	str	r3, [sp, #12]
 80082ac:	88fb      	ldrh	r3, [r7, #6]
 80082ae:	9302      	str	r3, [sp, #8]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	9301      	str	r3, [sp, #4]
 80082b4:	2301      	movs	r3, #1
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	2302      	movs	r3, #2
 80082ba:	2200      	movs	r2, #0
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f004 ffe6 	bl	800d28e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af04      	add	r7, sp, #16
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	4611      	mov	r1, r2
 80082d8:	461a      	mov	r2, r3
 80082da:	460b      	mov	r3, r1
 80082dc:	80fb      	strh	r3, [r7, #6]
 80082de:	4613      	mov	r3, r2
 80082e0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082e2:	7979      	ldrb	r1, [r7, #5]
 80082e4:	2300      	movs	r3, #0
 80082e6:	9303      	str	r3, [sp, #12]
 80082e8:	88fb      	ldrh	r3, [r7, #6]
 80082ea:	9302      	str	r3, [sp, #8]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	2301      	movs	r3, #1
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	2302      	movs	r3, #2
 80082f6:	2201      	movs	r2, #1
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f004 ffc8 	bl	800d28e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af04      	add	r7, sp, #16
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	4608      	mov	r0, r1
 8008312:	4611      	mov	r1, r2
 8008314:	461a      	mov	r2, r3
 8008316:	4603      	mov	r3, r0
 8008318:	70fb      	strb	r3, [r7, #3]
 800831a:	460b      	mov	r3, r1
 800831c:	70bb      	strb	r3, [r7, #2]
 800831e:	4613      	mov	r3, r2
 8008320:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008322:	7878      	ldrb	r0, [r7, #1]
 8008324:	78ba      	ldrb	r2, [r7, #2]
 8008326:	78f9      	ldrb	r1, [r7, #3]
 8008328:	8b3b      	ldrh	r3, [r7, #24]
 800832a:	9302      	str	r3, [sp, #8]
 800832c:	7d3b      	ldrb	r3, [r7, #20]
 800832e:	9301      	str	r3, [sp, #4]
 8008330:	7c3b      	ldrb	r3, [r7, #16]
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	4603      	mov	r3, r0
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f004 ff5b 	bl	800d1f2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	460b      	mov	r3, r1
 8008350:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008352:	78fb      	ldrb	r3, [r7, #3]
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f004 ff7a 	bl	800d250 <USBH_LL_ClosePipe>

  return USBH_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	460b      	mov	r3, r1
 8008370:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f836 	bl	80083e4 <USBH_GetFreePipe>
 8008378:	4603      	mov	r3, r0
 800837a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800837c:	89fb      	ldrh	r3, [r7, #14]
 800837e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008382:	4293      	cmp	r3, r2
 8008384:	d00a      	beq.n	800839c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008386:	78fa      	ldrb	r2, [r7, #3]
 8008388:	89fb      	ldrh	r3, [r7, #14]
 800838a:	f003 030f 	and.w	r3, r3, #15
 800838e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008392:	6879      	ldr	r1, [r7, #4]
 8008394:	33e0      	adds	r3, #224	; 0xe0
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	440b      	add	r3, r1
 800839a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800839c:	89fb      	ldrh	r3, [r7, #14]
 800839e:	b2db      	uxtb	r3, r3
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80083b4:	78fb      	ldrb	r3, [r7, #3]
 80083b6:	2b0f      	cmp	r3, #15
 80083b8:	d80d      	bhi.n	80083d6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80083ba:	78fb      	ldrb	r3, [r7, #3]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	33e0      	adds	r3, #224	; 0xe0
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	78fb      	ldrb	r3, [r7, #3]
 80083c8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	33e0      	adds	r3, #224	; 0xe0
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	440b      	add	r3, r1
 80083d4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80083f0:	2300      	movs	r3, #0
 80083f2:	73fb      	strb	r3, [r7, #15]
 80083f4:	e00f      	b.n	8008416 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	33e0      	adds	r3, #224	; 0xe0
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d102      	bne.n	8008410 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800840a:	7bfb      	ldrb	r3, [r7, #15]
 800840c:	b29b      	uxth	r3, r3
 800840e:	e007      	b.n	8008420 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008410:	7bfb      	ldrb	r3, [r7, #15]
 8008412:	3301      	adds	r3, #1
 8008414:	73fb      	strb	r3, [r7, #15]
 8008416:	7bfb      	ldrb	r3, [r7, #15]
 8008418:	2b0f      	cmp	r3, #15
 800841a:	d9ec      	bls.n	80083f6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800841c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008420:	4618      	mov	r0, r3
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	4a08      	ldr	r2, [pc, #32]	; (800845c <disk_status+0x30>)
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	79fa      	ldrb	r2, [r7, #7]
 8008444:	4905      	ldr	r1, [pc, #20]	; (800845c <disk_status+0x30>)
 8008446:	440a      	add	r2, r1
 8008448:	7a12      	ldrb	r2, [r2, #8]
 800844a:	4610      	mov	r0, r2
 800844c:	4798      	blx	r3
 800844e:	4603      	mov	r3, r0
 8008450:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	2000367c 	.word	0x2000367c

08008460 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800846e:	79fb      	ldrb	r3, [r7, #7]
 8008470:	4a0d      	ldr	r2, [pc, #52]	; (80084a8 <disk_initialize+0x48>)
 8008472:	5cd3      	ldrb	r3, [r2, r3]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d111      	bne.n	800849c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008478:	79fb      	ldrb	r3, [r7, #7]
 800847a:	4a0b      	ldr	r2, [pc, #44]	; (80084a8 <disk_initialize+0x48>)
 800847c:	2101      	movs	r1, #1
 800847e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008480:	79fb      	ldrb	r3, [r7, #7]
 8008482:	4a09      	ldr	r2, [pc, #36]	; (80084a8 <disk_initialize+0x48>)
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	79fa      	ldrb	r2, [r7, #7]
 800848e:	4906      	ldr	r1, [pc, #24]	; (80084a8 <disk_initialize+0x48>)
 8008490:	440a      	add	r2, r1
 8008492:	7a12      	ldrb	r2, [r2, #8]
 8008494:	4610      	mov	r0, r2
 8008496:	4798      	blx	r3
 8008498:	4603      	mov	r3, r0
 800849a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800849c:	7bfb      	ldrb	r3, [r7, #15]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	2000367c 	.word	0x2000367c

080084ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80084ac:	b590      	push	{r4, r7, lr}
 80084ae:	b087      	sub	sp, #28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	607a      	str	r2, [r7, #4]
 80084b6:	603b      	str	r3, [r7, #0]
 80084b8:	4603      	mov	r3, r0
 80084ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	4a0a      	ldr	r2, [pc, #40]	; (80084e8 <disk_read+0x3c>)
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	689c      	ldr	r4, [r3, #8]
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
 80084ca:	4a07      	ldr	r2, [pc, #28]	; (80084e8 <disk_read+0x3c>)
 80084cc:	4413      	add	r3, r2
 80084ce:	7a18      	ldrb	r0, [r3, #8]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	68b9      	ldr	r1, [r7, #8]
 80084d6:	47a0      	blx	r4
 80084d8:	4603      	mov	r3, r0
 80084da:	75fb      	strb	r3, [r7, #23]
  return res;
 80084dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	371c      	adds	r7, #28
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd90      	pop	{r4, r7, pc}
 80084e6:	bf00      	nop
 80084e8:	2000367c 	.word	0x2000367c

080084ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80084ec:	b590      	push	{r4, r7, lr}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60b9      	str	r1, [r7, #8]
 80084f4:	607a      	str	r2, [r7, #4]
 80084f6:	603b      	str	r3, [r7, #0]
 80084f8:	4603      	mov	r3, r0
 80084fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	4a0a      	ldr	r2, [pc, #40]	; (8008528 <disk_write+0x3c>)
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	68dc      	ldr	r4, [r3, #12]
 8008508:	7bfb      	ldrb	r3, [r7, #15]
 800850a:	4a07      	ldr	r2, [pc, #28]	; (8008528 <disk_write+0x3c>)
 800850c:	4413      	add	r3, r2
 800850e:	7a18      	ldrb	r0, [r3, #8]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	68b9      	ldr	r1, [r7, #8]
 8008516:	47a0      	blx	r4
 8008518:	4603      	mov	r3, r0
 800851a:	75fb      	strb	r3, [r7, #23]
  return res;
 800851c:	7dfb      	ldrb	r3, [r7, #23]
}
 800851e:	4618      	mov	r0, r3
 8008520:	371c      	adds	r7, #28
 8008522:	46bd      	mov	sp, r7
 8008524:	bd90      	pop	{r4, r7, pc}
 8008526:	bf00      	nop
 8008528:	2000367c 	.word	0x2000367c

0800852c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	4603      	mov	r3, r0
 8008534:	603a      	str	r2, [r7, #0]
 8008536:	71fb      	strb	r3, [r7, #7]
 8008538:	460b      	mov	r3, r1
 800853a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800853c:	79fb      	ldrb	r3, [r7, #7]
 800853e:	4a09      	ldr	r2, [pc, #36]	; (8008564 <disk_ioctl+0x38>)
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	79fa      	ldrb	r2, [r7, #7]
 800854a:	4906      	ldr	r1, [pc, #24]	; (8008564 <disk_ioctl+0x38>)
 800854c:	440a      	add	r2, r1
 800854e:	7a10      	ldrb	r0, [r2, #8]
 8008550:	79b9      	ldrb	r1, [r7, #6]
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	4798      	blx	r3
 8008556:	4603      	mov	r3, r0
 8008558:	73fb      	strb	r3, [r7, #15]
  return res;
 800855a:	7bfb      	ldrb	r3, [r7, #15]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	2000367c 	.word	0x2000367c

08008568 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3301      	adds	r3, #1
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008578:	89fb      	ldrh	r3, [r7, #14]
 800857a:	021b      	lsls	r3, r3, #8
 800857c:	b21a      	sxth	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	b21b      	sxth	r3, r3
 8008584:	4313      	orrs	r3, r2
 8008586:	b21b      	sxth	r3, r3
 8008588:	81fb      	strh	r3, [r7, #14]
	return rv;
 800858a:	89fb      	ldrh	r3, [r7, #14]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3303      	adds	r3, #3
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	021b      	lsls	r3, r3, #8
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	3202      	adds	r2, #2
 80085b0:	7812      	ldrb	r2, [r2, #0]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	021b      	lsls	r3, r3, #8
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	3201      	adds	r2, #1
 80085be:	7812      	ldrb	r2, [r2, #0]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	021b      	lsls	r3, r3, #8
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	7812      	ldrb	r2, [r2, #0]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	60fb      	str	r3, [r7, #12]
	return rv;
 80085d0:	68fb      	ldr	r3, [r7, #12]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80085de:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80085e2:	b09d      	sub	sp, #116	; 0x74
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 80085e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085ea:	3307      	adds	r3, #7
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2200      	movs	r2, #0
 80085f2:	469a      	mov	sl, r3
 80085f4:	4693      	mov	fp, r2
 80085f6:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 80085fa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80085fe:	f04f 0000 	mov.w	r0, #0
 8008602:	f04f 0100 	mov.w	r1, #0
 8008606:	0219      	lsls	r1, r3, #8
 8008608:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800860c:	0210      	lsls	r0, r2, #8
 800860e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008610:	3306      	adds	r3, #6
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2200      	movs	r2, #0
 8008618:	461c      	mov	r4, r3
 800861a:	4615      	mov	r5, r2
 800861c:	ea40 0804 	orr.w	r8, r0, r4
 8008620:	ea41 0905 	orr.w	r9, r1, r5
 8008624:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 8008628:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800862c:	f04f 0000 	mov.w	r0, #0
 8008630:	f04f 0100 	mov.w	r1, #0
 8008634:	0219      	lsls	r1, r3, #8
 8008636:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800863a:	0210      	lsls	r0, r2, #8
 800863c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800863e:	3305      	adds	r3, #5
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2200      	movs	r2, #0
 8008646:	65bb      	str	r3, [r7, #88]	; 0x58
 8008648:	65fa      	str	r2, [r7, #92]	; 0x5c
 800864a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800864e:	4623      	mov	r3, r4
 8008650:	4303      	orrs	r3, r0
 8008652:	62bb      	str	r3, [r7, #40]	; 0x28
 8008654:	462b      	mov	r3, r5
 8008656:	430b      	orrs	r3, r1
 8008658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800865a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800865e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 8008662:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008666:	f04f 0000 	mov.w	r0, #0
 800866a:	f04f 0100 	mov.w	r1, #0
 800866e:	0219      	lsls	r1, r3, #8
 8008670:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008674:	0210      	lsls	r0, r2, #8
 8008676:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008678:	3304      	adds	r3, #4
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2200      	movs	r2, #0
 8008680:	653b      	str	r3, [r7, #80]	; 0x50
 8008682:	657a      	str	r2, [r7, #84]	; 0x54
 8008684:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8008688:	4623      	mov	r3, r4
 800868a:	4303      	orrs	r3, r0
 800868c:	623b      	str	r3, [r7, #32]
 800868e:	462b      	mov	r3, r5
 8008690:	430b      	orrs	r3, r1
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
 8008694:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008698:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800869c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80086a0:	f04f 0000 	mov.w	r0, #0
 80086a4:	f04f 0100 	mov.w	r1, #0
 80086a8:	0219      	lsls	r1, r3, #8
 80086aa:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80086ae:	0210      	lsls	r0, r2, #8
 80086b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086b2:	3303      	adds	r3, #3
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2200      	movs	r2, #0
 80086ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80086bc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80086be:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80086c2:	4623      	mov	r3, r4
 80086c4:	4303      	orrs	r3, r0
 80086c6:	61bb      	str	r3, [r7, #24]
 80086c8:	462b      	mov	r3, r5
 80086ca:	430b      	orrs	r3, r1
 80086cc:	61fb      	str	r3, [r7, #28]
 80086ce:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80086d2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 80086d6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80086da:	f04f 0000 	mov.w	r0, #0
 80086de:	f04f 0100 	mov.w	r1, #0
 80086e2:	0219      	lsls	r1, r3, #8
 80086e4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80086e8:	0210      	lsls	r0, r2, #8
 80086ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086ec:	3302      	adds	r3, #2
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2200      	movs	r2, #0
 80086f4:	643b      	str	r3, [r7, #64]	; 0x40
 80086f6:	647a      	str	r2, [r7, #68]	; 0x44
 80086f8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80086fc:	4623      	mov	r3, r4
 80086fe:	4303      	orrs	r3, r0
 8008700:	613b      	str	r3, [r7, #16]
 8008702:	462b      	mov	r3, r5
 8008704:	430b      	orrs	r3, r1
 8008706:	617b      	str	r3, [r7, #20]
 8008708:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800870c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 8008710:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008714:	f04f 0200 	mov.w	r2, #0
 8008718:	f04f 0300 	mov.w	r3, #0
 800871c:	020b      	lsls	r3, r1, #8
 800871e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008722:	0202      	lsls	r2, r0, #8
 8008724:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008726:	3101      	adds	r1, #1
 8008728:	7809      	ldrb	r1, [r1, #0]
 800872a:	b2c9      	uxtb	r1, r1
 800872c:	2000      	movs	r0, #0
 800872e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008730:	63f8      	str	r0, [r7, #60]	; 0x3c
 8008732:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8008736:	4621      	mov	r1, r4
 8008738:	4311      	orrs	r1, r2
 800873a:	60b9      	str	r1, [r7, #8]
 800873c:	4629      	mov	r1, r5
 800873e:	4319      	orrs	r1, r3
 8008740:	60f9      	str	r1, [r7, #12]
 8008742:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008746:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800874a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800874e:	f04f 0200 	mov.w	r2, #0
 8008752:	f04f 0300 	mov.w	r3, #0
 8008756:	020b      	lsls	r3, r1, #8
 8008758:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800875c:	0202      	lsls	r2, r0, #8
 800875e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008760:	7809      	ldrb	r1, [r1, #0]
 8008762:	b2c9      	uxtb	r1, r1
 8008764:	2000      	movs	r0, #0
 8008766:	6339      	str	r1, [r7, #48]	; 0x30
 8008768:	6378      	str	r0, [r7, #52]	; 0x34
 800876a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800876e:	4621      	mov	r1, r4
 8008770:	4311      	orrs	r1, r2
 8008772:	6039      	str	r1, [r7, #0]
 8008774:	4629      	mov	r1, r5
 8008776:	4319      	orrs	r1, r3
 8008778:	6079      	str	r1, [r7, #4]
 800877a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800877e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 8008782:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 8008786:	4610      	mov	r0, r2
 8008788:	4619      	mov	r1, r3
 800878a:	3774      	adds	r7, #116	; 0x74
 800878c:	46bd      	mov	sp, r7
 800878e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008792:	4770      	bx	lr

08008794 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	460b      	mov	r3, r1
 800879e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	1c5a      	adds	r2, r3, #1
 80087a4:	607a      	str	r2, [r7, #4]
 80087a6:	887a      	ldrh	r2, [r7, #2]
 80087a8:	b2d2      	uxtb	r2, r2
 80087aa:	701a      	strb	r2, [r3, #0]
 80087ac:	887b      	ldrh	r3, [r7, #2]
 80087ae:	0a1b      	lsrs	r3, r3, #8
 80087b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	1c5a      	adds	r2, r3, #1
 80087b6:	607a      	str	r2, [r7, #4]
 80087b8:	887a      	ldrh	r2, [r7, #2]
 80087ba:	b2d2      	uxtb	r2, r2
 80087bc:	701a      	strb	r2, [r3, #0]
}
 80087be:	bf00      	nop
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	1c5a      	adds	r2, r3, #1
 80087d8:	607a      	str	r2, [r7, #4]
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	b2d2      	uxtb	r2, r2
 80087de:	701a      	strb	r2, [r3, #0]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	0a1b      	lsrs	r3, r3, #8
 80087e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	607a      	str	r2, [r7, #4]
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	b2d2      	uxtb	r2, r2
 80087f0:	701a      	strb	r2, [r3, #0]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	0a1b      	lsrs	r3, r3, #8
 80087f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	1c5a      	adds	r2, r3, #1
 80087fc:	607a      	str	r2, [r7, #4]
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	b2d2      	uxtb	r2, r2
 8008802:	701a      	strb	r2, [r3, #0]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	0a1b      	lsrs	r3, r3, #8
 8008808:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	1c5a      	adds	r2, r3, #1
 800880e:	607a      	str	r2, [r7, #4]
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	b2d2      	uxtb	r2, r2
 8008814:	701a      	strb	r2, [r3, #0]
}
 8008816:	bf00      	nop
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8008822:	b480      	push	{r7}
 8008824:	b085      	sub	sp, #20
 8008826:	af00      	add	r7, sp, #0
 8008828:	60f8      	str	r0, [r7, #12]
 800882a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	60fa      	str	r2, [r7, #12]
 8008834:	783a      	ldrb	r2, [r7, #0]
 8008836:	701a      	strb	r2, [r3, #0]
 8008838:	e9d7 0100 	ldrd	r0, r1, [r7]
 800883c:	f04f 0200 	mov.w	r2, #0
 8008840:	f04f 0300 	mov.w	r3, #0
 8008844:	0a02      	lsrs	r2, r0, #8
 8008846:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800884a:	0a0b      	lsrs	r3, r1, #8
 800884c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	1c5a      	adds	r2, r3, #1
 8008854:	60fa      	str	r2, [r7, #12]
 8008856:	783a      	ldrb	r2, [r7, #0]
 8008858:	701a      	strb	r2, [r3, #0]
 800885a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800885e:	f04f 0200 	mov.w	r2, #0
 8008862:	f04f 0300 	mov.w	r3, #0
 8008866:	0a02      	lsrs	r2, r0, #8
 8008868:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800886c:	0a0b      	lsrs	r3, r1, #8
 800886e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	1c5a      	adds	r2, r3, #1
 8008876:	60fa      	str	r2, [r7, #12]
 8008878:	783a      	ldrb	r2, [r7, #0]
 800887a:	701a      	strb	r2, [r3, #0]
 800887c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008880:	f04f 0200 	mov.w	r2, #0
 8008884:	f04f 0300 	mov.w	r3, #0
 8008888:	0a02      	lsrs	r2, r0, #8
 800888a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800888e:	0a0b      	lsrs	r3, r1, #8
 8008890:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	1c5a      	adds	r2, r3, #1
 8008898:	60fa      	str	r2, [r7, #12]
 800889a:	783a      	ldrb	r2, [r7, #0]
 800889c:	701a      	strb	r2, [r3, #0]
 800889e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088a2:	f04f 0200 	mov.w	r2, #0
 80088a6:	f04f 0300 	mov.w	r3, #0
 80088aa:	0a02      	lsrs	r2, r0, #8
 80088ac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80088b0:	0a0b      	lsrs	r3, r1, #8
 80088b2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	1c5a      	adds	r2, r3, #1
 80088ba:	60fa      	str	r2, [r7, #12]
 80088bc:	783a      	ldrb	r2, [r7, #0]
 80088be:	701a      	strb	r2, [r3, #0]
 80088c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088c4:	f04f 0200 	mov.w	r2, #0
 80088c8:	f04f 0300 	mov.w	r3, #0
 80088cc:	0a02      	lsrs	r2, r0, #8
 80088ce:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80088d2:	0a0b      	lsrs	r3, r1, #8
 80088d4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	1c5a      	adds	r2, r3, #1
 80088dc:	60fa      	str	r2, [r7, #12]
 80088de:	783a      	ldrb	r2, [r7, #0]
 80088e0:	701a      	strb	r2, [r3, #0]
 80088e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088e6:	f04f 0200 	mov.w	r2, #0
 80088ea:	f04f 0300 	mov.w	r3, #0
 80088ee:	0a02      	lsrs	r2, r0, #8
 80088f0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80088f4:	0a0b      	lsrs	r3, r1, #8
 80088f6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	60fa      	str	r2, [r7, #12]
 8008900:	783a      	ldrb	r2, [r7, #0]
 8008902:	701a      	strb	r2, [r3, #0]
 8008904:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008908:	f04f 0200 	mov.w	r2, #0
 800890c:	f04f 0300 	mov.w	r3, #0
 8008910:	0a02      	lsrs	r2, r0, #8
 8008912:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008916:	0a0b      	lsrs	r3, r1, #8
 8008918:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	1c5a      	adds	r2, r3, #1
 8008920:	60fa      	str	r2, [r7, #12]
 8008922:	783a      	ldrb	r2, [r7, #0]
 8008924:	701a      	strb	r2, [r3, #0]
}
 8008926:	bf00      	nop
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008932:	b480      	push	{r7}
 8008934:	b087      	sub	sp, #28
 8008936:	af00      	add	r7, sp, #0
 8008938:	60f8      	str	r0, [r7, #12]
 800893a:	60b9      	str	r1, [r7, #8]
 800893c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00d      	beq.n	8008968 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	1c53      	adds	r3, r2, #1
 8008950:	613b      	str	r3, [r7, #16]
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	1c59      	adds	r1, r3, #1
 8008956:	6179      	str	r1, [r7, #20]
 8008958:	7812      	ldrb	r2, [r2, #0]
 800895a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	3b01      	subs	r3, #1
 8008960:	607b      	str	r3, [r7, #4]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1f1      	bne.n	800894c <mem_cpy+0x1a>
	}
}
 8008968:	bf00      	nop
 800896a:	371c      	adds	r7, #28
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	617a      	str	r2, [r7, #20]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	b2d2      	uxtb	r2, r2
 800898e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	3b01      	subs	r3, #1
 8008994:	607b      	str	r3, [r7, #4]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1f3      	bne.n	8008984 <mem_set+0x10>
}
 800899c:	bf00      	nop
 800899e:	bf00      	nop
 80089a0:	371c      	adds	r7, #28
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80089aa:	b480      	push	{r7}
 80089ac:	b089      	sub	sp, #36	; 0x24
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	61fb      	str	r3, [r7, #28]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	1c5a      	adds	r2, r3, #1
 80089c6:	61fa      	str	r2, [r7, #28]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	4619      	mov	r1, r3
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	1c5a      	adds	r2, r3, #1
 80089d0:	61ba      	str	r2, [r7, #24]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	1acb      	subs	r3, r1, r3
 80089d6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3b01      	subs	r3, #1
 80089dc:	607b      	str	r3, [r7, #4]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d002      	beq.n	80089ea <mem_cmp+0x40>
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0eb      	beq.n	80089c2 <mem_cmp+0x18>

	return r;
 80089ea:	697b      	ldr	r3, [r7, #20]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3724      	adds	r7, #36	; 0x24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008a02:	e002      	b.n	8008a0a <chk_chr+0x12>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	3301      	adds	r3, #1
 8008a08:	607b      	str	r3, [r7, #4]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d005      	beq.n	8008a1e <chk_chr+0x26>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	461a      	mov	r2, r3
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d1f2      	bne.n	8008a04 <chk_chr+0xc>
	return *str;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	781b      	ldrb	r3, [r3, #0]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
	...

08008a30 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	60bb      	str	r3, [r7, #8]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	e029      	b.n	8008a98 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008a44:	4a27      	ldr	r2, [pc, #156]	; (8008ae4 <chk_lock+0xb4>)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	011b      	lsls	r3, r3, #4
 8008a4a:	4413      	add	r3, r2
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d01d      	beq.n	8008a8e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008a52:	4a24      	ldr	r2, [pc, #144]	; (8008ae4 <chk_lock+0xb4>)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	011b      	lsls	r3, r3, #4
 8008a58:	4413      	add	r3, r2
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d116      	bne.n	8008a92 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008a64:	4a1f      	ldr	r2, [pc, #124]	; (8008ae4 <chk_lock+0xb4>)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	011b      	lsls	r3, r3, #4
 8008a6a:	4413      	add	r3, r2
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d10c      	bne.n	8008a92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008a78:	4a1a      	ldr	r2, [pc, #104]	; (8008ae4 <chk_lock+0xb4>)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	011b      	lsls	r3, r3, #4
 8008a7e:	4413      	add	r3, r2
 8008a80:	3308      	adds	r3, #8
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d102      	bne.n	8008a92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008a8c:	e007      	b.n	8008a9e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	3301      	adds	r3, #1
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d9d2      	bls.n	8008a44 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d109      	bne.n	8008ab8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d102      	bne.n	8008ab0 <chk_lock+0x80>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d101      	bne.n	8008ab4 <chk_lock+0x84>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	e010      	b.n	8008ad6 <chk_lock+0xa6>
 8008ab4:	2312      	movs	r3, #18
 8008ab6:	e00e      	b.n	8008ad6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d108      	bne.n	8008ad0 <chk_lock+0xa0>
 8008abe:	4a09      	ldr	r2, [pc, #36]	; (8008ae4 <chk_lock+0xb4>)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	011b      	lsls	r3, r3, #4
 8008ac4:	4413      	add	r3, r2
 8008ac6:	330c      	adds	r3, #12
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ace:	d101      	bne.n	8008ad4 <chk_lock+0xa4>
 8008ad0:	2310      	movs	r3, #16
 8008ad2:	e000      	b.n	8008ad6 <chk_lock+0xa6>
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	200031fc 	.word	0x200031fc

08008ae8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008aee:	2300      	movs	r3, #0
 8008af0:	607b      	str	r3, [r7, #4]
 8008af2:	e002      	b.n	8008afa <enq_lock+0x12>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3301      	adds	r3, #1
 8008af8:	607b      	str	r3, [r7, #4]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d806      	bhi.n	8008b0e <enq_lock+0x26>
 8008b00:	4a09      	ldr	r2, [pc, #36]	; (8008b28 <enq_lock+0x40>)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	011b      	lsls	r3, r3, #4
 8008b06:	4413      	add	r3, r2
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1f2      	bne.n	8008af4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	bf14      	ite	ne
 8008b14:	2301      	movne	r3, #1
 8008b16:	2300      	moveq	r3, #0
 8008b18:	b2db      	uxtb	r3, r3
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	200031fc 	.word	0x200031fc

08008b2c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008b36:	2300      	movs	r3, #0
 8008b38:	60fb      	str	r3, [r7, #12]
 8008b3a:	e01f      	b.n	8008b7c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008b3c:	4a41      	ldr	r2, [pc, #260]	; (8008c44 <inc_lock+0x118>)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	011b      	lsls	r3, r3, #4
 8008b42:	4413      	add	r3, r2
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d113      	bne.n	8008b76 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008b4e:	4a3d      	ldr	r2, [pc, #244]	; (8008c44 <inc_lock+0x118>)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	011b      	lsls	r3, r3, #4
 8008b54:	4413      	add	r3, r2
 8008b56:	3304      	adds	r3, #4
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d109      	bne.n	8008b76 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008b62:	4a38      	ldr	r2, [pc, #224]	; (8008c44 <inc_lock+0x118>)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	011b      	lsls	r3, r3, #4
 8008b68:	4413      	add	r3, r2
 8008b6a:	3308      	adds	r3, #8
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d006      	beq.n	8008b84 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	60fb      	str	r3, [r7, #12]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d9dc      	bls.n	8008b3c <inc_lock+0x10>
 8008b82:	e000      	b.n	8008b86 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008b84:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d132      	bne.n	8008bf2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	60fb      	str	r3, [r7, #12]
 8008b90:	e002      	b.n	8008b98 <inc_lock+0x6c>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	3301      	adds	r3, #1
 8008b96:	60fb      	str	r3, [r7, #12]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d806      	bhi.n	8008bac <inc_lock+0x80>
 8008b9e:	4a29      	ldr	r2, [pc, #164]	; (8008c44 <inc_lock+0x118>)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	011b      	lsls	r3, r3, #4
 8008ba4:	4413      	add	r3, r2
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1f2      	bne.n	8008b92 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d101      	bne.n	8008bb6 <inc_lock+0x8a>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	e040      	b.n	8008c38 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	4922      	ldr	r1, [pc, #136]	; (8008c44 <inc_lock+0x118>)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	011b      	lsls	r3, r3, #4
 8008bc0:	440b      	add	r3, r1
 8008bc2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	689a      	ldr	r2, [r3, #8]
 8008bc8:	491e      	ldr	r1, [pc, #120]	; (8008c44 <inc_lock+0x118>)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	011b      	lsls	r3, r3, #4
 8008bce:	440b      	add	r3, r1
 8008bd0:	3304      	adds	r3, #4
 8008bd2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bd8:	491a      	ldr	r1, [pc, #104]	; (8008c44 <inc_lock+0x118>)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	011b      	lsls	r3, r3, #4
 8008bde:	440b      	add	r3, r1
 8008be0:	3308      	adds	r3, #8
 8008be2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008be4:	4a17      	ldr	r2, [pc, #92]	; (8008c44 <inc_lock+0x118>)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	011b      	lsls	r3, r3, #4
 8008bea:	4413      	add	r3, r2
 8008bec:	330c      	adds	r3, #12
 8008bee:	2200      	movs	r2, #0
 8008bf0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d009      	beq.n	8008c0c <inc_lock+0xe0>
 8008bf8:	4a12      	ldr	r2, [pc, #72]	; (8008c44 <inc_lock+0x118>)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	011b      	lsls	r3, r3, #4
 8008bfe:	4413      	add	r3, r2
 8008c00:	330c      	adds	r3, #12
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <inc_lock+0xe0>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	e015      	b.n	8008c38 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d108      	bne.n	8008c24 <inc_lock+0xf8>
 8008c12:	4a0c      	ldr	r2, [pc, #48]	; (8008c44 <inc_lock+0x118>)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	011b      	lsls	r3, r3, #4
 8008c18:	4413      	add	r3, r2
 8008c1a:	330c      	adds	r3, #12
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	e001      	b.n	8008c28 <inc_lock+0xfc>
 8008c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c28:	4906      	ldr	r1, [pc, #24]	; (8008c44 <inc_lock+0x118>)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	011b      	lsls	r3, r3, #4
 8008c2e:	440b      	add	r3, r1
 8008c30:	330c      	adds	r3, #12
 8008c32:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	3301      	adds	r3, #1
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	200031fc 	.word	0x200031fc

08008c48 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	3b01      	subs	r3, #1
 8008c54:	607b      	str	r3, [r7, #4]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d825      	bhi.n	8008ca8 <dec_lock+0x60>
		n = Files[i].ctr;
 8008c5c:	4a17      	ldr	r2, [pc, #92]	; (8008cbc <dec_lock+0x74>)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	011b      	lsls	r3, r3, #4
 8008c62:	4413      	add	r3, r2
 8008c64:	330c      	adds	r3, #12
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008c6a:	89fb      	ldrh	r3, [r7, #14]
 8008c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c70:	d101      	bne.n	8008c76 <dec_lock+0x2e>
 8008c72:	2300      	movs	r3, #0
 8008c74:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008c76:	89fb      	ldrh	r3, [r7, #14]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <dec_lock+0x3a>
 8008c7c:	89fb      	ldrh	r3, [r7, #14]
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008c82:	4a0e      	ldr	r2, [pc, #56]	; (8008cbc <dec_lock+0x74>)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	011b      	lsls	r3, r3, #4
 8008c88:	4413      	add	r3, r2
 8008c8a:	330c      	adds	r3, #12
 8008c8c:	89fa      	ldrh	r2, [r7, #14]
 8008c8e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008c90:	89fb      	ldrh	r3, [r7, #14]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d105      	bne.n	8008ca2 <dec_lock+0x5a>
 8008c96:	4a09      	ldr	r2, [pc, #36]	; (8008cbc <dec_lock+0x74>)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	011b      	lsls	r3, r3, #4
 8008c9c:	4413      	add	r3, r2
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	737b      	strb	r3, [r7, #13]
 8008ca6:	e001      	b.n	8008cac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008ca8:	2302      	movs	r3, #2
 8008caa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008cac:	7b7b      	ldrb	r3, [r7, #13]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	200031fc 	.word	0x200031fc

08008cc0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008cc8:	2300      	movs	r3, #0
 8008cca:	60fb      	str	r3, [r7, #12]
 8008ccc:	e010      	b.n	8008cf0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008cce:	4a0d      	ldr	r2, [pc, #52]	; (8008d04 <clear_lock+0x44>)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	011b      	lsls	r3, r3, #4
 8008cd4:	4413      	add	r3, r2
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d105      	bne.n	8008cea <clear_lock+0x2a>
 8008cde:	4a09      	ldr	r2, [pc, #36]	; (8008d04 <clear_lock+0x44>)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	011b      	lsls	r3, r3, #4
 8008ce4:	4413      	add	r3, r2
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	3301      	adds	r3, #1
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d9eb      	bls.n	8008cce <clear_lock+0xe>
	}
}
 8008cf6:	bf00      	nop
 8008cf8:	bf00      	nop
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr
 8008d04:	200031fc 	.word	0x200031fc

08008d08 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	78db      	ldrb	r3, [r3, #3]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d034      	beq.n	8008d86 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d20:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	7858      	ldrb	r0, [r3, #1]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	f7ff fbdc 	bl	80084ec <disk_write>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d002      	beq.n	8008d40 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	73fb      	strb	r3, [r7, #15]
 8008d3e:	e022      	b.n	8008d86 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	1ad2      	subs	r2, r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d217      	bcs.n	8008d86 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	789b      	ldrb	r3, [r3, #2]
 8008d5a:	613b      	str	r3, [r7, #16]
 8008d5c:	e010      	b.n	8008d80 <sync_window+0x78>
					wsect += fs->fsize;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	4413      	add	r3, r2
 8008d66:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	7858      	ldrb	r0, [r3, #1]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008d72:	2301      	movs	r3, #1
 8008d74:	697a      	ldr	r2, [r7, #20]
 8008d76:	f7ff fbb9 	bl	80084ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	613b      	str	r3, [r7, #16]
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d8eb      	bhi.n	8008d5e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d01b      	beq.n	8008de0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7ff ffad 	bl	8008d08 <sync_window>
 8008dae:	4603      	mov	r3, r0
 8008db0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d113      	bne.n	8008de0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	7858      	ldrb	r0, [r3, #1]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	f7ff fb71 	bl	80084ac <disk_read>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d004      	beq.n	8008dda <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008dd4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7ff ff87 	bl	8008d08 <sync_window>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d159      	bne.n	8008eb8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d149      	bne.n	8008ea0 <sync_fs+0xb4>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	791b      	ldrb	r3, [r3, #4]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d145      	bne.n	8008ea0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	899b      	ldrh	r3, [r3, #12]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	2100      	movs	r1, #0
 8008e22:	f7ff fda7 	bl	8008974 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	333c      	adds	r3, #60	; 0x3c
 8008e2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008e2e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7ff fcae 	bl	8008794 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	333c      	adds	r3, #60	; 0x3c
 8008e3c:	4921      	ldr	r1, [pc, #132]	; (8008ec4 <sync_fs+0xd8>)
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff fcc3 	bl	80087ca <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	333c      	adds	r3, #60	; 0x3c
 8008e48:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008e4c:	491e      	ldr	r1, [pc, #120]	; (8008ec8 <sync_fs+0xdc>)
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7ff fcbb 	bl	80087ca <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	333c      	adds	r3, #60	; 0x3c
 8008e58:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	69db      	ldr	r3, [r3, #28]
 8008e60:	4619      	mov	r1, r3
 8008e62:	4610      	mov	r0, r2
 8008e64:	f7ff fcb1 	bl	80087ca <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	333c      	adds	r3, #60	; 0x3c
 8008e6c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	4619      	mov	r1, r3
 8008e76:	4610      	mov	r0, r2
 8008e78:	f7ff fca7 	bl	80087ca <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	7858      	ldrb	r0, [r3, #1]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e94:	2301      	movs	r3, #1
 8008e96:	f7ff fb29 	bl	80084ec <disk_write>
			fs->fsi_flag = 0;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	785b      	ldrb	r3, [r3, #1]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7ff fb3f 	bl	800852c <disk_ioctl>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <sync_fs+0xcc>
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	41615252 	.word	0x41615252
 8008ec8:	61417272 	.word	0x61417272

08008ecc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	3b02      	subs	r3, #2
 8008eda:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a1b      	ldr	r3, [r3, #32]
 8008ee0:	3b02      	subs	r3, #2
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d301      	bcc.n	8008eec <clust2sect+0x20>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	e008      	b.n	8008efe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	895b      	ldrh	r3, [r3, #10]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	fb03 f202 	mul.w	r2, r3, r2
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008efc:	4413      	add	r3, r2
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
	...

08008f0c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008f0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008f10:	b088      	sub	sp, #32
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d904      	bls.n	8008f2e <get_fat+0x22>
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	6a1b      	ldr	r3, [r3, #32]
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d302      	bcc.n	8008f34 <get_fat+0x28>
		val = 1;	/* Internal error */
 8008f2e:	2301      	movs	r3, #1
 8008f30:	61fb      	str	r3, [r7, #28]
 8008f32:	e13a      	b.n	80091aa <get_fat+0x29e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008f34:	f04f 33ff 	mov.w	r3, #4294967295
 8008f38:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	2b03      	cmp	r3, #3
 8008f42:	f200 8126 	bhi.w	8009192 <get_fat+0x286>
 8008f46:	a201      	add	r2, pc, #4	; (adr r2, 8008f4c <get_fat+0x40>)
 8008f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4c:	08008f5d 	.word	0x08008f5d
 8008f50:	0800900b 	.word	0x0800900b
 8008f54:	08009057 	.word	0x08009057
 8008f58:	080090a7 	.word	0x080090a7
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	60fb      	str	r3, [r7, #12]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	085b      	lsrs	r3, r3, #1
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	4413      	add	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	899b      	ldrh	r3, [r3, #12]
 8008f72:	4619      	mov	r1, r3
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f7a:	4413      	add	r3, r2
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	69b8      	ldr	r0, [r7, #24]
 8008f80:	f7ff ff06 	bl	8008d90 <move_window>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f040 8106 	bne.w	8009198 <get_fat+0x28c>
			wc = fs->win[bc++ % SS(fs)];
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	1c5a      	adds	r2, r3, #1
 8008f90:	60fa      	str	r2, [r7, #12]
 8008f92:	69ba      	ldr	r2, [r7, #24]
 8008f94:	8992      	ldrh	r2, [r2, #12]
 8008f96:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f9a:	fb01 f202 	mul.w	r2, r1, r2
 8008f9e:	1a9b      	subs	r3, r3, r2
 8008fa0:	69ba      	ldr	r2, [r7, #24]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fa8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	899b      	ldrh	r3, [r3, #12]
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fba:	4413      	add	r3, r2
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	69b8      	ldr	r0, [r7, #24]
 8008fc0:	f7ff fee6 	bl	8008d90 <move_window>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f040 80e8 	bne.w	800919c <get_fat+0x290>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	899b      	ldrh	r3, [r3, #12]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fd8:	fb01 f202 	mul.w	r2, r1, r2
 8008fdc:	1a9b      	subs	r3, r3, r2
 8008fde:	69ba      	ldr	r2, [r7, #24]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fe6:	021b      	lsls	r3, r3, #8
 8008fe8:	461a      	mov	r2, r3
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <get_fat+0xf4>
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	091b      	lsrs	r3, r3, #4
 8008ffe:	e002      	b.n	8009006 <get_fat+0xfa>
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009006:	61fb      	str	r3, [r7, #28]
			break;
 8009008:	e0cf      	b.n	80091aa <get_fat+0x29e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	899b      	ldrh	r3, [r3, #12]
 8009012:	085b      	lsrs	r3, r3, #1
 8009014:	b29b      	uxth	r3, r3
 8009016:	4619      	mov	r1, r3
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	fbb3 f3f1 	udiv	r3, r3, r1
 800901e:	4413      	add	r3, r2
 8009020:	4619      	mov	r1, r3
 8009022:	69b8      	ldr	r0, [r7, #24]
 8009024:	f7ff feb4 	bl	8008d90 <move_window>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	f040 80b8 	bne.w	80091a0 <get_fat+0x294>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	005b      	lsls	r3, r3, #1
 800903a:	69ba      	ldr	r2, [r7, #24]
 800903c:	8992      	ldrh	r2, [r2, #12]
 800903e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009042:	fb00 f202 	mul.w	r2, r0, r2
 8009046:	1a9b      	subs	r3, r3, r2
 8009048:	440b      	add	r3, r1
 800904a:	4618      	mov	r0, r3
 800904c:	f7ff fa8c 	bl	8008568 <ld_word>
 8009050:	4603      	mov	r3, r0
 8009052:	61fb      	str	r3, [r7, #28]
			break;
 8009054:	e0a9      	b.n	80091aa <get_fat+0x29e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	899b      	ldrh	r3, [r3, #12]
 800905e:	089b      	lsrs	r3, r3, #2
 8009060:	b29b      	uxth	r3, r3
 8009062:	4619      	mov	r1, r3
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	fbb3 f3f1 	udiv	r3, r3, r1
 800906a:	4413      	add	r3, r2
 800906c:	4619      	mov	r1, r3
 800906e:	69b8      	ldr	r0, [r7, #24]
 8009070:	f7ff fe8e 	bl	8008d90 <move_window>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	f040 8094 	bne.w	80091a4 <get_fat+0x298>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	69ba      	ldr	r2, [r7, #24]
 8009088:	8992      	ldrh	r2, [r2, #12]
 800908a:	fbb3 f0f2 	udiv	r0, r3, r2
 800908e:	fb00 f202 	mul.w	r2, r0, r2
 8009092:	1a9b      	subs	r3, r3, r2
 8009094:	440b      	add	r3, r1
 8009096:	4618      	mov	r0, r3
 8009098:	f7ff fa7e 	bl	8008598 <ld_dword>
 800909c:	4603      	mov	r3, r0
 800909e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80090a2:	61fb      	str	r3, [r7, #28]
			break;
 80090a4:	e081      	b.n	80091aa <get_fat+0x29e>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	d070      	beq.n	8009192 <get_fat+0x286>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	683a      	ldr	r2, [r7, #0]
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80090c0:	1e54      	subs	r4, r2, #1
 80090c2:	f143 35ff 	adc.w	r5, r3, #4294967295
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	899b      	ldrh	r3, [r3, #12]
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	2200      	movs	r2, #0
 80090ce:	4698      	mov	r8, r3
 80090d0:	4691      	mov	r9, r2
 80090d2:	4642      	mov	r2, r8
 80090d4:	464b      	mov	r3, r9
 80090d6:	4620      	mov	r0, r4
 80090d8:	4629      	mov	r1, r5
 80090da:	f7f7 f8d1 	bl	8000280 <__aeabi_uldivmod>
 80090de:	4602      	mov	r2, r0
 80090e0:	460b      	mov	r3, r1
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	895b      	ldrh	r3, [r3, #10]
 80090e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ea:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	79db      	ldrb	r3, [r3, #7]
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d10e      	bne.n	8009112 <get_fat+0x206>
					if (cofs <= clen) {
 80090f4:	697a      	ldr	r2, [r7, #20]
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d80a      	bhi.n	8009112 <get_fat+0x206>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	429a      	cmp	r2, r3
 8009102:	d002      	beq.n	800910a <get_fat+0x1fe>
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	3301      	adds	r3, #1
 8009108:	e001      	b.n	800910e <get_fat+0x202>
 800910a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800910e:	61fb      	str	r3, [r7, #28]
						break;
 8009110:	e04b      	b.n	80091aa <get_fat+0x29e>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	79db      	ldrb	r3, [r3, #7]
 8009116:	2b03      	cmp	r3, #3
 8009118:	d108      	bne.n	800912c <get_fat+0x220>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	429a      	cmp	r2, r3
 8009122:	d203      	bcs.n	800912c <get_fat+0x220>
					val = clst + 1; 	/* Generate the value */
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	3301      	adds	r3, #1
 8009128:	61fb      	str	r3, [r7, #28]
					break;
 800912a:	e03e      	b.n	80091aa <get_fat+0x29e>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	79db      	ldrb	r3, [r3, #7]
 8009130:	2b02      	cmp	r3, #2
 8009132:	d02e      	beq.n	8009192 <get_fat+0x286>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	69db      	ldr	r3, [r3, #28]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <get_fat+0x238>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800913c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009140:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8009142:	e032      	b.n	80091aa <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	899b      	ldrh	r3, [r3, #12]
 800914c:	089b      	lsrs	r3, r3, #2
 800914e:	b29b      	uxth	r3, r3
 8009150:	4619      	mov	r1, r3
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	fbb3 f3f1 	udiv	r3, r3, r1
 8009158:	4413      	add	r3, r2
 800915a:	4619      	mov	r1, r3
 800915c:	69b8      	ldr	r0, [r7, #24]
 800915e:	f7ff fe17 	bl	8008d90 <move_window>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d11f      	bne.n	80091a8 <get_fat+0x29c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	69ba      	ldr	r2, [r7, #24]
 8009174:	8992      	ldrh	r2, [r2, #12]
 8009176:	fbb3 f0f2 	udiv	r0, r3, r2
 800917a:	fb00 f202 	mul.w	r2, r0, r2
 800917e:	1a9b      	subs	r3, r3, r2
 8009180:	440b      	add	r3, r1
 8009182:	4618      	mov	r0, r3
 8009184:	f7ff fa08 	bl	8008598 <ld_dword>
 8009188:	4603      	mov	r3, r0
 800918a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800918e:	61fb      	str	r3, [r7, #28]
					break;
 8009190:	e00b      	b.n	80091aa <get_fat+0x29e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009192:	2301      	movs	r3, #1
 8009194:	61fb      	str	r3, [r7, #28]
 8009196:	e008      	b.n	80091aa <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009198:	bf00      	nop
 800919a:	e006      	b.n	80091aa <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800919c:	bf00      	nop
 800919e:	e004      	b.n	80091aa <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80091a0:	bf00      	nop
 80091a2:	e002      	b.n	80091aa <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80091a4:	bf00      	nop
 80091a6:	e000      	b.n	80091aa <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80091a8:	bf00      	nop
		}
	}

	return val;
 80091aa:	69fb      	ldr	r3, [r7, #28]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3720      	adds	r7, #32
 80091b0:	46bd      	mov	sp, r7
 80091b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80091b6:	bf00      	nop

080091b8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80091b8:	b590      	push	{r4, r7, lr}
 80091ba:	b089      	sub	sp, #36	; 0x24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80091c4:	2302      	movs	r3, #2
 80091c6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	f240 8106 	bls.w	80093dc <put_fat+0x224>
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	f080 8100 	bcs.w	80093dc <put_fat+0x224>
		switch (fs->fs_type) {
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	2b04      	cmp	r3, #4
 80091e2:	f300 8104 	bgt.w	80093ee <put_fat+0x236>
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	f280 80b3 	bge.w	8009352 <put_fat+0x19a>
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d003      	beq.n	80091f8 <put_fat+0x40>
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	f000 8083 	beq.w	80092fc <put_fat+0x144>
 80091f6:	e0fa      	b.n	80093ee <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	61bb      	str	r3, [r7, #24]
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	085b      	lsrs	r3, r3, #1
 8009200:	69ba      	ldr	r2, [r7, #24]
 8009202:	4413      	add	r3, r2
 8009204:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	899b      	ldrh	r3, [r3, #12]
 800920e:	4619      	mov	r1, r3
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	fbb3 f3f1 	udiv	r3, r3, r1
 8009216:	4413      	add	r3, r2
 8009218:	4619      	mov	r1, r3
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	f7ff fdb8 	bl	8008d90 <move_window>
 8009220:	4603      	mov	r3, r0
 8009222:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009224:	7ffb      	ldrb	r3, [r7, #31]
 8009226:	2b00      	cmp	r3, #0
 8009228:	f040 80da 	bne.w	80093e0 <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	1c5a      	adds	r2, r3, #1
 8009236:	61ba      	str	r2, [r7, #24]
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	8992      	ldrh	r2, [r2, #12]
 800923c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009240:	fb00 f202 	mul.w	r2, r0, r2
 8009244:	1a9b      	subs	r3, r3, r2
 8009246:	440b      	add	r3, r1
 8009248:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	f003 0301 	and.w	r3, r3, #1
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00d      	beq.n	8009270 <put_fat+0xb8>
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	b25b      	sxtb	r3, r3
 800925a:	f003 030f 	and.w	r3, r3, #15
 800925e:	b25a      	sxtb	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	b2db      	uxtb	r3, r3
 8009264:	011b      	lsls	r3, r3, #4
 8009266:	b25b      	sxtb	r3, r3
 8009268:	4313      	orrs	r3, r2
 800926a:	b25b      	sxtb	r3, r3
 800926c:	b2db      	uxtb	r3, r3
 800926e:	e001      	b.n	8009274 <put_fat+0xbc>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	b2db      	uxtb	r3, r3
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2201      	movs	r2, #1
 800927c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	899b      	ldrh	r3, [r3, #12]
 8009286:	4619      	mov	r1, r3
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	fbb3 f3f1 	udiv	r3, r3, r1
 800928e:	4413      	add	r3, r2
 8009290:	4619      	mov	r1, r3
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f7ff fd7c 	bl	8008d90 <move_window>
 8009298:	4603      	mov	r3, r0
 800929a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800929c:	7ffb      	ldrb	r3, [r7, #31]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f040 80a0 	bne.w	80093e4 <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	899b      	ldrh	r3, [r3, #12]
 80092ae:	461a      	mov	r2, r3
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80092b6:	fb00 f202 	mul.w	r2, r0, r2
 80092ba:	1a9b      	subs	r3, r3, r2
 80092bc:	440b      	add	r3, r1
 80092be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d003      	beq.n	80092d2 <put_fat+0x11a>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	091b      	lsrs	r3, r3, #4
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	e00e      	b.n	80092f0 <put_fat+0x138>
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	b25b      	sxtb	r3, r3
 80092d8:	f023 030f 	bic.w	r3, r3, #15
 80092dc:	b25a      	sxtb	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	0a1b      	lsrs	r3, r3, #8
 80092e2:	b25b      	sxtb	r3, r3
 80092e4:	f003 030f 	and.w	r3, r3, #15
 80092e8:	b25b      	sxtb	r3, r3
 80092ea:	4313      	orrs	r3, r2
 80092ec:	b25b      	sxtb	r3, r3
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2201      	movs	r2, #1
 80092f8:	70da      	strb	r2, [r3, #3]
			break;
 80092fa:	e078      	b.n	80093ee <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	899b      	ldrh	r3, [r3, #12]
 8009304:	085b      	lsrs	r3, r3, #1
 8009306:	b29b      	uxth	r3, r3
 8009308:	4619      	mov	r1, r3
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009310:	4413      	add	r3, r2
 8009312:	4619      	mov	r1, r3
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f7ff fd3b 	bl	8008d90 <move_window>
 800931a:	4603      	mov	r3, r0
 800931c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800931e:	7ffb      	ldrb	r3, [r7, #31]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d161      	bne.n	80093e8 <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	005b      	lsls	r3, r3, #1
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	8992      	ldrh	r2, [r2, #12]
 8009332:	fbb3 f0f2 	udiv	r0, r3, r2
 8009336:	fb00 f202 	mul.w	r2, r0, r2
 800933a:	1a9b      	subs	r3, r3, r2
 800933c:	440b      	add	r3, r1
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	b292      	uxth	r2, r2
 8009342:	4611      	mov	r1, r2
 8009344:	4618      	mov	r0, r3
 8009346:	f7ff fa25 	bl	8008794 <st_word>
			fs->wflag = 1;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2201      	movs	r2, #1
 800934e:	70da      	strb	r2, [r3, #3]
			break;
 8009350:	e04d      	b.n	80093ee <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	899b      	ldrh	r3, [r3, #12]
 800935a:	089b      	lsrs	r3, r3, #2
 800935c:	b29b      	uxth	r3, r3
 800935e:	4619      	mov	r1, r3
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	fbb3 f3f1 	udiv	r3, r3, r1
 8009366:	4413      	add	r3, r2
 8009368:	4619      	mov	r1, r3
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f7ff fd10 	bl	8008d90 <move_window>
 8009370:	4603      	mov	r3, r0
 8009372:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009374:	7ffb      	ldrb	r3, [r7, #31]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d138      	bne.n	80093ec <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	2b04      	cmp	r3, #4
 8009380:	d017      	beq.n	80093b2 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	8992      	ldrh	r2, [r2, #12]
 8009396:	fbb3 f0f2 	udiv	r0, r3, r2
 800939a:	fb00 f202 	mul.w	r2, r0, r2
 800939e:	1a9b      	subs	r3, r3, r2
 80093a0:	440b      	add	r3, r1
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff f8f8 	bl	8008598 <ld_dword>
 80093a8:	4603      	mov	r3, r0
 80093aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80093ae:	4323      	orrs	r3, r4
 80093b0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	8992      	ldrh	r2, [r2, #12]
 80093c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80093c4:	fb00 f202 	mul.w	r2, r0, r2
 80093c8:	1a9b      	subs	r3, r3, r2
 80093ca:	440b      	add	r3, r1
 80093cc:	6879      	ldr	r1, [r7, #4]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7ff f9fb 	bl	80087ca <st_dword>
			fs->wflag = 1;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2201      	movs	r2, #1
 80093d8:	70da      	strb	r2, [r3, #3]
			break;
 80093da:	e008      	b.n	80093ee <put_fat+0x236>
		}
	}
 80093dc:	bf00      	nop
 80093de:	e006      	b.n	80093ee <put_fat+0x236>
			if (res != FR_OK) break;
 80093e0:	bf00      	nop
 80093e2:	e004      	b.n	80093ee <put_fat+0x236>
			if (res != FR_OK) break;
 80093e4:	bf00      	nop
 80093e6:	e002      	b.n	80093ee <put_fat+0x236>
			if (res != FR_OK) break;
 80093e8:	bf00      	nop
 80093ea:	e000      	b.n	80093ee <put_fat+0x236>
			if (res != FR_OK) break;
 80093ec:	bf00      	nop
	return res;
 80093ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3724      	adds	r7, #36	; 0x24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd90      	pop	{r4, r7, pc}

080093f8 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b08a      	sub	sp, #40	; 0x28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	3b02      	subs	r3, #2
 8009408:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6a1b      	ldr	r3, [r3, #32]
 800940e:	3b02      	subs	r3, #2
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	429a      	cmp	r2, r3
 8009414:	d301      	bcc.n	800941a <find_bitmap+0x22>
 8009416:	2300      	movs	r3, #0
 8009418:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	61fb      	str	r3, [r7, #28]
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	61bb      	str	r3, [r7, #24]
 8009422:	2300      	movs	r3, #0
 8009424:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	08db      	lsrs	r3, r3, #3
 800942e:	68f9      	ldr	r1, [r7, #12]
 8009430:	8989      	ldrh	r1, [r1, #12]
 8009432:	fbb3 f3f1 	udiv	r3, r3, r1
 8009436:	4413      	add	r3, r2
 8009438:	4619      	mov	r1, r3
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f7ff fca8 	bl	8008d90 <move_window>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d002      	beq.n	800944c <find_bitmap+0x54>
 8009446:	f04f 33ff 	mov.w	r3, #4294967295
 800944a:	e058      	b.n	80094fe <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	08db      	lsrs	r3, r3, #3
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	8992      	ldrh	r2, [r2, #12]
 8009454:	fbb3 f1f2 	udiv	r1, r3, r2
 8009458:	fb01 f202 	mul.w	r2, r1, r2
 800945c:	1a9b      	subs	r3, r3, r2
 800945e:	623b      	str	r3, [r7, #32]
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	f003 0307 	and.w	r3, r3, #7
 8009466:	2201      	movs	r2, #1
 8009468:	fa02 f303 	lsl.w	r3, r2, r3
 800946c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	4413      	add	r3, r2
 8009476:	333c      	adds	r3, #60	; 0x3c
 8009478:	781a      	ldrb	r2, [r3, #0]
 800947a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800947e:	4013      	ands	r3, r2
 8009480:	74fb      	strb	r3, [r7, #19]
 8009482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009486:	005b      	lsls	r3, r3, #1
 8009488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	3301      	adds	r3, #1
 8009490:	61fb      	str	r3, [r7, #28]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	3b02      	subs	r3, #2
 8009498:	69fa      	ldr	r2, [r7, #28]
 800949a:	429a      	cmp	r2, r3
 800949c:	d307      	bcc.n	80094ae <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800949e:	2300      	movs	r3, #0
 80094a0:	61fb      	str	r3, [r7, #28]
 80094a2:	2300      	movs	r3, #0
 80094a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	899b      	ldrh	r3, [r3, #12]
 80094ac:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 80094ae:	7cfb      	ldrb	r3, [r7, #19]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d109      	bne.n	80094c8 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	3301      	adds	r3, #1
 80094b8:	617b      	str	r3, [r7, #20]
 80094ba:	697a      	ldr	r2, [r7, #20]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d106      	bne.n	80094d0 <find_bitmap+0xd8>
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	3302      	adds	r3, #2
 80094c6:	e01a      	b.n	80094fe <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	61bb      	str	r3, [r7, #24]
 80094cc:	2300      	movs	r3, #0
 80094ce:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 80094d0:	69fa      	ldr	r2, [r7, #28]
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d101      	bne.n	80094dc <find_bitmap+0xe4>
 80094d8:	2300      	movs	r3, #0
 80094da:	e010      	b.n	80094fe <find_bitmap+0x106>
			} while (bm);
 80094dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1c5      	bne.n	8009470 <find_bitmap+0x78>
			bm = 1;
 80094e4:	2301      	movs	r3, #1
 80094e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	3301      	adds	r3, #1
 80094ee:	623b      	str	r3, [r7, #32]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	899b      	ldrh	r3, [r3, #12]
 80094f4:	461a      	mov	r2, r3
 80094f6:	6a3b      	ldr	r3, [r7, #32]
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d3b9      	bcc.n	8009470 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80094fc:	e793      	b.n	8009426 <find_bitmap+0x2e>
	}
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3728      	adds	r7, #40	; 0x28
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b088      	sub	sp, #32
 800950a:	af00      	add	r7, sp, #0
 800950c:	60f8      	str	r0, [r7, #12]
 800950e:	60b9      	str	r1, [r7, #8]
 8009510:	607a      	str	r2, [r7, #4]
 8009512:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	3b02      	subs	r3, #2
 8009518:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	08db      	lsrs	r3, r3, #3
 8009522:	68f9      	ldr	r1, [r7, #12]
 8009524:	8989      	ldrh	r1, [r1, #12]
 8009526:	fbb3 f3f1 	udiv	r3, r3, r1
 800952a:	4413      	add	r3, r2
 800952c:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	08db      	lsrs	r3, r3, #3
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	8992      	ldrh	r2, [r2, #12]
 8009536:	fbb3 f1f2 	udiv	r1, r3, r2
 800953a:	fb01 f202 	mul.w	r2, r1, r2
 800953e:	1a9b      	subs	r3, r3, r2
 8009540:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	f003 0307 	and.w	r3, r3, #7
 8009548:	2201      	movs	r2, #1
 800954a:	fa02 f303 	lsl.w	r3, r2, r3
 800954e:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	1c5a      	adds	r2, r3, #1
 8009554:	617a      	str	r2, [r7, #20]
 8009556:	4619      	mov	r1, r3
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f7ff fc19 	bl	8008d90 <move_window>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <change_bitmap+0x62>
 8009564:	2301      	movs	r3, #1
 8009566:	e03f      	b.n	80095e8 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	4413      	add	r3, r2
 800956e:	333c      	adds	r3, #60	; 0x3c
 8009570:	781a      	ldrb	r2, [r3, #0]
 8009572:	7ffb      	ldrb	r3, [r7, #31]
 8009574:	4013      	ands	r3, r2
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b00      	cmp	r3, #0
 800957a:	bf14      	ite	ne
 800957c:	2301      	movne	r3, #1
 800957e:	2300      	moveq	r3, #0
 8009580:	b2db      	uxtb	r3, r3
 8009582:	461a      	mov	r2, r3
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	4293      	cmp	r3, r2
 8009588:	d101      	bne.n	800958e <change_bitmap+0x88>
 800958a:	2302      	movs	r3, #2
 800958c:	e02c      	b.n	80095e8 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800958e:	68fa      	ldr	r2, [r7, #12]
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	4413      	add	r3, r2
 8009594:	333c      	adds	r3, #60	; 0x3c
 8009596:	781a      	ldrb	r2, [r3, #0]
 8009598:	7ffb      	ldrb	r3, [r7, #31]
 800959a:	4053      	eors	r3, r2
 800959c:	b2d9      	uxtb	r1, r3
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	4413      	add	r3, r2
 80095a4:	333c      	adds	r3, #60	; 0x3c
 80095a6:	460a      	mov	r2, r1
 80095a8:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2201      	movs	r2, #1
 80095ae:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	607b      	str	r3, [r7, #4]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <change_bitmap+0xba>
 80095bc:	2300      	movs	r3, #0
 80095be:	e013      	b.n	80095e8 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 80095c0:	7ffb      	ldrb	r3, [r7, #31]
 80095c2:	005b      	lsls	r3, r3, #1
 80095c4:	77fb      	strb	r3, [r7, #31]
 80095c6:	7ffb      	ldrb	r3, [r7, #31]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1cd      	bne.n	8009568 <change_bitmap+0x62>
			bm = 1;
 80095cc:	2301      	movs	r3, #1
 80095ce:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	3301      	adds	r3, #1
 80095d4:	61bb      	str	r3, [r7, #24]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	899b      	ldrh	r3, [r3, #12]
 80095da:	461a      	mov	r2, r3
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	4293      	cmp	r3, r2
 80095e0:	d3c2      	bcc.n	8009568 <change_bitmap+0x62>
		i = 0;
 80095e2:	2300      	movs	r3, #0
 80095e4:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80095e6:	e7b3      	b.n	8009550 <change_bitmap+0x4a>
	}
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3720      	adds	r7, #32
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b086      	sub	sp, #24
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	79db      	ldrb	r3, [r3, #7]
 80095fc:	2b03      	cmp	r3, #3
 80095fe:	d121      	bne.n	8009644 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	617b      	str	r3, [r7, #20]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	613b      	str	r3, [r7, #16]
 800960c:	e014      	b.n	8009638 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6818      	ldr	r0, [r3, #0]
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	3301      	adds	r3, #1
 8009616:	461a      	mov	r2, r3
 8009618:	6979      	ldr	r1, [r7, #20]
 800961a:	f7ff fdcd 	bl	80091b8 <put_fat>
 800961e:	4603      	mov	r3, r0
 8009620:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <fill_first_frag+0x3c>
 8009628:	7bfb      	ldrb	r3, [r7, #15]
 800962a:	e00c      	b.n	8009646 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	3301      	adds	r3, #1
 8009630:	617b      	str	r3, [r7, #20]
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	3b01      	subs	r3, #1
 8009636:	613b      	str	r3, [r7, #16]
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1e7      	bne.n	800960e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b086      	sub	sp, #24
 8009652:	af00      	add	r7, sp, #0
 8009654:	60f8      	str	r0, [r7, #12]
 8009656:	60b9      	str	r1, [r7, #8]
 8009658:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800965a:	e020      	b.n	800969e <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6818      	ldr	r0, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	69db      	ldr	r3, [r3, #28]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	1c59      	adds	r1, r3, #1
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	69db      	ldr	r3, [r3, #28]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d905      	bls.n	800967e <fill_last_frag+0x30>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	3302      	adds	r3, #2
 800967c:	e000      	b.n	8009680 <fill_last_frag+0x32>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	461a      	mov	r2, r3
 8009682:	f7ff fd99 	bl	80091b8 <put_fat>
 8009686:	4603      	mov	r3, r0
 8009688:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800968a:	7dfb      	ldrb	r3, [r7, #23]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <fill_last_frag+0x46>
 8009690:	7dfb      	ldrb	r3, [r7, #23]
 8009692:	e009      	b.n	80096a8 <fill_last_frag+0x5a>
		obj->n_frag--;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	69db      	ldr	r3, [r3, #28]
 8009698:	1e5a      	subs	r2, r3, #1
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1da      	bne.n	800965c <fill_last_frag+0xe>
	}
	return FR_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3718      	adds	r7, #24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b08a      	sub	sp, #40	; 0x28
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	627b      	str	r3, [r7, #36]	; 0x24
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d904      	bls.n	80096de <remove_chain+0x2e>
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	6a1b      	ldr	r3, [r3, #32]
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d301      	bcc.n	80096e2 <remove_chain+0x32>
 80096de:	2302      	movs	r3, #2
 80096e0:	e096      	b.n	8009810 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d014      	beq.n	8009712 <remove_chain+0x62>
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	2b04      	cmp	r3, #4
 80096ee:	d103      	bne.n	80096f8 <remove_chain+0x48>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	79db      	ldrb	r3, [r3, #7]
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d00c      	beq.n	8009712 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80096f8:	f04f 32ff 	mov.w	r2, #4294967295
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	69b8      	ldr	r0, [r7, #24]
 8009700:	f7ff fd5a 	bl	80091b8 <put_fat>
 8009704:	4603      	mov	r3, r0
 8009706:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009708:	7ffb      	ldrb	r3, [r7, #31]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <remove_chain+0x62>
 800970e:	7ffb      	ldrb	r3, [r7, #31]
 8009710:	e07e      	b.n	8009810 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009712:	68b9      	ldr	r1, [r7, #8]
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f7ff fbf9 	bl	8008f0c <get_fat>
 800971a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d055      	beq.n	80097ce <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d101      	bne.n	800972c <remove_chain+0x7c>
 8009728:	2302      	movs	r3, #2
 800972a:	e071      	b.n	8009810 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009732:	d101      	bne.n	8009738 <remove_chain+0x88>
 8009734:	2301      	movs	r3, #1
 8009736:	e06b      	b.n	8009810 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	2b04      	cmp	r3, #4
 800973e:	d00b      	beq.n	8009758 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009740:	2200      	movs	r2, #0
 8009742:	68b9      	ldr	r1, [r7, #8]
 8009744:	69b8      	ldr	r0, [r7, #24]
 8009746:	f7ff fd37 	bl	80091b8 <put_fat>
 800974a:	4603      	mov	r3, r0
 800974c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800974e:	7ffb      	ldrb	r3, [r7, #31]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <remove_chain+0xa8>
 8009754:	7ffb      	ldrb	r3, [r7, #31]
 8009756:	e05b      	b.n	8009810 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	69da      	ldr	r2, [r3, #28]
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	6a1b      	ldr	r3, [r3, #32]
 8009760:	3b02      	subs	r3, #2
 8009762:	429a      	cmp	r2, r3
 8009764:	d20b      	bcs.n	800977e <remove_chain+0xce>
			fs->free_clst++;
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	69db      	ldr	r3, [r3, #28]
 800976a:	1c5a      	adds	r2, r3, #1
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	791b      	ldrb	r3, [r3, #4]
 8009774:	f043 0301 	orr.w	r3, r3, #1
 8009778:	b2da      	uxtb	r2, r3
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	3301      	adds	r3, #1
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	429a      	cmp	r2, r3
 8009786:	d102      	bne.n	800978e <remove_chain+0xde>
			ecl = nxt;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	623b      	str	r3, [r7, #32]
 800978c:	e017      	b.n	80097be <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	2b04      	cmp	r3, #4
 8009794:	d10f      	bne.n	80097b6 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8009796:	6a3a      	ldr	r2, [r7, #32]
 8009798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	1c5a      	adds	r2, r3, #1
 800979e:	2300      	movs	r3, #0
 80097a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097a2:	69b8      	ldr	r0, [r7, #24]
 80097a4:	f7ff feaf 	bl	8009506 <change_bitmap>
 80097a8:	4603      	mov	r3, r0
 80097aa:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 80097ac:	7ffb      	ldrb	r3, [r7, #31]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d001      	beq.n	80097b6 <remove_chain+0x106>
 80097b2:	7ffb      	ldrb	r3, [r7, #31]
 80097b4:	e02c      	b.n	8009810 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	623b      	str	r3, [r7, #32]
 80097ba:	6a3b      	ldr	r3, [r7, #32]
 80097bc:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d3a2      	bcc.n	8009712 <remove_chain+0x62>
 80097cc:	e000      	b.n	80097d0 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 80097ce:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	2b04      	cmp	r3, #4
 80097d6:	d11a      	bne.n	800980e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d103      	bne.n	80097e6 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	71da      	strb	r2, [r3, #7]
 80097e4:	e013      	b.n	800980e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	79db      	ldrb	r3, [r3, #7]
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	d10f      	bne.n	800980e <remove_chain+0x15e>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d30a      	bcc.n	800980e <remove_chain+0x15e>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	689a      	ldr	r2, [r3, #8]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	4413      	add	r3, r2
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	429a      	cmp	r2, r3
 8009806:	d802      	bhi.n	800980e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2202      	movs	r2, #2
 800980c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3728      	adds	r7, #40	; 0x28
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b088      	sub	sp, #32
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d10d      	bne.n	800984a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d004      	beq.n	8009844 <create_chain+0x2c>
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	69ba      	ldr	r2, [r7, #24]
 8009840:	429a      	cmp	r2, r3
 8009842:	d31b      	bcc.n	800987c <create_chain+0x64>
 8009844:	2301      	movs	r3, #1
 8009846:	61bb      	str	r3, [r7, #24]
 8009848:	e018      	b.n	800987c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7ff fb5d 	bl	8008f0c <get_fat>
 8009852:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d801      	bhi.n	800985e <create_chain+0x46>
 800985a:	2301      	movs	r3, #1
 800985c:	e0d9      	b.n	8009a12 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009864:	d101      	bne.n	800986a <create_chain+0x52>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	e0d3      	b.n	8009a12 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	429a      	cmp	r2, r3
 8009872:	d201      	bcs.n	8009878 <create_chain+0x60>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	e0cc      	b.n	8009a12 <create_chain+0x1fa>
		scl = clst;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	2b04      	cmp	r3, #4
 8009882:	d164      	bne.n	800994e <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8009884:	2201      	movs	r2, #1
 8009886:	69b9      	ldr	r1, [r7, #24]
 8009888:	6938      	ldr	r0, [r7, #16]
 800988a:	f7ff fdb5 	bl	80093f8 <find_bitmap>
 800988e:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d003      	beq.n	800989e <create_chain+0x86>
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989c:	d101      	bne.n	80098a2 <create_chain+0x8a>
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	e0b7      	b.n	8009a12 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 80098a2:	2301      	movs	r3, #1
 80098a4:	2201      	movs	r2, #1
 80098a6:	69f9      	ldr	r1, [r7, #28]
 80098a8:	6938      	ldr	r0, [r7, #16]
 80098aa:	f7ff fe2c 	bl	8009506 <change_bitmap>
 80098ae:	4603      	mov	r3, r0
 80098b0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d101      	bne.n	80098bc <create_chain+0xa4>
 80098b8:	2301      	movs	r3, #1
 80098ba:	e0aa      	b.n	8009a12 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 80098bc:	7dfb      	ldrb	r3, [r7, #23]
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d102      	bne.n	80098c8 <create_chain+0xb0>
 80098c2:	f04f 33ff 	mov.w	r3, #4294967295
 80098c6:	e0a4      	b.n	8009a12 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d103      	bne.n	80098d6 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2202      	movs	r2, #2
 80098d2:	71da      	strb	r2, [r3, #7]
 80098d4:	e011      	b.n	80098fa <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	79db      	ldrb	r3, [r3, #7]
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d10d      	bne.n	80098fa <create_chain+0xe2>
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	3301      	adds	r3, #1
 80098e2:	69fa      	ldr	r2, [r7, #28]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d008      	beq.n	80098fa <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	69ba      	ldr	r2, [r7, #24]
 80098ee:	1ad2      	subs	r2, r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2203      	movs	r2, #3
 80098f8:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	79db      	ldrb	r3, [r3, #7]
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d064      	beq.n	80099cc <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	3301      	adds	r3, #1
 8009906:	69fa      	ldr	r2, [r7, #28]
 8009908:	429a      	cmp	r2, r3
 800990a:	d10b      	bne.n	8009924 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	69db      	ldr	r3, [r3, #28]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d003      	beq.n	800991c <create_chain+0x104>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	69db      	ldr	r3, [r3, #28]
 8009918:	3301      	adds	r3, #1
 800991a:	e000      	b.n	800991e <create_chain+0x106>
 800991c:	2302      	movs	r3, #2
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	61d3      	str	r3, [r2, #28]
 8009922:	e053      	b.n	80099cc <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	69db      	ldr	r3, [r3, #28]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d102      	bne.n	8009932 <create_chain+0x11a>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8009932:	69fa      	ldr	r2, [r7, #28]
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7ff fe89 	bl	800964e <fill_last_frag>
 800993c:	4603      	mov	r3, r0
 800993e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8009940:	7dfb      	ldrb	r3, [r7, #23]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d142      	bne.n	80099cc <create_chain+0x1b4>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	61da      	str	r2, [r3, #28]
 800994c:	e03e      	b.n	80099cc <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	3301      	adds	r3, #1
 8009956:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	6a1b      	ldr	r3, [r3, #32]
 800995c:	69fa      	ldr	r2, [r7, #28]
 800995e:	429a      	cmp	r2, r3
 8009960:	d307      	bcc.n	8009972 <create_chain+0x15a>
				ncl = 2;
 8009962:	2302      	movs	r3, #2
 8009964:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009966:	69fa      	ldr	r2, [r7, #28]
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	429a      	cmp	r2, r3
 800996c:	d901      	bls.n	8009972 <create_chain+0x15a>
 800996e:	2300      	movs	r3, #0
 8009970:	e04f      	b.n	8009a12 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009972:	69f9      	ldr	r1, [r7, #28]
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f7ff fac9 	bl	8008f0c <get_fat>
 800997a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00e      	beq.n	80099a0 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d003      	beq.n	8009990 <create_chain+0x178>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998e:	d101      	bne.n	8009994 <create_chain+0x17c>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	e03e      	b.n	8009a12 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8009994:	69fa      	ldr	r2, [r7, #28]
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	429a      	cmp	r2, r3
 800999a:	d1da      	bne.n	8009952 <create_chain+0x13a>
 800999c:	2300      	movs	r3, #0
 800999e:	e038      	b.n	8009a12 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 80099a0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80099a2:	f04f 32ff 	mov.w	r2, #4294967295
 80099a6:	69f9      	ldr	r1, [r7, #28]
 80099a8:	6938      	ldr	r0, [r7, #16]
 80099aa:	f7ff fc05 	bl	80091b8 <put_fat>
 80099ae:	4603      	mov	r3, r0
 80099b0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d109      	bne.n	80099cc <create_chain+0x1b4>
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d006      	beq.n	80099cc <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80099be:	69fa      	ldr	r2, [r7, #28]
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6938      	ldr	r0, [r7, #16]
 80099c4:	f7ff fbf8 	bl	80091b8 <put_fat>
 80099c8:	4603      	mov	r3, r0
 80099ca:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80099cc:	7dfb      	ldrb	r3, [r7, #23]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d116      	bne.n	8009a00 <create_chain+0x1e8>
		fs->last_clst = ncl;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	69fa      	ldr	r2, [r7, #28]
 80099d6:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	69da      	ldr	r2, [r3, #28]
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	6a1b      	ldr	r3, [r3, #32]
 80099e0:	3b02      	subs	r3, #2
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d804      	bhi.n	80099f0 <create_chain+0x1d8>
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	69db      	ldr	r3, [r3, #28]
 80099ea:	1e5a      	subs	r2, r3, #1
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	791b      	ldrb	r3, [r3, #4]
 80099f4:	f043 0301 	orr.w	r3, r3, #1
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	711a      	strb	r2, [r3, #4]
 80099fe:	e007      	b.n	8009a10 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009a00:	7dfb      	ldrb	r3, [r7, #23]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d102      	bne.n	8009a0c <create_chain+0x1f4>
 8009a06:	f04f 33ff 	mov.w	r3, #4294967295
 8009a0a:	e000      	b.n	8009a0e <create_chain+0x1f6>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009a10:	69fb      	ldr	r3, [r7, #28]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3720      	adds	r7, #32
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009a1a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009a1e:	b088      	sub	sp, #32
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a32:	3304      	adds	r3, #4
 8009a34:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	899b      	ldrh	r3, [r3, #12]
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	4698      	mov	r8, r3
 8009a40:	4691      	mov	r9, r2
 8009a42:	4642      	mov	r2, r8
 8009a44:	464b      	mov	r3, r9
 8009a46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a4a:	f7f6 fc19 	bl	8000280 <__aeabi_uldivmod>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	4610      	mov	r0, r2
 8009a54:	4619      	mov	r1, r3
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	895b      	ldrh	r3, [r3, #10]
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	461c      	mov	r4, r3
 8009a60:	4615      	mov	r5, r2
 8009a62:	4622      	mov	r2, r4
 8009a64:	462b      	mov	r3, r5
 8009a66:	f7f6 fc0b 	bl	8000280 <__aeabi_uldivmod>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	4613      	mov	r3, r2
 8009a70:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	1d1a      	adds	r2, r3, #4
 8009a76:	61ba      	str	r2, [r7, #24]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <clmt_clust+0x6c>
 8009a82:	2300      	movs	r3, #0
 8009a84:	e010      	b.n	8009aa8 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 8009a86:	69fa      	ldr	r2, [r7, #28]
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d307      	bcc.n	8009a9e <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 8009a8e:	69fa      	ldr	r2, [r7, #28]
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	61fb      	str	r3, [r7, #28]
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	3304      	adds	r3, #4
 8009a9a:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009a9c:	e7e9      	b.n	8009a72 <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 8009a9e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	4413      	add	r3, r2
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3720      	adds	r7, #32
 8009aac:	46bd      	mov	sp, r7
 8009aae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08009ab2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b086      	sub	sp, #24
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	2b04      	cmp	r3, #4
 8009ac8:	d102      	bne.n	8009ad0 <dir_sdi+0x1e>
 8009aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ace:	e001      	b.n	8009ad4 <dir_sdi+0x22>
 8009ad0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d904      	bls.n	8009ae4 <dir_sdi+0x32>
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	f003 031f 	and.w	r3, r3, #31
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d001      	beq.n	8009ae8 <dir_sdi+0x36>
		return FR_INT_ERR;
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	e074      	b.n	8009bd2 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	683a      	ldr	r2, [r7, #0]
 8009aec:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d109      	bne.n	8009b0e <dir_sdi+0x5c>
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d905      	bls.n	8009b0e <dir_sdi+0x5c>
		clst = fs->dirbase;
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b06:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10c      	bne.n	8009b2e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	095b      	lsrs	r3, r3, #5
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	8912      	ldrh	r2, [r2, #8]
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d301      	bcc.n	8009b24 <dir_sdi+0x72>
 8009b20:	2302      	movs	r3, #2
 8009b22:	e056      	b.n	8009bd2 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	639a      	str	r2, [r3, #56]	; 0x38
 8009b2c:	e02d      	b.n	8009b8a <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	895b      	ldrh	r3, [r3, #10]
 8009b32:	461a      	mov	r2, r3
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	899b      	ldrh	r3, [r3, #12]
 8009b38:	fb02 f303 	mul.w	r3, r2, r3
 8009b3c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009b3e:	e019      	b.n	8009b74 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6979      	ldr	r1, [r7, #20]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7ff f9e1 	bl	8008f0c <get_fat>
 8009b4a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b52:	d101      	bne.n	8009b58 <dir_sdi+0xa6>
 8009b54:	2301      	movs	r3, #1
 8009b56:	e03c      	b.n	8009bd2 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d904      	bls.n	8009b68 <dir_sdi+0xb6>
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d301      	bcc.n	8009b6c <dir_sdi+0xba>
 8009b68:	2302      	movs	r3, #2
 8009b6a:	e032      	b.n	8009bd2 <dir_sdi+0x120>
			ofs -= csz;
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009b74:	683a      	ldr	r2, [r7, #0]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d2e1      	bcs.n	8009b40 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 8009b7c:	6979      	ldr	r1, [r7, #20]
 8009b7e:	6938      	ldr	r0, [r7, #16]
 8009b80:	f7ff f9a4 	bl	8008ecc <clust2sect>
 8009b84:	4602      	mov	r2, r0
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d101      	bne.n	8009b9c <dir_sdi+0xea>
 8009b98:	2302      	movs	r3, #2
 8009b9a:	e01a      	b.n	8009bd2 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	899b      	ldrh	r3, [r3, #12]
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	fbb3 f3f1 	udiv	r3, r3, r1
 8009bac:	441a      	add	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	899b      	ldrh	r3, [r3, #12]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	fbb3 f0f2 	udiv	r0, r3, r2
 8009bc4:	fb00 f202 	mul.w	r2, r0, r2
 8009bc8:	1a9b      	subs	r3, r3, r2
 8009bca:	18ca      	adds	r2, r1, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3718      	adds	r7, #24
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b086      	sub	sp, #24
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bee:	3320      	adds	r3, #32
 8009bf0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00b      	beq.n	8009c12 <dir_next+0x38>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	2b04      	cmp	r3, #4
 8009c00:	d102      	bne.n	8009c08 <dir_next+0x2e>
 8009c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c06:	e001      	b.n	8009c0c <dir_next+0x32>
 8009c08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d801      	bhi.n	8009c16 <dir_next+0x3c>
 8009c12:	2304      	movs	r3, #4
 8009c14:	e0c3      	b.n	8009d9e <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	899b      	ldrh	r3, [r3, #12]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c22:	fb01 f202 	mul.w	r2, r1, r2
 8009c26:	1a9b      	subs	r3, r3, r2
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f040 80a5 	bne.w	8009d78 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c32:	1c5a      	adds	r2, r3, #1
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10b      	bne.n	8009c58 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	095b      	lsrs	r3, r3, #5
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	8912      	ldrh	r2, [r2, #8]
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	f0c0 8095 	bcc.w	8009d78 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	639a      	str	r2, [r3, #56]	; 0x38
 8009c54:	2304      	movs	r3, #4
 8009c56:	e0a2      	b.n	8009d9e <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	899b      	ldrh	r3, [r3, #12]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	8952      	ldrh	r2, [r2, #10]
 8009c68:	3a01      	subs	r2, #1
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f040 8083 	bne.w	8009d78 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c78:	4619      	mov	r1, r3
 8009c7a:	4610      	mov	r0, r2
 8009c7c:	f7ff f946 	bl	8008f0c <get_fat>
 8009c80:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d801      	bhi.n	8009c8c <dir_next+0xb2>
 8009c88:	2302      	movs	r3, #2
 8009c8a:	e088      	b.n	8009d9e <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c92:	d101      	bne.n	8009c98 <dir_next+0xbe>
 8009c94:	2301      	movs	r3, #1
 8009c96:	e082      	b.n	8009d9e <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6a1b      	ldr	r3, [r3, #32]
 8009c9c:	697a      	ldr	r2, [r7, #20]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d360      	bcc.n	8009d64 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d104      	bne.n	8009cb2 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	639a      	str	r2, [r3, #56]	; 0x38
 8009cae:	2304      	movs	r3, #4
 8009cb0:	e075      	b.n	8009d9e <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4610      	mov	r0, r2
 8009cbc:	f7ff fdac 	bl	8009818 <create_chain>
 8009cc0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d101      	bne.n	8009ccc <dir_next+0xf2>
 8009cc8:	2307      	movs	r3, #7
 8009cca:	e068      	b.n	8009d9e <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d101      	bne.n	8009cd6 <dir_next+0xfc>
 8009cd2:	2302      	movs	r3, #2
 8009cd4:	e063      	b.n	8009d9e <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cdc:	d101      	bne.n	8009ce2 <dir_next+0x108>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e05d      	b.n	8009d9e <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	79db      	ldrb	r3, [r3, #7]
 8009ce6:	f043 0304 	orr.w	r3, r3, #4
 8009cea:	b2da      	uxtb	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f7ff f809 	bl	8008d08 <sync_window>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d001      	beq.n	8009d00 <dir_next+0x126>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e04e      	b.n	8009d9e <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	899b      	ldrh	r3, [r3, #12]
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	f7fe fe31 	bl	8008974 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009d12:	2300      	movs	r3, #0
 8009d14:	613b      	str	r3, [r7, #16]
 8009d16:	6979      	ldr	r1, [r7, #20]
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f7ff f8d7 	bl	8008ecc <clust2sect>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	639a      	str	r2, [r3, #56]	; 0x38
 8009d24:	e012      	b.n	8009d4c <dir_next+0x172>
						fs->wflag = 1;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f7fe ffeb 	bl	8008d08 <sync_window>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d001      	beq.n	8009d3c <dir_next+0x162>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e030      	b.n	8009d9e <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	613b      	str	r3, [r7, #16]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d46:	1c5a      	adds	r2, r3, #1
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	639a      	str	r2, [r3, #56]	; 0x38
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	895b      	ldrh	r3, [r3, #10]
 8009d50:	461a      	mov	r2, r3
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d3e6      	bcc.n	8009d26 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	1ad2      	subs	r2, r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8009d6a:	6979      	ldr	r1, [r7, #20]
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f7ff f8ad 	bl	8008ecc <clust2sect>
 8009d72:	4602      	mov	r2, r0
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	899b      	ldrh	r3, [r3, #12]
 8009d88:	461a      	mov	r2, r3
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d90:	fb00 f202 	mul.w	r2, r0, r2
 8009d94:	1a9b      	subs	r3, r3, r2
 8009d96:	18ca      	adds	r2, r1, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3718      	adds	r7, #24
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b086      	sub	sp, #24
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009db6:	2100      	movs	r1, #0
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff fe7a 	bl	8009ab2 <dir_sdi>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009dc2:	7dfb      	ldrb	r3, [r7, #23]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d140      	bne.n	8009e4a <dir_alloc+0xa4>
		n = 0;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f7fe ffdc 	bl	8008d90 <move_window>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009ddc:	7dfb      	ldrb	r3, [r7, #23]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d132      	bne.n	8009e48 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	2b04      	cmp	r3, #4
 8009de8:	d108      	bne.n	8009dfc <dir_alloc+0x56>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	b25b      	sxtb	r3, r3
 8009df2:	43db      	mvns	r3, r3
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	09db      	lsrs	r3, r3, #7
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	e00f      	b.n	8009e1c <dir_alloc+0x76>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	2be5      	cmp	r3, #229	; 0xe5
 8009e04:	d004      	beq.n	8009e10 <dir_alloc+0x6a>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <dir_alloc+0x6e>
 8009e10:	2301      	movs	r3, #1
 8009e12:	e000      	b.n	8009e16 <dir_alloc+0x70>
 8009e14:	2300      	movs	r3, #0
 8009e16:	f003 0301 	and.w	r3, r3, #1
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d007      	beq.n	8009e30 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	3301      	adds	r3, #1
 8009e24:	613b      	str	r3, [r7, #16]
 8009e26:	693a      	ldr	r2, [r7, #16]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d102      	bne.n	8009e34 <dir_alloc+0x8e>
 8009e2e:	e00c      	b.n	8009e4a <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009e30:	2300      	movs	r3, #0
 8009e32:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009e34:	2101      	movs	r1, #1
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7ff fecf 	bl	8009bda <dir_next>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009e40:	7dfb      	ldrb	r3, [r7, #23]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d0c2      	beq.n	8009dcc <dir_alloc+0x26>
 8009e46:	e000      	b.n	8009e4a <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8009e48:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009e4a:	7dfb      	ldrb	r3, [r7, #23]
 8009e4c:	2b04      	cmp	r3, #4
 8009e4e:	d101      	bne.n	8009e54 <dir_alloc+0xae>
 8009e50:	2307      	movs	r3, #7
 8009e52:	75fb      	strb	r3, [r7, #23]
	return res;
 8009e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b084      	sub	sp, #16
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	331a      	adds	r3, #26
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fe fb7b 	bl	8008568 <ld_word>
 8009e72:	4603      	mov	r3, r0
 8009e74:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	2b03      	cmp	r3, #3
 8009e7c:	d109      	bne.n	8009e92 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	3314      	adds	r3, #20
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fe fb70 	bl	8008568 <ld_word>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	041b      	lsls	r3, r3, #16
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009e92:	68fb      	ldr	r3, [r7, #12]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	331a      	adds	r3, #26
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	b292      	uxth	r2, r2
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fe fc6e 	bl	8008794 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	2b03      	cmp	r3, #3
 8009ebe:	d109      	bne.n	8009ed4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	f103 0214 	add.w	r2, r3, #20
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	0c1b      	lsrs	r3, r3, #16
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4610      	mov	r0, r2
 8009ed0:	f7fe fc60 	bl	8008794 <st_word>
	}
}
 8009ed4:	bf00      	nop
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009edc:	b590      	push	{r4, r7, lr}
 8009ede:	b087      	sub	sp, #28
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	331a      	adds	r3, #26
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7fe fb3c 	bl	8008568 <ld_word>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <cmp_lfn+0x1e>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	e059      	b.n	8009fae <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f02:	1e5a      	subs	r2, r3, #1
 8009f04:	4613      	mov	r3, r2
 8009f06:	005b      	lsls	r3, r3, #1
 8009f08:	4413      	add	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	4413      	add	r3, r2
 8009f0e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009f10:	2301      	movs	r3, #1
 8009f12:	81fb      	strh	r3, [r7, #14]
 8009f14:	2300      	movs	r3, #0
 8009f16:	613b      	str	r3, [r7, #16]
 8009f18:	e033      	b.n	8009f82 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009f1a:	4a27      	ldr	r2, [pc, #156]	; (8009fb8 <cmp_lfn+0xdc>)
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	4413      	add	r3, r2
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	461a      	mov	r2, r3
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	4413      	add	r3, r2
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7fe fb1d 	bl	8008568 <ld_word>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009f32:	89fb      	ldrh	r3, [r7, #14]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d01a      	beq.n	8009f6e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	2bfe      	cmp	r3, #254	; 0xfe
 8009f3c:	d812      	bhi.n	8009f64 <cmp_lfn+0x88>
 8009f3e:	89bb      	ldrh	r3, [r7, #12]
 8009f40:	4618      	mov	r0, r3
 8009f42:	f002 fef1 	bl	800cd28 <ff_wtoupper>
 8009f46:	4603      	mov	r3, r0
 8009f48:	461c      	mov	r4, r3
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	1c5a      	adds	r2, r3, #1
 8009f4e:	617a      	str	r2, [r7, #20]
 8009f50:	005b      	lsls	r3, r3, #1
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	4413      	add	r3, r2
 8009f56:	881b      	ldrh	r3, [r3, #0]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f002 fee5 	bl	800cd28 <ff_wtoupper>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	429c      	cmp	r4, r3
 8009f62:	d001      	beq.n	8009f68 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009f64:	2300      	movs	r3, #0
 8009f66:	e022      	b.n	8009fae <cmp_lfn+0xd2>
			}
			wc = uc;
 8009f68:	89bb      	ldrh	r3, [r7, #12]
 8009f6a:	81fb      	strh	r3, [r7, #14]
 8009f6c:	e006      	b.n	8009f7c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009f6e:	89bb      	ldrh	r3, [r7, #12]
 8009f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d001      	beq.n	8009f7c <cmp_lfn+0xa0>
 8009f78:	2300      	movs	r3, #0
 8009f7a:	e018      	b.n	8009fae <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	613b      	str	r3, [r7, #16]
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	2b0c      	cmp	r3, #12
 8009f86:	d9c8      	bls.n	8009f1a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00b      	beq.n	8009fac <cmp_lfn+0xd0>
 8009f94:	89fb      	ldrh	r3, [r7, #14]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d008      	beq.n	8009fac <cmp_lfn+0xd0>
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	881b      	ldrh	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d001      	beq.n	8009fac <cmp_lfn+0xd0>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	e000      	b.n	8009fae <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009fac:	2301      	movs	r3, #1
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	371c      	adds	r7, #28
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd90      	pop	{r4, r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	0800e05c 	.word	0x0800e05c

08009fbc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	331a      	adds	r3, #26
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe facc 	bl	8008568 <ld_word>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d001      	beq.n	8009fda <pick_lfn+0x1e>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	e04d      	b.n	800a076 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fe2:	1e5a      	subs	r2, r3, #1
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	005b      	lsls	r3, r3, #1
 8009fe8:	4413      	add	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	81fb      	strh	r3, [r7, #14]
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	613b      	str	r3, [r7, #16]
 8009ff8:	e028      	b.n	800a04c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009ffa:	4a21      	ldr	r2, [pc, #132]	; (800a080 <pick_lfn+0xc4>)
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	4413      	add	r3, r2
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	461a      	mov	r2, r3
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	4413      	add	r3, r2
 800a008:	4618      	mov	r0, r3
 800a00a:	f7fe faad 	bl	8008568 <ld_word>
 800a00e:	4603      	mov	r3, r0
 800a010:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a012:	89fb      	ldrh	r3, [r7, #14]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00f      	beq.n	800a038 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	2bfe      	cmp	r3, #254	; 0xfe
 800a01c:	d901      	bls.n	800a022 <pick_lfn+0x66>
 800a01e:	2300      	movs	r3, #0
 800a020:	e029      	b.n	800a076 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a022:	89bb      	ldrh	r3, [r7, #12]
 800a024:	81fb      	strh	r3, [r7, #14]
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	1c5a      	adds	r2, r3, #1
 800a02a:	617a      	str	r2, [r7, #20]
 800a02c:	005b      	lsls	r3, r3, #1
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	4413      	add	r3, r2
 800a032:	89fa      	ldrh	r2, [r7, #14]
 800a034:	801a      	strh	r2, [r3, #0]
 800a036:	e006      	b.n	800a046 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a038:	89bb      	ldrh	r3, [r7, #12]
 800a03a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a03e:	4293      	cmp	r3, r2
 800a040:	d001      	beq.n	800a046 <pick_lfn+0x8a>
 800a042:	2300      	movs	r3, #0
 800a044:	e017      	b.n	800a076 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	3301      	adds	r3, #1
 800a04a:	613b      	str	r3, [r7, #16]
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	2b0c      	cmp	r3, #12
 800a050:	d9d3      	bls.n	8009ffa <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00a      	beq.n	800a074 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2bfe      	cmp	r3, #254	; 0xfe
 800a062:	d901      	bls.n	800a068 <pick_lfn+0xac>
 800a064:	2300      	movs	r3, #0
 800a066:	e006      	b.n	800a076 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	005b      	lsls	r3, r3, #1
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	4413      	add	r3, r2
 800a070:	2200      	movs	r2, #0
 800a072:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800a074:	2301      	movs	r3, #1
}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	0800e05c 	.word	0x0800e05c

0800a084 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	4611      	mov	r1, r2
 800a090:	461a      	mov	r2, r3
 800a092:	460b      	mov	r3, r1
 800a094:	71fb      	strb	r3, [r7, #7]
 800a096:	4613      	mov	r3, r2
 800a098:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	330d      	adds	r3, #13
 800a09e:	79ba      	ldrb	r2, [r7, #6]
 800a0a0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	330b      	adds	r3, #11
 800a0a6:	220f      	movs	r2, #15
 800a0a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	330c      	adds	r3, #12
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	331a      	adds	r3, #26
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fe fb6b 	bl	8008794 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a0be:	79fb      	ldrb	r3, [r7, #7]
 800a0c0:	1e5a      	subs	r2, r3, #1
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	005b      	lsls	r3, r3, #1
 800a0c6:	4413      	add	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4413      	add	r3, r2
 800a0cc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	82fb      	strh	r3, [r7, #22]
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a0d6:	8afb      	ldrh	r3, [r7, #22]
 800a0d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d007      	beq.n	800a0f0 <put_lfn+0x6c>
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	1c5a      	adds	r2, r3, #1
 800a0e4:	61fa      	str	r2, [r7, #28]
 800a0e6:	005b      	lsls	r3, r3, #1
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	881b      	ldrh	r3, [r3, #0]
 800a0ee:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a0f0:	4a17      	ldr	r2, [pc, #92]	; (800a150 <put_lfn+0xcc>)
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	8afa      	ldrh	r2, [r7, #22]
 800a100:	4611      	mov	r1, r2
 800a102:	4618      	mov	r0, r3
 800a104:	f7fe fb46 	bl	8008794 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a108:	8afb      	ldrh	r3, [r7, #22]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d102      	bne.n	800a114 <put_lfn+0x90>
 800a10e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a112:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	3301      	adds	r3, #1
 800a118:	61bb      	str	r3, [r7, #24]
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	2b0c      	cmp	r3, #12
 800a11e:	d9da      	bls.n	800a0d6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a120:	8afb      	ldrh	r3, [r7, #22]
 800a122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a126:	4293      	cmp	r3, r2
 800a128:	d006      	beq.n	800a138 <put_lfn+0xb4>
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	005b      	lsls	r3, r3, #1
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	4413      	add	r3, r2
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d103      	bne.n	800a140 <put_lfn+0xbc>
 800a138:	79fb      	ldrb	r3, [r7, #7]
 800a13a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a13e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	79fa      	ldrb	r2, [r7, #7]
 800a144:	701a      	strb	r2, [r3, #0]
}
 800a146:	bf00      	nop
 800a148:	3720      	adds	r7, #32
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	0800e05c 	.word	0x0800e05c

0800a154 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b08c      	sub	sp, #48	; 0x30
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
 800a160:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a162:	220b      	movs	r2, #11
 800a164:	68b9      	ldr	r1, [r7, #8]
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f7fe fbe3 	bl	8008932 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	2b05      	cmp	r3, #5
 800a170:	d92b      	bls.n	800a1ca <gen_numname+0x76>
		sr = seq;
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a176:	e022      	b.n	800a1be <gen_numname+0x6a>
			wc = *lfn++;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	1c9a      	adds	r2, r3, #2
 800a17c:	607a      	str	r2, [r7, #4]
 800a17e:	881b      	ldrh	r3, [r3, #0]
 800a180:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a182:	2300      	movs	r3, #0
 800a184:	62bb      	str	r3, [r7, #40]	; 0x28
 800a186:	e017      	b.n	800a1b8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	005a      	lsls	r2, r3, #1
 800a18c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a18e:	f003 0301 	and.w	r3, r3, #1
 800a192:	4413      	add	r3, r2
 800a194:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a196:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a198:	085b      	lsrs	r3, r3, #1
 800a19a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d005      	beq.n	800a1b2 <gen_numname+0x5e>
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a1ac:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a1b0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ba:	2b0f      	cmp	r3, #15
 800a1bc:	d9e4      	bls.n	800a188 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	881b      	ldrh	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1d8      	bne.n	800a178 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a1ca:	2307      	movs	r3, #7
 800a1cc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	f003 030f 	and.w	r3, r3, #15
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	3330      	adds	r3, #48	; 0x30
 800a1da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a1de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1e2:	2b39      	cmp	r3, #57	; 0x39
 800a1e4:	d904      	bls.n	800a1f0 <gen_numname+0x9c>
 800a1e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1ea:	3307      	adds	r3, #7
 800a1ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f2:	1e5a      	subs	r2, r3, #1
 800a1f4:	62ba      	str	r2, [r7, #40]	; 0x28
 800a1f6:	3330      	adds	r3, #48	; 0x30
 800a1f8:	443b      	add	r3, r7
 800a1fa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a1fe:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	091b      	lsrs	r3, r3, #4
 800a206:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1df      	bne.n	800a1ce <gen_numname+0x7a>
	ns[i] = '~';
 800a20e:	f107 0214 	add.w	r2, r7, #20
 800a212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a214:	4413      	add	r3, r2
 800a216:	227e      	movs	r2, #126	; 0x7e
 800a218:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a21a:	2300      	movs	r3, #0
 800a21c:	627b      	str	r3, [r7, #36]	; 0x24
 800a21e:	e002      	b.n	800a226 <gen_numname+0xd2>
 800a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a222:	3301      	adds	r3, #1
 800a224:	627b      	str	r3, [r7, #36]	; 0x24
 800a226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d205      	bcs.n	800a23a <gen_numname+0xe6>
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a232:	4413      	add	r3, r2
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	2b20      	cmp	r3, #32
 800a238:	d1f2      	bne.n	800a220 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23c:	2b07      	cmp	r3, #7
 800a23e:	d807      	bhi.n	800a250 <gen_numname+0xfc>
 800a240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a242:	1c5a      	adds	r2, r3, #1
 800a244:	62ba      	str	r2, [r7, #40]	; 0x28
 800a246:	3330      	adds	r3, #48	; 0x30
 800a248:	443b      	add	r3, r7
 800a24a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a24e:	e000      	b.n	800a252 <gen_numname+0xfe>
 800a250:	2120      	movs	r1, #32
 800a252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a254:	1c5a      	adds	r2, r3, #1
 800a256:	627a      	str	r2, [r7, #36]	; 0x24
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	4413      	add	r3, r2
 800a25c:	460a      	mov	r2, r1
 800a25e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	2b07      	cmp	r3, #7
 800a264:	d9e9      	bls.n	800a23a <gen_numname+0xe6>
}
 800a266:	bf00      	nop
 800a268:	bf00      	nop
 800a26a:	3730      	adds	r7, #48	; 0x30
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a278:	2300      	movs	r3, #0
 800a27a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a27c:	230b      	movs	r3, #11
 800a27e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a280:	7bfb      	ldrb	r3, [r7, #15]
 800a282:	b2da      	uxtb	r2, r3
 800a284:	0852      	lsrs	r2, r2, #1
 800a286:	01db      	lsls	r3, r3, #7
 800a288:	4313      	orrs	r3, r2
 800a28a:	b2da      	uxtb	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	1c59      	adds	r1, r3, #1
 800a290:	6079      	str	r1, [r7, #4]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	4413      	add	r3, r2
 800a296:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	60bb      	str	r3, [r7, #8]
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1ed      	bne.n	800a280 <sum_sfn+0x10>
	return sum;
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800a2b2:	b480      	push	{r7}
 800a2b4:	b087      	sub	sp, #28
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	015b      	lsls	r3, r3, #5
 800a2c4:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	827b      	strh	r3, [r7, #18]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	617b      	str	r3, [r7, #20]
 800a2ce:	e018      	b.n	800a302 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d103      	bne.n	800a2de <xdir_sum+0x2c>
			i++;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	617b      	str	r3, [r7, #20]
 800a2dc:	e00e      	b.n	800a2fc <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800a2de:	8a7b      	ldrh	r3, [r7, #18]
 800a2e0:	03db      	lsls	r3, r3, #15
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	8a7b      	ldrh	r3, [r7, #18]
 800a2e6:	085b      	lsrs	r3, r3, #1
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	4413      	add	r3, r2
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	6879      	ldr	r1, [r7, #4]
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	440b      	add	r3, r1
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	4413      	add	r3, r2
 800a2fa:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	3301      	adds	r3, #1
 800a300:	617b      	str	r3, [r7, #20]
 800a302:	697a      	ldr	r2, [r7, #20]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	429a      	cmp	r2, r3
 800a308:	d3e2      	bcc.n	800a2d0 <xdir_sum+0x1e>
		}
	}
	return sum;
 800a30a:	8a7b      	ldrh	r3, [r7, #18]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	371c      	adds	r7, #28
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800a320:	2300      	movs	r3, #0
 800a322:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800a324:	e01f      	b.n	800a366 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800a326:	89bb      	ldrh	r3, [r7, #12]
 800a328:	4618      	mov	r0, r3
 800a32a:	f002 fcfd 	bl	800cd28 <ff_wtoupper>
 800a32e:	4603      	mov	r3, r0
 800a330:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800a332:	89fb      	ldrh	r3, [r7, #14]
 800a334:	03db      	lsls	r3, r3, #15
 800a336:	b29a      	uxth	r2, r3
 800a338:	89fb      	ldrh	r3, [r7, #14]
 800a33a:	085b      	lsrs	r3, r3, #1
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	4413      	add	r3, r2
 800a340:	b29a      	uxth	r2, r3
 800a342:	89bb      	ldrh	r3, [r7, #12]
 800a344:	b2db      	uxtb	r3, r3
 800a346:	b29b      	uxth	r3, r3
 800a348:	4413      	add	r3, r2
 800a34a:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800a34c:	89fb      	ldrh	r3, [r7, #14]
 800a34e:	03db      	lsls	r3, r3, #15
 800a350:	b29a      	uxth	r2, r3
 800a352:	89fb      	ldrh	r3, [r7, #14]
 800a354:	085b      	lsrs	r3, r3, #1
 800a356:	b29b      	uxth	r3, r3
 800a358:	4413      	add	r3, r2
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	89bb      	ldrh	r3, [r7, #12]
 800a35e:	0a1b      	lsrs	r3, r3, #8
 800a360:	b29b      	uxth	r3, r3
 800a362:	4413      	add	r3, r2
 800a364:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	1c9a      	adds	r2, r3, #2
 800a36a:	607a      	str	r2, [r7, #4]
 800a36c:	881b      	ldrh	r3, [r3, #0]
 800a36e:	81bb      	strh	r3, [r7, #12]
 800a370:	89bb      	ldrh	r3, [r7, #12]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1d7      	bne.n	800a326 <xname_sum+0xe>
	}
	return sum;
 800a376:	89fb      	ldrh	r3, [r7, #14]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800a380:	b590      	push	{r4, r7, lr}
 800a382:	b087      	sub	sp, #28
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	695b      	ldr	r3, [r3, #20]
 800a38e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a398:	4619      	mov	r1, r3
 800a39a:	4610      	mov	r0, r2
 800a39c:	f7fe fcf8 	bl	8008d90 <move_window>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <load_xdir+0x2e>
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
 800a3ac:	e09f      	b.n	800a4ee <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	2b85      	cmp	r3, #133	; 0x85
 800a3b6:	d001      	beq.n	800a3bc <load_xdir+0x3c>
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	e098      	b.n	800a4ee <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3c0:	2220      	movs	r2, #32
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6938      	ldr	r0, [r7, #16]
 800a3c6:	f7fe fab4 	bl	8008932 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	015b      	lsls	r3, r3, #5
 800a3d4:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	2b5f      	cmp	r3, #95	; 0x5f
 800a3da:	d903      	bls.n	800a3e4 <load_xdir+0x64>
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800a3e2:	d901      	bls.n	800a3e8 <load_xdir+0x68>
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	e082      	b.n	800a4ee <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f7ff fbf5 	bl	8009bda <dir_next>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <load_xdir+0x7e>
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
 800a3fc:	e077      	b.n	800a4ee <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a406:	4619      	mov	r1, r3
 800a408:	4610      	mov	r0, r2
 800a40a:	f7fe fcc1 	bl	8008d90 <move_window>
 800a40e:	4603      	mov	r3, r0
 800a410:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a412:	7bfb      	ldrb	r3, [r7, #15]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <load_xdir+0x9c>
 800a418:	7bfb      	ldrb	r3, [r7, #15]
 800a41a:	e068      	b.n	800a4ee <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	2bc0      	cmp	r3, #192	; 0xc0
 800a424:	d001      	beq.n	800a42a <load_xdir+0xaa>
 800a426:	2302      	movs	r3, #2
 800a428:	e061      	b.n	800a4ee <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	f103 0020 	add.w	r0, r3, #32
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a434:	2220      	movs	r2, #32
 800a436:	4619      	mov	r1, r3
 800a438:	f7fe fa7b 	bl	8008932 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	3323      	adds	r3, #35	; 0x23
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	332c      	adds	r3, #44	; 0x2c
 800a444:	4a2c      	ldr	r2, [pc, #176]	; (800a4f8 <load_xdir+0x178>)
 800a446:	fba2 2303 	umull	r2, r3, r2, r3
 800a44a:	08db      	lsrs	r3, r3, #3
 800a44c:	015b      	lsls	r3, r3, #5
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	429a      	cmp	r2, r3
 800a452:	d201      	bcs.n	800a458 <load_xdir+0xd8>
 800a454:	2302      	movs	r3, #2
 800a456:	e04a      	b.n	800a4ee <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800a458:	2340      	movs	r3, #64	; 0x40
 800a45a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800a45c:	2100      	movs	r1, #0
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7ff fbbb 	bl	8009bda <dir_next>
 800a464:	4603      	mov	r3, r0
 800a466:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800a468:	7bfb      	ldrb	r3, [r7, #15]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d001      	beq.n	800a472 <load_xdir+0xf2>
 800a46e:	7bfb      	ldrb	r3, [r7, #15]
 800a470:	e03d      	b.n	800a4ee <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a47a:	4619      	mov	r1, r3
 800a47c:	4610      	mov	r0, r2
 800a47e:	f7fe fc87 	bl	8008d90 <move_window>
 800a482:	4603      	mov	r3, r0
 800a484:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800a486:	7bfb      	ldrb	r3, [r7, #15]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d001      	beq.n	800a490 <load_xdir+0x110>
 800a48c:	7bfb      	ldrb	r3, [r7, #15]
 800a48e:	e02e      	b.n	800a4ee <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	2bc1      	cmp	r3, #193	; 0xc1
 800a498:	d001      	beq.n	800a49e <load_xdir+0x11e>
 800a49a:	2302      	movs	r3, #2
 800a49c:	e027      	b.n	800a4ee <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800a4a4:	d208      	bcs.n	800a4b8 <load_xdir+0x138>
 800a4a6:	693a      	ldr	r2, [r7, #16]
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	18d0      	adds	r0, r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b0:	2220      	movs	r2, #32
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	f7fe fa3d 	bl	8008932 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	3320      	adds	r3, #32
 800a4bc:	617b      	str	r3, [r7, #20]
 800a4be:	697a      	ldr	r2, [r7, #20]
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d3ca      	bcc.n	800a45c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800a4cc:	d80e      	bhi.n	800a4ec <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800a4ce:	6938      	ldr	r0, [r7, #16]
 800a4d0:	f7ff feef 	bl	800a2b2 <xdir_sum>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	461c      	mov	r4, r3
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	3302      	adds	r3, #2
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fe f843 	bl	8008568 <ld_word>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	429c      	cmp	r4, r3
 800a4e6:	d001      	beq.n	800a4ec <load_xdir+0x16c>
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	e000      	b.n	800a4ee <load_xdir+0x16e>
	}
	return FR_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	371c      	adds	r7, #28
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd90      	pop	{r4, r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	88888889 	.word	0x88888889

0800a4fc <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800a4fc:	b5b0      	push	{r4, r5, r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800a506:	6839      	ldr	r1, [r7, #0]
 800a508:	6808      	ldr	r0, [r1, #0]
 800a50a:	6879      	ldr	r1, [r7, #4]
 800a50c:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800a50e:	6839      	ldr	r1, [r7, #0]
 800a510:	6a08      	ldr	r0, [r1, #32]
 800a512:	6879      	ldr	r1, [r7, #4]
 800a514:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800a51a:	b2c8      	uxtb	r0, r1
 800a51c:	6879      	ldr	r1, [r7, #4]
 800a51e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800a520:	6839      	ldr	r1, [r7, #0]
 800a522:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800a524:	2000      	movs	r0, #0
 800a526:	460c      	mov	r4, r1
 800a528:	4605      	mov	r5, r0
 800a52a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800a52e:	2300      	movs	r3, #0
 800a530:	6879      	ldr	r1, [r7, #4]
 800a532:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f7ff fab4 	bl	8009ab2 <dir_sdi>
 800a54a:	4603      	mov	r3, r0
 800a54c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a54e:	7bfb      	ldrb	r3, [r7, #15]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d104      	bne.n	800a55e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7ff ff13 	bl	800a380 <load_xdir>
 800a55a:	4603      	mov	r3, r0
 800a55c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800a55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bdb0      	pop	{r4, r5, r7, pc}

0800a568 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800a568:	b590      	push	{r4, r7, lr}
 800a56a:	b087      	sub	sp, #28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	695b      	ldr	r3, [r3, #20]
 800a576:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	1c9c      	adds	r4, r3, #2
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f7ff fe98 	bl	800a2b2 <xdir_sum>
 800a582:	4603      	mov	r3, r0
 800a584:	4619      	mov	r1, r3
 800a586:	4620      	mov	r0, r4
 800a588:	f7fe f904 	bl	8008794 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	3301      	adds	r3, #1
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	3301      	adds	r3, #1
 800a594:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a59a:	4619      	mov	r1, r3
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f7ff fa88 	bl	8009ab2 <dir_sdi>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800a5a6:	e026      	b.n	800a5f6 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	f7fe fbec 	bl	8008d90 <move_window>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a5bc:	7dfb      	ldrb	r3, [r7, #23]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d11d      	bne.n	800a5fe <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5c6:	2220      	movs	r2, #32
 800a5c8:	68f9      	ldr	r1, [r7, #12]
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fe f9b1 	bl	8008932 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	613b      	str	r3, [r7, #16]
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00e      	beq.n	800a602 <store_xdir+0x9a>
		dirb += SZDIRE;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	3320      	adds	r3, #32
 800a5e8:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7ff faf4 	bl	8009bda <dir_next>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800a5f6:	7dfb      	ldrb	r3, [r7, #23]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d0d5      	beq.n	800a5a8 <store_xdir+0x40>
 800a5fc:	e002      	b.n	800a604 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800a5fe:	bf00      	nop
 800a600:	e000      	b.n	800a604 <store_xdir+0x9c>
		if (--nent == 0) break;
 800a602:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800a604:	7dfb      	ldrb	r3, [r7, #23]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d002      	beq.n	800a610 <store_xdir+0xa8>
 800a60a:	7dfb      	ldrb	r3, [r7, #23]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d101      	bne.n	800a614 <store_xdir+0xac>
 800a610:	7dfb      	ldrb	r3, [r7, #23]
 800a612:	e000      	b.n	800a616 <store_xdir+0xae>
 800a614:	2302      	movs	r3, #2
}
 800a616:	4618      	mov	r0, r3
 800a618:	371c      	adds	r7, #28
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd90      	pop	{r4, r7, pc}

0800a61e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800a61e:	b590      	push	{r4, r7, lr}
 800a620:	b085      	sub	sp, #20
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800a628:	2240      	movs	r2, #64	; 0x40
 800a62a:	2100      	movs	r1, #0
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f7fe f9a1 	bl	8008974 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2285      	movs	r2, #133	; 0x85
 800a636:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	3320      	adds	r3, #32
 800a63c:	22c0      	movs	r2, #192	; 0xc0
 800a63e:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800a640:	2300      	movs	r3, #0
 800a642:	72bb      	strb	r3, [r7, #10]
 800a644:	2301      	movs	r3, #1
 800a646:	72fb      	strb	r3, [r7, #11]
 800a648:	2301      	movs	r3, #1
 800a64a:	813b      	strh	r3, [r7, #8]
 800a64c:	2340      	movs	r3, #64	; 0x40
 800a64e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	1c5a      	adds	r2, r3, #1
 800a654:	60fa      	str	r2, [r7, #12]
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	4413      	add	r3, r2
 800a65a:	22c1      	movs	r2, #193	; 0xc1
 800a65c:	701a      	strb	r2, [r3, #0]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	1c5a      	adds	r2, r3, #1
 800a662:	60fa      	str	r2, [r7, #12]
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	4413      	add	r3, r2
 800a668:	2200      	movs	r2, #0
 800a66a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800a66c:	893b      	ldrh	r3, [r7, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00b      	beq.n	800a68a <create_xdir+0x6c>
 800a672:	7abb      	ldrb	r3, [r7, #10]
 800a674:	005b      	lsls	r3, r3, #1
 800a676:	683a      	ldr	r2, [r7, #0]
 800a678:	4413      	add	r3, r2
 800a67a:	881b      	ldrh	r3, [r3, #0]
 800a67c:	813b      	strh	r3, [r7, #8]
 800a67e:	893b      	ldrh	r3, [r7, #8]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d002      	beq.n	800a68a <create_xdir+0x6c>
 800a684:	7abb      	ldrb	r3, [r7, #10]
 800a686:	3301      	adds	r3, #1
 800a688:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	4413      	add	r3, r2
 800a690:	893a      	ldrh	r2, [r7, #8]
 800a692:	4611      	mov	r1, r2
 800a694:	4618      	mov	r0, r3
 800a696:	f7fe f87d 	bl	8008794 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	3302      	adds	r3, #2
 800a69e:	60fb      	str	r3, [r7, #12]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f003 031f 	and.w	r3, r3, #31
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1e0      	bne.n	800a66c <create_xdir+0x4e>
		nb++;
 800a6aa:	7afb      	ldrb	r3, [r7, #11]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800a6b0:	7abb      	ldrb	r3, [r7, #10]
 800a6b2:	005b      	lsls	r3, r3, #1
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	881b      	ldrh	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1c8      	bne.n	800a650 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	3323      	adds	r3, #35	; 0x23
 800a6c2:	7aba      	ldrb	r2, [r7, #10]
 800a6c4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	7afa      	ldrb	r2, [r7, #11]
 800a6cc:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800a6d4:	6838      	ldr	r0, [r7, #0]
 800a6d6:	f7ff fe1f 	bl	800a318 <xname_sum>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	4619      	mov	r1, r3
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f7fe f858 	bl	8008794 <st_word>
}
 800a6e4:	bf00      	nop
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd90      	pop	{r4, r7, pc}

0800a6ec <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800a6f6:	2304      	movs	r3, #4
 800a6f8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800a700:	23ff      	movs	r3, #255	; 0xff
 800a702:	757b      	strb	r3, [r7, #21]
 800a704:	23ff      	movs	r3, #255	; 0xff
 800a706:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800a708:	e09f      	b.n	800a84a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70e:	4619      	mov	r1, r3
 800a710:	6938      	ldr	r0, [r7, #16]
 800a712:	f7fe fb3d 	bl	8008d90 <move_window>
 800a716:	4603      	mov	r3, r0
 800a718:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f040 809a 	bne.w	800a856 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800a72a:	7dbb      	ldrb	r3, [r7, #22]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d102      	bne.n	800a736 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800a730:	2304      	movs	r3, #4
 800a732:	75fb      	strb	r3, [r7, #23]
 800a734:	e096      	b.n	800a864 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	2b04      	cmp	r3, #4
 800a73c:	d118      	bne.n	800a770 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800a73e:	7dbb      	ldrb	r3, [r7, #22]
 800a740:	2b85      	cmp	r3, #133	; 0x85
 800a742:	d179      	bne.n	800a838 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f7ff fe17 	bl	800a380 <load_xdir>
 800a752:	4603      	mov	r3, r0
 800a754:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800a756:	7dfb      	ldrb	r3, [r7, #23]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d17e      	bne.n	800a85a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	695b      	ldr	r3, [r3, #20]
 800a760:	3304      	adds	r3, #4
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	719a      	strb	r2, [r3, #6]
					}
					break;
 800a76e:	e074      	b.n	800a85a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a774:	330b      	adds	r3, #11
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a77c:	73fb      	strb	r3, [r7, #15]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	7bfa      	ldrb	r2, [r7, #15]
 800a782:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800a784:	7dbb      	ldrb	r3, [r7, #22]
 800a786:	2be5      	cmp	r3, #229	; 0xe5
 800a788:	d00e      	beq.n	800a7a8 <dir_read+0xbc>
 800a78a:	7dbb      	ldrb	r3, [r7, #22]
 800a78c:	2b2e      	cmp	r3, #46	; 0x2e
 800a78e:	d00b      	beq.n	800a7a8 <dir_read+0xbc>
 800a790:	7bfb      	ldrb	r3, [r7, #15]
 800a792:	f023 0320 	bic.w	r3, r3, #32
 800a796:	2b08      	cmp	r3, #8
 800a798:	bf0c      	ite	eq
 800a79a:	2301      	moveq	r3, #1
 800a79c:	2300      	movne	r3, #0
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d002      	beq.n	800a7ae <dir_read+0xc2>
				ord = 0xFF;
 800a7a8:	23ff      	movs	r3, #255	; 0xff
 800a7aa:	757b      	strb	r3, [r7, #21]
 800a7ac:	e044      	b.n	800a838 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800a7ae:	7bfb      	ldrb	r3, [r7, #15]
 800a7b0:	2b0f      	cmp	r3, #15
 800a7b2:	d12f      	bne.n	800a814 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800a7b4:	7dbb      	ldrb	r3, [r7, #22]
 800a7b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00d      	beq.n	800a7da <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7c2:	7b5b      	ldrb	r3, [r3, #13]
 800a7c4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800a7c6:	7dbb      	ldrb	r3, [r7, #22]
 800a7c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7cc:	75bb      	strb	r3, [r7, #22]
 800a7ce:	7dbb      	ldrb	r3, [r7, #22]
 800a7d0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a7da:	7dba      	ldrb	r2, [r7, #22]
 800a7dc:	7d7b      	ldrb	r3, [r7, #21]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d115      	bne.n	800a80e <dir_read+0x122>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7e6:	330d      	adds	r3, #13
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	7d3a      	ldrb	r2, [r7, #20]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d10e      	bne.n	800a80e <dir_read+0x122>
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	691a      	ldr	r2, [r3, #16]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4610      	mov	r0, r2
 800a7fc:	f7ff fbde 	bl	8009fbc <pick_lfn>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d003      	beq.n	800a80e <dir_read+0x122>
 800a806:	7d7b      	ldrb	r3, [r7, #21]
 800a808:	3b01      	subs	r3, #1
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	e000      	b.n	800a810 <dir_read+0x124>
 800a80e:	23ff      	movs	r3, #255	; 0xff
 800a810:	757b      	strb	r3, [r7, #21]
 800a812:	e011      	b.n	800a838 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800a814:	7d7b      	ldrb	r3, [r7, #21]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d109      	bne.n	800a82e <dir_read+0x142>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a81e:	4618      	mov	r0, r3
 800a820:	f7ff fd26 	bl	800a270 <sum_sfn>
 800a824:	4603      	mov	r3, r0
 800a826:	461a      	mov	r2, r3
 800a828:	7d3b      	ldrb	r3, [r7, #20]
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d017      	beq.n	800a85e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f04f 32ff 	mov.w	r2, #4294967295
 800a834:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800a836:	e012      	b.n	800a85e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800a838:	2100      	movs	r1, #0
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f7ff f9cd 	bl	8009bda <dir_next>
 800a840:	4603      	mov	r3, r0
 800a842:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a844:	7dfb      	ldrb	r3, [r7, #23]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10b      	bne.n	800a862 <dir_read+0x176>
	while (dp->sect) {
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f47f af5b 	bne.w	800a70a <dir_read+0x1e>
 800a854:	e006      	b.n	800a864 <dir_read+0x178>
		if (res != FR_OK) break;
 800a856:	bf00      	nop
 800a858:	e004      	b.n	800a864 <dir_read+0x178>
					break;
 800a85a:	bf00      	nop
 800a85c:	e002      	b.n	800a864 <dir_read+0x178>
					break;
 800a85e:	bf00      	nop
 800a860:	e000      	b.n	800a864 <dir_read+0x178>
		if (res != FR_OK) break;
 800a862:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a864:	7dfb      	ldrb	r3, [r7, #23]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d002      	beq.n	800a870 <dir_read+0x184>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800a870:	7dfb      	ldrb	r3, [r7, #23]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3718      	adds	r7, #24
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a87a:	b590      	push	{r4, r7, lr}
 800a87c:	b089      	sub	sp, #36	; 0x24
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a888:	2100      	movs	r1, #0
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f7ff f911 	bl	8009ab2 <dir_sdi>
 800a890:	4603      	mov	r3, r0
 800a892:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800a894:	7ffb      	ldrb	r3, [r7, #31]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d001      	beq.n	800a89e <dir_find+0x24>
 800a89a:	7ffb      	ldrb	r3, [r7, #31]
 800a89c:	e112      	b.n	800aac4 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	2b04      	cmp	r3, #4
 800a8a4:	d164      	bne.n	800a970 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7ff fd34 	bl	800a318 <xname_sum>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800a8b4:	e04f      	b.n	800a956 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	695b      	ldr	r3, [r3, #20]
 800a8ba:	3324      	adds	r3, #36	; 0x24
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fd fe53 	bl	8008568 <ld_word>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	893b      	ldrh	r3, [r7, #8]
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d000      	beq.n	800a8ce <dir_find+0x54>
 800a8cc:	e043      	b.n	800a956 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	695b      	ldr	r3, [r3, #20]
 800a8d2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a8d6:	76fb      	strb	r3, [r7, #27]
 800a8d8:	2340      	movs	r3, #64	; 0x40
 800a8da:	617b      	str	r3, [r7, #20]
 800a8dc:	2300      	movs	r3, #0
 800a8de:	613b      	str	r3, [r7, #16]
 800a8e0:	e029      	b.n	800a936 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	f003 031f 	and.w	r3, r3, #31
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d102      	bne.n	800a8f2 <dir_find+0x78>
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	3302      	adds	r3, #2
 800a8f0:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	695a      	ldr	r2, [r3, #20]
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7fd fe34 	bl	8008568 <ld_word>
 800a900:	4603      	mov	r3, r0
 800a902:	4618      	mov	r0, r3
 800a904:	f002 fa10 	bl	800cd28 <ff_wtoupper>
 800a908:	4603      	mov	r3, r0
 800a90a:	461c      	mov	r4, r3
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	691a      	ldr	r2, [r3, #16]
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	005b      	lsls	r3, r3, #1
 800a914:	4413      	add	r3, r2
 800a916:	881b      	ldrh	r3, [r3, #0]
 800a918:	4618      	mov	r0, r3
 800a91a:	f002 fa05 	bl	800cd28 <ff_wtoupper>
 800a91e:	4603      	mov	r3, r0
 800a920:	429c      	cmp	r4, r3
 800a922:	d10c      	bne.n	800a93e <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800a924:	7efb      	ldrb	r3, [r7, #27]
 800a926:	3b01      	subs	r3, #1
 800a928:	76fb      	strb	r3, [r7, #27]
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	3302      	adds	r3, #2
 800a92e:	617b      	str	r3, [r7, #20]
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	3301      	adds	r3, #1
 800a934:	613b      	str	r3, [r7, #16]
 800a936:	7efb      	ldrb	r3, [r7, #27]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1d2      	bne.n	800a8e2 <dir_find+0x68>
 800a93c:	e000      	b.n	800a940 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800a93e:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800a940:	7efb      	ldrb	r3, [r7, #27]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d107      	bne.n	800a956 <dir_find+0xdc>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	691a      	ldr	r2, [r3, #16]
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	005b      	lsls	r3, r3, #1
 800a94e:	4413      	add	r3, r2
 800a950:	881b      	ldrh	r3, [r3, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d009      	beq.n	800a96a <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800a956:	2100      	movs	r1, #0
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7ff fec7 	bl	800a6ec <dir_read>
 800a95e:	4603      	mov	r3, r0
 800a960:	77fb      	strb	r3, [r7, #31]
 800a962:	7ffb      	ldrb	r3, [r7, #31]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d0a6      	beq.n	800a8b6 <dir_find+0x3c>
 800a968:	e000      	b.n	800a96c <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800a96a:	bf00      	nop
		}
		return res;
 800a96c:	7ffb      	ldrb	r3, [r7, #31]
 800a96e:	e0a9      	b.n	800aac4 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a970:	23ff      	movs	r3, #255	; 0xff
 800a972:	773b      	strb	r3, [r7, #28]
 800a974:	7f3b      	ldrb	r3, [r7, #28]
 800a976:	777b      	strb	r3, [r7, #29]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f04f 32ff 	mov.w	r2, #4294967295
 800a97e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a984:	4619      	mov	r1, r3
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f7fe fa02 	bl	8008d90 <move_window>
 800a98c:	4603      	mov	r3, r0
 800a98e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800a990:	7ffb      	ldrb	r3, [r7, #31]
 800a992:	2b00      	cmp	r3, #0
 800a994:	f040 8090 	bne.w	800aab8 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a9a0:	7fbb      	ldrb	r3, [r7, #30]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d102      	bne.n	800a9ac <dir_find+0x132>
 800a9a6:	2304      	movs	r3, #4
 800a9a8:	77fb      	strb	r3, [r7, #31]
 800a9aa:	e08a      	b.n	800aac2 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9b0:	330b      	adds	r3, #11
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9b8:	72fb      	strb	r3, [r7, #11]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	7afa      	ldrb	r2, [r7, #11]
 800a9be:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a9c0:	7fbb      	ldrb	r3, [r7, #30]
 800a9c2:	2be5      	cmp	r3, #229	; 0xe5
 800a9c4:	d007      	beq.n	800a9d6 <dir_find+0x15c>
 800a9c6:	7afb      	ldrb	r3, [r7, #11]
 800a9c8:	f003 0308 	and.w	r3, r3, #8
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d009      	beq.n	800a9e4 <dir_find+0x16a>
 800a9d0:	7afb      	ldrb	r3, [r7, #11]
 800a9d2:	2b0f      	cmp	r3, #15
 800a9d4:	d006      	beq.n	800a9e4 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a9d6:	23ff      	movs	r3, #255	; 0xff
 800a9d8:	777b      	strb	r3, [r7, #29]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e0:	64da      	str	r2, [r3, #76]	; 0x4c
 800a9e2:	e05e      	b.n	800aaa2 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a9e4:	7afb      	ldrb	r3, [r7, #11]
 800a9e6:	2b0f      	cmp	r3, #15
 800a9e8:	d136      	bne.n	800aa58 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a9f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d154      	bne.n	800aaa2 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a9f8:	7fbb      	ldrb	r3, [r7, #30]
 800a9fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00d      	beq.n	800aa1e <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa06:	7b5b      	ldrb	r3, [r3, #13]
 800aa08:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800aa0a:	7fbb      	ldrb	r3, [r7, #30]
 800aa0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa10:	77bb      	strb	r3, [r7, #30]
 800aa12:	7fbb      	ldrb	r3, [r7, #30]
 800aa14:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800aa1e:	7fba      	ldrb	r2, [r7, #30]
 800aa20:	7f7b      	ldrb	r3, [r7, #29]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d115      	bne.n	800aa52 <dir_find+0x1d8>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa2a:	330d      	adds	r3, #13
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	7f3a      	ldrb	r2, [r7, #28]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d10e      	bne.n	800aa52 <dir_find+0x1d8>
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	691a      	ldr	r2, [r3, #16]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4610      	mov	r0, r2
 800aa40:	f7ff fa4c 	bl	8009edc <cmp_lfn>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d003      	beq.n	800aa52 <dir_find+0x1d8>
 800aa4a:	7f7b      	ldrb	r3, [r7, #29]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	e000      	b.n	800aa54 <dir_find+0x1da>
 800aa52:	23ff      	movs	r3, #255	; 0xff
 800aa54:	777b      	strb	r3, [r7, #29]
 800aa56:	e024      	b.n	800aaa2 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800aa58:	7f7b      	ldrb	r3, [r7, #29]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d109      	bne.n	800aa72 <dir_find+0x1f8>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7ff fc04 	bl	800a270 <sum_sfn>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	7f3b      	ldrb	r3, [r7, #28]
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d024      	beq.n	800aabc <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800aa78:	f003 0301 	and.w	r3, r3, #1
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d10a      	bne.n	800aa96 <dir_find+0x21c>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	3340      	adds	r3, #64	; 0x40
 800aa88:	220b      	movs	r2, #11
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	f7fd ff8d 	bl	80089aa <mem_cmp>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d014      	beq.n	800aac0 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800aa96:	23ff      	movs	r3, #255	; 0xff
 800aa98:	777b      	strb	r3, [r7, #29]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa0:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f7ff f898 	bl	8009bda <dir_next>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800aaae:	7ffb      	ldrb	r3, [r7, #31]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f43f af65 	beq.w	800a980 <dir_find+0x106>
 800aab6:	e004      	b.n	800aac2 <dir_find+0x248>
		if (res != FR_OK) break;
 800aab8:	bf00      	nop
 800aaba:	e002      	b.n	800aac2 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800aabc:	bf00      	nop
 800aabe:	e000      	b.n	800aac2 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800aac0:	bf00      	nop

	return res;
 800aac2:	7ffb      	ldrb	r3, [r7, #31]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3724      	adds	r7, #36	; 0x24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd90      	pop	{r4, r7, pc}

0800aacc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aacc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800aad0:	b0a0      	sub	sp, #128	; 0x80
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800aae2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d001      	beq.n	800aaee <dir_register+0x22>
 800aaea:	2306      	movs	r3, #6
 800aaec:	e192      	b.n	800ae14 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800aaee:	2300      	movs	r3, #0
 800aaf0:	677b      	str	r3, [r7, #116]	; 0x74
 800aaf2:	e002      	b.n	800aafa <dir_register+0x2e>
 800aaf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	677b      	str	r3, [r7, #116]	; 0x74
 800aafa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aafc:	691a      	ldr	r2, [r3, #16]
 800aafe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab00:	005b      	lsls	r3, r3, #1
 800ab02:	4413      	add	r3, r2
 800ab04:	881b      	ldrh	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d1f4      	bne.n	800aaf4 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ab0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	2b04      	cmp	r3, #4
 800ab10:	f040 80a3 	bne.w	800ac5a <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800ab14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab16:	330e      	adds	r3, #14
 800ab18:	4aa4      	ldr	r2, [pc, #656]	; (800adac <dir_register+0x2e0>)
 800ab1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab1e:	08db      	lsrs	r3, r3, #3
 800ab20:	3302      	adds	r3, #2
 800ab22:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800ab24:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f7ff f93d 	bl	8009da6 <dir_alloc>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800ab32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d002      	beq.n	800ab40 <dir_register+0x74>
 800ab3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ab3e:	e169      	b.n	800ae14 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab46:	3b01      	subs	r3, #1
 800ab48:	015b      	lsls	r3, r3, #5
 800ab4a:	1ad2      	subs	r2, r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d076      	beq.n	800ac46 <dir_register+0x17a>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	79db      	ldrb	r3, [r3, #7]
 800ab5c:	f003 0304 	and.w	r3, r3, #4
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d070      	beq.n	800ac46 <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ab6a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ab6c:	8949      	ldrh	r1, [r1, #10]
 800ab6e:	4608      	mov	r0, r1
 800ab70:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ab72:	8989      	ldrh	r1, [r1, #12]
 800ab74:	fb00 f101 	mul.w	r1, r0, r1
 800ab78:	2000      	movs	r0, #0
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	eb12 0804 	adds.w	r8, r2, r4
 800ab82:	eb43 0905 	adc.w	r9, r3, r5
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe fd2e 	bl	80095f0 <fill_first_frag>
 800ab94:	4603      	mov	r3, r0
 800ab96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ab9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d002      	beq.n	800aba8 <dir_register+0xdc>
 800aba2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aba6:	e135      	b.n	800ae14 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abae:	f04f 32ff 	mov.w	r2, #4294967295
 800abb2:	4619      	mov	r1, r3
 800abb4:	f7fe fd4b 	bl	800964e <fill_last_frag>
 800abb8:	4603      	mov	r3, r0
 800abba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800abbe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d002      	beq.n	800abcc <dir_register+0x100>
 800abc6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800abca:	e123      	b.n	800ae14 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	f107 0308 	add.w	r3, r7, #8
 800abd2:	4611      	mov	r1, r2
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7ff fc91 	bl	800a4fc <load_obj_dir>
 800abda:	4603      	mov	r3, r0
 800abdc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800abe0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d002      	beq.n	800abee <dir_register+0x122>
 800abe8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800abec:	e112      	b.n	800ae14 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800abee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800abfc:	4608      	mov	r0, r1
 800abfe:	f7fd fe10 	bl	8008822 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800ac02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac04:	695b      	ldr	r3, [r3, #20]
 800ac06:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ac10:	4608      	mov	r0, r1
 800ac12:	f7fd fe06 	bl	8008822 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	79da      	ldrb	r2, [r3, #7]
 800ac1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac1c:	695b      	ldr	r3, [r3, #20]
 800ac1e:	3321      	adds	r3, #33	; 0x21
 800ac20:	f042 0201 	orr.w	r2, r2, #1
 800ac24:	b2d2      	uxtb	r2, r2
 800ac26:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800ac28:	f107 0308 	add.w	r3, r7, #8
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7ff fc9b 	bl	800a568 <store_xdir>
 800ac32:	4603      	mov	r3, r0
 800ac34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ac38:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d002      	beq.n	800ac46 <dir_register+0x17a>
 800ac40:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ac44:	e0e6      	b.n	800ae14 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800ac46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac48:	695a      	ldr	r2, [r3, #20]
 800ac4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	4610      	mov	r0, r2
 800ac52:	f7ff fce4 	bl	800a61e <create_xdir>
		return FR_OK;
 800ac56:	2300      	movs	r3, #0
 800ac58:	e0dc      	b.n	800ae14 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ac60:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ac64:	220c      	movs	r2, #12
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fd fe63 	bl	8008932 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ac6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac70:	f003 0301 	and.w	r3, r3, #1
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d033      	beq.n	800ace0 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2240      	movs	r2, #64	; 0x40
 800ac7c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800ac80:	2301      	movs	r3, #1
 800ac82:	67bb      	str	r3, [r7, #120]	; 0x78
 800ac84:	e016      	b.n	800acb4 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800ac8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac8e:	691a      	ldr	r2, [r3, #16]
 800ac90:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800ac94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac96:	f7ff fa5d 	bl	800a154 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7ff fded 	bl	800a87a <dir_find>
 800aca0:	4603      	mov	r3, r0
 800aca2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800aca6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d106      	bne.n	800acbc <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 800acae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acb0:	3301      	adds	r3, #1
 800acb2:	67bb      	str	r3, [r7, #120]	; 0x78
 800acb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acb6:	2b63      	cmp	r3, #99	; 0x63
 800acb8:	d9e5      	bls.n	800ac86 <dir_register+0x1ba>
 800acba:	e000      	b.n	800acbe <dir_register+0x1f2>
			if (res != FR_OK) break;
 800acbc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800acbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acc0:	2b64      	cmp	r3, #100	; 0x64
 800acc2:	d101      	bne.n	800acc8 <dir_register+0x1fc>
 800acc4:	2307      	movs	r3, #7
 800acc6:	e0a5      	b.n	800ae14 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800acc8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800accc:	2b04      	cmp	r3, #4
 800acce:	d002      	beq.n	800acd6 <dir_register+0x20a>
 800acd0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800acd4:	e09e      	b.n	800ae14 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800acd6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ace0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ace4:	f003 0302 	and.w	r3, r3, #2
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d007      	beq.n	800acfc <dir_register+0x230>
 800acec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acee:	330c      	adds	r3, #12
 800acf0:	4a2f      	ldr	r2, [pc, #188]	; (800adb0 <dir_register+0x2e4>)
 800acf2:	fba2 2303 	umull	r2, r3, r2, r3
 800acf6:	089b      	lsrs	r3, r3, #2
 800acf8:	3301      	adds	r3, #1
 800acfa:	e000      	b.n	800acfe <dir_register+0x232>
 800acfc:	2301      	movs	r3, #1
 800acfe:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ad00:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7ff f84f 	bl	8009da6 <dir_alloc>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ad0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d14f      	bne.n	800adb6 <dir_register+0x2ea>
 800ad16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	673b      	str	r3, [r7, #112]	; 0x70
 800ad1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d049      	beq.n	800adb6 <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad28:	015b      	lsls	r3, r3, #5
 800ad2a:	1ad3      	subs	r3, r2, r3
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7fe febf 	bl	8009ab2 <dir_sdi>
 800ad34:	4603      	mov	r3, r0
 800ad36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800ad3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d139      	bne.n	800adb6 <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	3340      	adds	r3, #64	; 0x40
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7ff fa92 	bl	800a270 <sum_sfn>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad56:	4619      	mov	r1, r3
 800ad58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ad5a:	f7fe f819 	bl	8008d90 <move_window>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800ad64:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d123      	bne.n	800adb4 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ad6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad6e:	6918      	ldr	r0, [r3, #16]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ad74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad76:	b2da      	uxtb	r2, r3
 800ad78:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ad7c:	f7ff f982 	bl	800a084 <put_lfn>
				fs->wflag = 1;
 800ad80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad82:	2201      	movs	r2, #1
 800ad84:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ad86:	2100      	movs	r1, #0
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f7fe ff26 	bl	8009bda <dir_next>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800ad94:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10c      	bne.n	800adb6 <dir_register+0x2ea>
 800ad9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	673b      	str	r3, [r7, #112]	; 0x70
 800ada2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1d4      	bne.n	800ad52 <dir_register+0x286>
 800ada8:	e005      	b.n	800adb6 <dir_register+0x2ea>
 800adaa:	bf00      	nop
 800adac:	88888889 	.word	0x88888889
 800adb0:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800adb4:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800adb6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d128      	bne.n	800ae10 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc2:	4619      	mov	r1, r3
 800adc4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800adc6:	f7fd ffe3 	bl	8008d90 <move_window>
 800adca:	4603      	mov	r3, r0
 800adcc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800add0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800add4:	2b00      	cmp	r3, #0
 800add6:	d11b      	bne.n	800ae10 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800addc:	2220      	movs	r2, #32
 800adde:	2100      	movs	r1, #0
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7fd fdc7 	bl	8008974 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	3340      	adds	r3, #64	; 0x40
 800adee:	220b      	movs	r2, #11
 800adf0:	4619      	mov	r1, r3
 800adf2:	f7fd fd9e 	bl	8008932 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae00:	330c      	adds	r3, #12
 800ae02:	f002 0218 	and.w	r2, r2, #24
 800ae06:	b2d2      	uxtb	r2, r2
 800ae08:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ae0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ae10:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3780      	adds	r7, #128	; 0x80
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ae1e:	bf00      	nop

0800ae20 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b08a      	sub	sp, #40	; 0x28
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	613b      	str	r3, [r7, #16]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	60fb      	str	r3, [r7, #12]
 800ae38:	2300      	movs	r3, #0
 800ae3a:	617b      	str	r3, [r7, #20]
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	1c5a      	adds	r2, r3, #1
 800ae44:	61ba      	str	r2, [r7, #24]
 800ae46:	693a      	ldr	r2, [r7, #16]
 800ae48:	4413      	add	r3, r2
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ae4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae50:	2b1f      	cmp	r3, #31
 800ae52:	d940      	bls.n	800aed6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ae54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae56:	2b2f      	cmp	r3, #47	; 0x2f
 800ae58:	d006      	beq.n	800ae68 <create_name+0x48>
 800ae5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae5c:	2b5c      	cmp	r3, #92	; 0x5c
 800ae5e:	d110      	bne.n	800ae82 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ae60:	e002      	b.n	800ae68 <create_name+0x48>
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	3301      	adds	r3, #1
 800ae66:	61bb      	str	r3, [r7, #24]
 800ae68:	693a      	ldr	r2, [r7, #16]
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	2b2f      	cmp	r3, #47	; 0x2f
 800ae72:	d0f6      	beq.n	800ae62 <create_name+0x42>
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	4413      	add	r3, r2
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	2b5c      	cmp	r3, #92	; 0x5c
 800ae7e:	d0f0      	beq.n	800ae62 <create_name+0x42>
			break;
 800ae80:	e02a      	b.n	800aed8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	2bfe      	cmp	r3, #254	; 0xfe
 800ae86:	d901      	bls.n	800ae8c <create_name+0x6c>
 800ae88:	2306      	movs	r3, #6
 800ae8a:	e17d      	b.n	800b188 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ae8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ae92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae94:	2101      	movs	r1, #1
 800ae96:	4618      	mov	r0, r3
 800ae98:	f001 ff0a 	bl	800ccb0 <ff_convert>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800aea0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d101      	bne.n	800aeaa <create_name+0x8a>
 800aea6:	2306      	movs	r3, #6
 800aea8:	e16e      	b.n	800b188 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800aeaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aeac:	2b7f      	cmp	r3, #127	; 0x7f
 800aeae:	d809      	bhi.n	800aec4 <create_name+0xa4>
 800aeb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	488d      	ldr	r0, [pc, #564]	; (800b0ec <create_name+0x2cc>)
 800aeb6:	f7fd fd9f 	bl	80089f8 <chk_chr>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d001      	beq.n	800aec4 <create_name+0xa4>
 800aec0:	2306      	movs	r3, #6
 800aec2:	e161      	b.n	800b188 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	1c5a      	adds	r2, r3, #1
 800aec8:	617a      	str	r2, [r7, #20]
 800aeca:	005b      	lsls	r3, r3, #1
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	4413      	add	r3, r2
 800aed0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aed2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800aed4:	e7b4      	b.n	800ae40 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800aed6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800aed8:	693a      	ldr	r2, [r7, #16]
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	441a      	add	r2, r3
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800aee2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aee4:	2b1f      	cmp	r3, #31
 800aee6:	d801      	bhi.n	800aeec <create_name+0xcc>
 800aee8:	2304      	movs	r3, #4
 800aeea:	e000      	b.n	800aeee <create_name+0xce>
 800aeec:	2300      	movs	r3, #0
 800aeee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800aef2:	e011      	b.n	800af18 <create_name+0xf8>
		w = lfn[di - 1];
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aefa:	3b01      	subs	r3, #1
 800aefc:	005b      	lsls	r3, r3, #1
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	4413      	add	r3, r2
 800af02:	881b      	ldrh	r3, [r3, #0]
 800af04:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800af06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af08:	2b20      	cmp	r3, #32
 800af0a:	d002      	beq.n	800af12 <create_name+0xf2>
 800af0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af0e:	2b2e      	cmp	r3, #46	; 0x2e
 800af10:	d106      	bne.n	800af20 <create_name+0x100>
		di--;
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	3b01      	subs	r3, #1
 800af16:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d1ea      	bne.n	800aef4 <create_name+0xd4>
 800af1e:	e000      	b.n	800af22 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800af20:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	005b      	lsls	r3, r3, #1
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	4413      	add	r3, r2
 800af2a:	2200      	movs	r2, #0
 800af2c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d101      	bne.n	800af38 <create_name+0x118>
 800af34:	2306      	movs	r3, #6
 800af36:	e127      	b.n	800b188 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	3340      	adds	r3, #64	; 0x40
 800af3c:	220b      	movs	r2, #11
 800af3e:	2120      	movs	r1, #32
 800af40:	4618      	mov	r0, r3
 800af42:	f7fd fd17 	bl	8008974 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800af46:	2300      	movs	r3, #0
 800af48:	61bb      	str	r3, [r7, #24]
 800af4a:	e002      	b.n	800af52 <create_name+0x132>
 800af4c:	69bb      	ldr	r3, [r7, #24]
 800af4e:	3301      	adds	r3, #1
 800af50:	61bb      	str	r3, [r7, #24]
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	005b      	lsls	r3, r3, #1
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	4413      	add	r3, r2
 800af5a:	881b      	ldrh	r3, [r3, #0]
 800af5c:	2b20      	cmp	r3, #32
 800af5e:	d0f5      	beq.n	800af4c <create_name+0x12c>
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	005b      	lsls	r3, r3, #1
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	4413      	add	r3, r2
 800af68:	881b      	ldrh	r3, [r3, #0]
 800af6a:	2b2e      	cmp	r3, #46	; 0x2e
 800af6c:	d0ee      	beq.n	800af4c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d009      	beq.n	800af88 <create_name+0x168>
 800af74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af78:	f043 0303 	orr.w	r3, r3, #3
 800af7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800af80:	e002      	b.n	800af88 <create_name+0x168>
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	3b01      	subs	r3, #1
 800af86:	617b      	str	r3, [r7, #20]
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d009      	beq.n	800afa2 <create_name+0x182>
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800af94:	3b01      	subs	r3, #1
 800af96:	005b      	lsls	r3, r3, #1
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	4413      	add	r3, r2
 800af9c:	881b      	ldrh	r3, [r3, #0]
 800af9e:	2b2e      	cmp	r3, #46	; 0x2e
 800afa0:	d1ef      	bne.n	800af82 <create_name+0x162>

	i = b = 0; ni = 8;
 800afa2:	2300      	movs	r3, #0
 800afa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800afa8:	2300      	movs	r3, #0
 800afaa:	623b      	str	r3, [r7, #32]
 800afac:	2308      	movs	r3, #8
 800afae:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	1c5a      	adds	r2, r3, #1
 800afb4:	61ba      	str	r2, [r7, #24]
 800afb6:	005b      	lsls	r3, r3, #1
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	4413      	add	r3, r2
 800afbc:	881b      	ldrh	r3, [r3, #0]
 800afbe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800afc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f000 8090 	beq.w	800b0e8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800afc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afca:	2b20      	cmp	r3, #32
 800afcc:	d006      	beq.n	800afdc <create_name+0x1bc>
 800afce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afd0:	2b2e      	cmp	r3, #46	; 0x2e
 800afd2:	d10a      	bne.n	800afea <create_name+0x1ca>
 800afd4:	69ba      	ldr	r2, [r7, #24]
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d006      	beq.n	800afea <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800afdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afe0:	f043 0303 	orr.w	r3, r3, #3
 800afe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800afe8:	e07d      	b.n	800b0e6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800afea:	6a3a      	ldr	r2, [r7, #32]
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d203      	bcs.n	800affa <create_name+0x1da>
 800aff2:	69ba      	ldr	r2, [r7, #24]
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d123      	bne.n	800b042 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	2b0b      	cmp	r3, #11
 800affe:	d106      	bne.n	800b00e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b004:	f043 0303 	orr.w	r3, r3, #3
 800b008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b00c:	e075      	b.n	800b0fa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b00e:	69ba      	ldr	r2, [r7, #24]
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	429a      	cmp	r2, r3
 800b014:	d005      	beq.n	800b022 <create_name+0x202>
 800b016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b01a:	f043 0303 	orr.w	r3, r3, #3
 800b01e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b022:	69ba      	ldr	r2, [r7, #24]
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	429a      	cmp	r2, r3
 800b028:	d866      	bhi.n	800b0f8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	61bb      	str	r3, [r7, #24]
 800b02e:	2308      	movs	r3, #8
 800b030:	623b      	str	r3, [r7, #32]
 800b032:	230b      	movs	r3, #11
 800b034:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b036:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b040:	e051      	b.n	800b0e6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b044:	2b7f      	cmp	r3, #127	; 0x7f
 800b046:	d914      	bls.n	800b072 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b04a:	2100      	movs	r1, #0
 800b04c:	4618      	mov	r0, r3
 800b04e:	f001 fe2f 	bl	800ccb0 <ff_convert>
 800b052:	4603      	mov	r3, r0
 800b054:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d004      	beq.n	800b066 <create_name+0x246>
 800b05c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b05e:	3b80      	subs	r3, #128	; 0x80
 800b060:	4a23      	ldr	r2, [pc, #140]	; (800b0f0 <create_name+0x2d0>)
 800b062:	5cd3      	ldrb	r3, [r2, r3]
 800b064:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b06a:	f043 0302 	orr.w	r3, r3, #2
 800b06e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b074:	2b00      	cmp	r3, #0
 800b076:	d007      	beq.n	800b088 <create_name+0x268>
 800b078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b07a:	4619      	mov	r1, r3
 800b07c:	481d      	ldr	r0, [pc, #116]	; (800b0f4 <create_name+0x2d4>)
 800b07e:	f7fd fcbb 	bl	80089f8 <chk_chr>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d008      	beq.n	800b09a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b088:	235f      	movs	r3, #95	; 0x5f
 800b08a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b08c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b090:	f043 0303 	orr.w	r3, r3, #3
 800b094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b098:	e01b      	b.n	800b0d2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b09a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b09c:	2b40      	cmp	r3, #64	; 0x40
 800b09e:	d909      	bls.n	800b0b4 <create_name+0x294>
 800b0a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0a2:	2b5a      	cmp	r3, #90	; 0x5a
 800b0a4:	d806      	bhi.n	800b0b4 <create_name+0x294>
					b |= 2;
 800b0a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b0aa:	f043 0302 	orr.w	r3, r3, #2
 800b0ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b0b2:	e00e      	b.n	800b0d2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b0b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0b6:	2b60      	cmp	r3, #96	; 0x60
 800b0b8:	d90b      	bls.n	800b0d2 <create_name+0x2b2>
 800b0ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0bc:	2b7a      	cmp	r3, #122	; 0x7a
 800b0be:	d808      	bhi.n	800b0d2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b0c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b0c4:	f043 0301 	orr.w	r3, r3, #1
 800b0c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b0cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0ce:	3b20      	subs	r3, #32
 800b0d0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b0d2:	6a3b      	ldr	r3, [r7, #32]
 800b0d4:	1c5a      	adds	r2, r3, #1
 800b0d6:	623a      	str	r2, [r7, #32]
 800b0d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b0da:	b2d1      	uxtb	r1, r2
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	4413      	add	r3, r2
 800b0e0:	460a      	mov	r2, r1
 800b0e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800b0e6:	e763      	b.n	800afb0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b0e8:	bf00      	nop
 800b0ea:	e006      	b.n	800b0fa <create_name+0x2da>
 800b0ec:	0800df5c 	.word	0x0800df5c
 800b0f0:	0800dfdc 	.word	0x0800dfdc
 800b0f4:	0800df68 	.word	0x0800df68
			if (si > di) break;			/* No extension */
 800b0f8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b100:	2be5      	cmp	r3, #229	; 0xe5
 800b102:	d103      	bne.n	800b10c <create_name+0x2ec>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2205      	movs	r2, #5
 800b108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	2b08      	cmp	r3, #8
 800b110:	d104      	bne.n	800b11c <create_name+0x2fc>
 800b112:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b11c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b120:	f003 030c 	and.w	r3, r3, #12
 800b124:	2b0c      	cmp	r3, #12
 800b126:	d005      	beq.n	800b134 <create_name+0x314>
 800b128:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b12c:	f003 0303 	and.w	r3, r3, #3
 800b130:	2b03      	cmp	r3, #3
 800b132:	d105      	bne.n	800b140 <create_name+0x320>
 800b134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b138:	f043 0302 	orr.w	r3, r3, #2
 800b13c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b144:	f003 0302 	and.w	r3, r3, #2
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d117      	bne.n	800b17c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b14c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b150:	f003 0303 	and.w	r3, r3, #3
 800b154:	2b01      	cmp	r3, #1
 800b156:	d105      	bne.n	800b164 <create_name+0x344>
 800b158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b15c:	f043 0310 	orr.w	r3, r3, #16
 800b160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b164:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b168:	f003 030c 	and.w	r3, r3, #12
 800b16c:	2b04      	cmp	r3, #4
 800b16e:	d105      	bne.n	800b17c <create_name+0x35c>
 800b170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b174:	f043 0308 	orr.w	r3, r3, #8
 800b178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b182:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800b186:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3728      	adds	r7, #40	; 0x28
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b086      	sub	sp, #24
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b1a4:	e002      	b.n	800b1ac <follow_path+0x1c>
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	603b      	str	r3, [r7, #0]
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	2b2f      	cmp	r3, #47	; 0x2f
 800b1b2:	d0f8      	beq.n	800b1a6 <follow_path+0x16>
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	2b5c      	cmp	r3, #92	; 0x5c
 800b1ba:	d0f4      	beq.n	800b1a6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	2b1f      	cmp	r3, #31
 800b1ce:	d80a      	bhi.n	800b1e6 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2280      	movs	r2, #128	; 0x80
 800b1d4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800b1d8:	2100      	movs	r1, #0
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f7fe fc69 	bl	8009ab2 <dir_sdi>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	75fb      	strb	r3, [r7, #23]
 800b1e4:	e07d      	b.n	800b2e2 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b1e6:	463b      	mov	r3, r7
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7ff fe18 	bl	800ae20 <create_name>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d16e      	bne.n	800b2d8 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f7ff fb3d 	bl	800a87a <dir_find>
 800b200:	4603      	mov	r3, r0
 800b202:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b20a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b20c:	7dfb      	ldrb	r3, [r7, #23]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d00a      	beq.n	800b228 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b212:	7dfb      	ldrb	r3, [r7, #23]
 800b214:	2b04      	cmp	r3, #4
 800b216:	d161      	bne.n	800b2dc <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b218:	7afb      	ldrb	r3, [r7, #11]
 800b21a:	f003 0304 	and.w	r3, r3, #4
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d15c      	bne.n	800b2dc <follow_path+0x14c>
 800b222:	2305      	movs	r3, #5
 800b224:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b226:	e059      	b.n	800b2dc <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b228:	7afb      	ldrb	r3, [r7, #11]
 800b22a:	f003 0304 	and.w	r3, r3, #4
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d156      	bne.n	800b2e0 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	799b      	ldrb	r3, [r3, #6]
 800b236:	f003 0310 	and.w	r3, r3, #16
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d102      	bne.n	800b244 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800b23e:	2305      	movs	r3, #5
 800b240:	75fb      	strb	r3, [r7, #23]
 800b242:	e04e      	b.n	800b2e2 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	2b04      	cmp	r3, #4
 800b24a:	d130      	bne.n	800b2ae <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	689a      	ldr	r2, [r3, #8]
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b25a:	4613      	mov	r3, r2
 800b25c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b260:	693a      	ldr	r2, [r7, #16]
 800b262:	79d2      	ldrb	r2, [r2, #7]
 800b264:	431a      	orrs	r2, r3
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	695b      	ldr	r3, [r3, #20]
 800b276:	3334      	adds	r3, #52	; 0x34
 800b278:	4618      	mov	r0, r3
 800b27a:	f7fd f98d 	bl	8008598 <ld_dword>
 800b27e:	4602      	mov	r2, r0
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	695b      	ldr	r3, [r3, #20]
 800b288:	3321      	adds	r3, #33	; 0x21
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	f003 0302 	and.w	r3, r3, #2
 800b290:	b2da      	uxtb	r2, r3
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	695b      	ldr	r3, [r3, #20]
 800b29a:	3338      	adds	r3, #56	; 0x38
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7fd f99e 	bl	80085de <ld_qword>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	6939      	ldr	r1, [r7, #16]
 800b2a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800b2ac:	e79b      	b.n	800b1e6 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	8992      	ldrh	r2, [r2, #12]
 800b2bc:	fbb3 f0f2 	udiv	r0, r3, r2
 800b2c0:	fb00 f202 	mul.w	r2, r0, r2
 800b2c4:	1a9b      	subs	r3, r3, r2
 800b2c6:	440b      	add	r3, r1
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f7fe fdc7 	bl	8009e5e <ld_clust>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b2d6:	e786      	b.n	800b1e6 <follow_path+0x56>
			if (res != FR_OK) break;
 800b2d8:	bf00      	nop
 800b2da:	e002      	b.n	800b2e2 <follow_path+0x152>
				break;
 800b2dc:	bf00      	nop
 800b2de:	e000      	b.n	800b2e2 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b2e0:	bf00      	nop
			}
		}
	}

	return res;
 800b2e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3718      	adds	r7, #24
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b087      	sub	sp, #28
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2f8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d031      	beq.n	800b366 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	617b      	str	r3, [r7, #20]
 800b308:	e002      	b.n	800b310 <get_ldnumber+0x24>
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	3301      	adds	r3, #1
 800b30e:	617b      	str	r3, [r7, #20]
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	2b1f      	cmp	r3, #31
 800b316:	d903      	bls.n	800b320 <get_ldnumber+0x34>
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	2b3a      	cmp	r3, #58	; 0x3a
 800b31e:	d1f4      	bne.n	800b30a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	2b3a      	cmp	r3, #58	; 0x3a
 800b326:	d11c      	bne.n	800b362 <get_ldnumber+0x76>
			tp = *path;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	1c5a      	adds	r2, r3, #1
 800b332:	60fa      	str	r2, [r7, #12]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	3b30      	subs	r3, #48	; 0x30
 800b338:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	2b09      	cmp	r3, #9
 800b33e:	d80e      	bhi.n	800b35e <get_ldnumber+0x72>
 800b340:	68fa      	ldr	r2, [r7, #12]
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	429a      	cmp	r2, r3
 800b346:	d10a      	bne.n	800b35e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d107      	bne.n	800b35e <get_ldnumber+0x72>
					vol = (int)i;
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	3301      	adds	r3, #1
 800b356:	617b      	str	r3, [r7, #20]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	e002      	b.n	800b368 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b362:	2300      	movs	r3, #0
 800b364:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b366:	693b      	ldr	r3, [r7, #16]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	371c      	adds	r7, #28
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	70da      	strb	r2, [r3, #3]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f04f 32ff 	mov.w	r2, #4294967295
 800b38a:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b38c:	6839      	ldr	r1, [r7, #0]
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f7fd fcfe 	bl	8008d90 <move_window>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d001      	beq.n	800b39e <check_fs+0x2a>
 800b39a:	2304      	movs	r3, #4
 800b39c:	e044      	b.n	800b428 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	333c      	adds	r3, #60	; 0x3c
 800b3a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fd f8de 	bl	8008568 <ld_word>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d001      	beq.n	800b3bc <check_fs+0x48>
 800b3b8:	2303      	movs	r3, #3
 800b3ba:	e035      	b.n	800b428 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3c2:	2be9      	cmp	r3, #233	; 0xe9
 800b3c4:	d009      	beq.n	800b3da <check_fs+0x66>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3cc:	2beb      	cmp	r3, #235	; 0xeb
 800b3ce:	d11e      	bne.n	800b40e <check_fs+0x9a>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3d6:	2b90      	cmp	r3, #144	; 0x90
 800b3d8:	d119      	bne.n	800b40e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	333c      	adds	r3, #60	; 0x3c
 800b3de:	3336      	adds	r3, #54	; 0x36
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7fd f8d9 	bl	8008598 <ld_dword>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b3ec:	4a10      	ldr	r2, [pc, #64]	; (800b430 <check_fs+0xbc>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d101      	bne.n	800b3f6 <check_fs+0x82>
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	e018      	b.n	800b428 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	333c      	adds	r3, #60	; 0x3c
 800b3fa:	3352      	adds	r3, #82	; 0x52
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7fd f8cb 	bl	8008598 <ld_dword>
 800b402:	4603      	mov	r3, r0
 800b404:	4a0b      	ldr	r2, [pc, #44]	; (800b434 <check_fs+0xc0>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d101      	bne.n	800b40e <check_fs+0x9a>
 800b40a:	2300      	movs	r3, #0
 800b40c:	e00c      	b.n	800b428 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	333c      	adds	r3, #60	; 0x3c
 800b412:	220b      	movs	r2, #11
 800b414:	4908      	ldr	r1, [pc, #32]	; (800b438 <check_fs+0xc4>)
 800b416:	4618      	mov	r0, r3
 800b418:	f7fd fac7 	bl	80089aa <mem_cmp>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d101      	bne.n	800b426 <check_fs+0xb2>
 800b422:	2301      	movs	r3, #1
 800b424:	e000      	b.n	800b428 <check_fs+0xb4>
#endif
	return 2;
 800b426:	2302      	movs	r3, #2
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	00544146 	.word	0x00544146
 800b434:	33544146 	.word	0x33544146
 800b438:	0800df70 	.word	0x0800df70

0800b43c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b43c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b440:	b09c      	sub	sp, #112	; 0x70
 800b442:	af00      	add	r7, sp, #0
 800b444:	61f8      	str	r0, [r7, #28]
 800b446:	61b9      	str	r1, [r7, #24]
 800b448:	4613      	mov	r3, r2
 800b44a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b44c:	69bb      	ldr	r3, [r7, #24]
 800b44e:	2200      	movs	r2, #0
 800b450:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b452:	69f8      	ldr	r0, [r7, #28]
 800b454:	f7ff ff4a 	bl	800b2ec <get_ldnumber>
 800b458:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800b45a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	da01      	bge.n	800b464 <find_volume+0x28>
 800b460:	230b      	movs	r3, #11
 800b462:	e376      	b.n	800bb52 <find_volume+0x716>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b464:	4aa6      	ldr	r2, [pc, #664]	; (800b700 <find_volume+0x2c4>)
 800b466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b46c:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b46e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b470:	2b00      	cmp	r3, #0
 800b472:	d101      	bne.n	800b478 <find_volume+0x3c>
 800b474:	230c      	movs	r3, #12
 800b476:	e36c      	b.n	800bb52 <find_volume+0x716>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b47c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
 800b480:	f023 0301 	bic.w	r3, r3, #1
 800b484:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d01a      	beq.n	800b4c4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800b48e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b490:	785b      	ldrb	r3, [r3, #1]
 800b492:	4618      	mov	r0, r3
 800b494:	f7fc ffca 	bl	800842c <disk_status>
 800b498:	4603      	mov	r3, r0
 800b49a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b49e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b4a2:	f003 0301 	and.w	r3, r3, #1
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10c      	bne.n	800b4c4 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b4aa:	7dfb      	ldrb	r3, [r7, #23]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d007      	beq.n	800b4c0 <find_volume+0x84>
 800b4b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b4b4:	f003 0304 	and.w	r3, r3, #4
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800b4bc:	230a      	movs	r3, #10
 800b4be:	e348      	b.n	800bb52 <find_volume+0x716>
			}
			return FR_OK;				/* The file system object is valid */
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	e346      	b.n	800bb52 <find_volume+0x716>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b4c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b4ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4cc:	b2da      	uxtb	r2, r3
 800b4ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4d0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b4d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4d4:	785b      	ldrb	r3, [r3, #1]
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7fc ffc2 	bl	8008460 <disk_initialize>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b4e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b4e6:	f003 0301 	and.w	r3, r3, #1
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d001      	beq.n	800b4f2 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b4ee:	2303      	movs	r3, #3
 800b4f0:	e32f      	b.n	800bb52 <find_volume+0x716>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b4f2:	7dfb      	ldrb	r3, [r7, #23]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d007      	beq.n	800b508 <find_volume+0xcc>
 800b4f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b4fc:	f003 0304 	and.w	r3, r3, #4
 800b500:	2b00      	cmp	r3, #0
 800b502:	d001      	beq.n	800b508 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800b504:	230a      	movs	r3, #10
 800b506:	e324      	b.n	800bb52 <find_volume+0x716>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b50a:	7858      	ldrb	r0, [r3, #1]
 800b50c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b50e:	330c      	adds	r3, #12
 800b510:	461a      	mov	r2, r3
 800b512:	2102      	movs	r1, #2
 800b514:	f7fd f80a 	bl	800852c <disk_ioctl>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d001      	beq.n	800b522 <find_volume+0xe6>
 800b51e:	2301      	movs	r3, #1
 800b520:	e317      	b.n	800bb52 <find_volume+0x716>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b524:	899b      	ldrh	r3, [r3, #12]
 800b526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b52a:	d80d      	bhi.n	800b548 <find_volume+0x10c>
 800b52c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b52e:	899b      	ldrh	r3, [r3, #12]
 800b530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b534:	d308      	bcc.n	800b548 <find_volume+0x10c>
 800b536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b538:	899b      	ldrh	r3, [r3, #12]
 800b53a:	461a      	mov	r2, r3
 800b53c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b53e:	899b      	ldrh	r3, [r3, #12]
 800b540:	3b01      	subs	r3, #1
 800b542:	4013      	ands	r3, r2
 800b544:	2b00      	cmp	r3, #0
 800b546:	d001      	beq.n	800b54c <find_volume+0x110>
 800b548:	2301      	movs	r3, #1
 800b54a:	e302      	b.n	800bb52 <find_volume+0x716>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b54c:	2300      	movs	r3, #0
 800b54e:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b550:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b552:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b554:	f7ff ff0e 	bl	800b374 <check_fs>
 800b558:	4603      	mov	r3, r0
 800b55a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b55e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b562:	2b02      	cmp	r3, #2
 800b564:	d14d      	bne.n	800b602 <find_volume+0x1c6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b566:	2300      	movs	r3, #0
 800b568:	65bb      	str	r3, [r7, #88]	; 0x58
 800b56a:	e020      	b.n	800b5ae <find_volume+0x172>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b56c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b56e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800b572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b574:	011b      	lsls	r3, r3, #4
 800b576:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b57a:	4413      	add	r3, r2
 800b57c:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b57e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b580:	3304      	adds	r3, #4
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d006      	beq.n	800b596 <find_volume+0x15a>
 800b588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b58a:	3308      	adds	r3, #8
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7fd f803 	bl	8008598 <ld_dword>
 800b592:	4602      	mov	r2, r0
 800b594:	e000      	b.n	800b598 <find_volume+0x15c>
 800b596:	2200      	movs	r2, #0
 800b598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	3360      	adds	r3, #96	; 0x60
 800b59e:	f107 0110 	add.w	r1, r7, #16
 800b5a2:	440b      	add	r3, r1
 800b5a4:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b5a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800b5ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5b0:	2b03      	cmp	r3, #3
 800b5b2:	d9db      	bls.n	800b56c <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800b5b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d002      	beq.n	800b5c4 <find_volume+0x188>
 800b5be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b5c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	3360      	adds	r3, #96	; 0x60
 800b5ca:	f107 0210 	add.w	r2, r7, #16
 800b5ce:	4413      	add	r3, r2
 800b5d0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800b5d4:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b5d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d005      	beq.n	800b5e8 <find_volume+0x1ac>
 800b5dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b5de:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b5e0:	f7ff fec8 	bl	800b374 <check_fs>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	e000      	b.n	800b5ea <find_volume+0x1ae>
 800b5e8:	2303      	movs	r3, #3
 800b5ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b5ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d905      	bls.n	800b602 <find_volume+0x1c6>
 800b5f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800b5fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5fe:	2b03      	cmp	r3, #3
 800b600:	d9e0      	bls.n	800b5c4 <find_volume+0x188>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b602:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b606:	2b04      	cmp	r3, #4
 800b608:	d101      	bne.n	800b60e <find_volume+0x1d2>
 800b60a:	2301      	movs	r3, #1
 800b60c:	e2a1      	b.n	800bb52 <find_volume+0x716>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b60e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b612:	2b01      	cmp	r3, #1
 800b614:	d901      	bls.n	800b61a <find_volume+0x1de>
 800b616:	230d      	movs	r3, #13
 800b618:	e29b      	b.n	800bb52 <find_volume+0x716>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800b61a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b61e:	2b01      	cmp	r3, #1
 800b620:	f040 8101 	bne.w	800b826 <find_volume+0x3ea>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800b624:	230b      	movs	r3, #11
 800b626:	65bb      	str	r3, [r7, #88]	; 0x58
 800b628:	e002      	b.n	800b630 <find_volume+0x1f4>
 800b62a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b62c:	3301      	adds	r3, #1
 800b62e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b632:	2b3f      	cmp	r3, #63	; 0x3f
 800b634:	d806      	bhi.n	800b644 <find_volume+0x208>
 800b636:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b638:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b63a:	4413      	add	r3, r2
 800b63c:	333c      	adds	r3, #60	; 0x3c
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d0f2      	beq.n	800b62a <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800b644:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b646:	2b3f      	cmp	r3, #63	; 0x3f
 800b648:	d801      	bhi.n	800b64e <find_volume+0x212>
 800b64a:	230d      	movs	r3, #13
 800b64c:	e281      	b.n	800bb52 <find_volume+0x716>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800b64e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b650:	333c      	adds	r3, #60	; 0x3c
 800b652:	3368      	adds	r3, #104	; 0x68
 800b654:	4618      	mov	r0, r3
 800b656:	f7fc ff87 	bl	8008568 <ld_word>
 800b65a:	4603      	mov	r3, r0
 800b65c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b660:	d001      	beq.n	800b666 <find_volume+0x22a>
 800b662:	230d      	movs	r3, #13
 800b664:	e275      	b.n	800bb52 <find_volume+0x716>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800b666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b668:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800b66c:	461a      	mov	r2, r3
 800b66e:	2301      	movs	r3, #1
 800b670:	4093      	lsls	r3, r2
 800b672:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b674:	8992      	ldrh	r2, [r2, #12]
 800b676:	4293      	cmp	r3, r2
 800b678:	d001      	beq.n	800b67e <find_volume+0x242>
			return FR_NO_FILESYSTEM;
 800b67a:	230d      	movs	r3, #13
 800b67c:	e269      	b.n	800bb52 <find_volume+0x716>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800b67e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b680:	333c      	adds	r3, #60	; 0x3c
 800b682:	3348      	adds	r3, #72	; 0x48
 800b684:	4618      	mov	r0, r3
 800b686:	f7fc ffaa 	bl	80085de <ld_qword>
 800b68a:	4602      	mov	r2, r0
 800b68c:	460b      	mov	r3, r1
 800b68e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b690:	2000      	movs	r0, #0
 800b692:	60b9      	str	r1, [r7, #8]
 800b694:	60f8      	str	r0, [r7, #12]
 800b696:	68b9      	ldr	r1, [r7, #8]
 800b698:	1851      	adds	r1, r2, r1
 800b69a:	6039      	str	r1, [r7, #0]
 800b69c:	68f9      	ldr	r1, [r7, #12]
 800b69e:	eb43 0101 	adc.w	r1, r3, r1
 800b6a2:	6079      	str	r1, [r7, #4]
 800b6a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800b6ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d301      	bcc.n	800b6b8 <find_volume+0x27c>
 800b6b4:	230d      	movs	r3, #13
 800b6b6:	e24c      	b.n	800bb52 <find_volume+0x716>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800b6b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6ba:	333c      	adds	r3, #60	; 0x3c
 800b6bc:	3354      	adds	r3, #84	; 0x54
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7fc ff6a 	bl	8008598 <ld_dword>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6c8:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800b6ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6cc:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800b6d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800b6d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6d6:	789b      	ldrb	r3, [r3, #2]
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d001      	beq.n	800b6e0 <find_volume+0x2a4>
 800b6dc:	230d      	movs	r3, #13
 800b6de:	e238      	b.n	800bb52 <find_volume+0x716>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800b6e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6e2:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	4093      	lsls	r3, r2
 800b6ec:	b29a      	uxth	r2, r3
 800b6ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6f0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800b6f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6f4:	895b      	ldrh	r3, [r3, #10]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d104      	bne.n	800b704 <find_volume+0x2c8>
 800b6fa:	230d      	movs	r3, #13
 800b6fc:	e229      	b.n	800bb52 <find_volume+0x716>
 800b6fe:	bf00      	nop
 800b700:	200031f4 	.word	0x200031f4

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800b704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b706:	333c      	adds	r3, #60	; 0x3c
 800b708:	335c      	adds	r3, #92	; 0x5c
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fc ff44 	bl	8008598 <ld_dword>
 800b710:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800b712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b714:	4a99      	ldr	r2, [pc, #612]	; (800b97c <find_volume+0x540>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d901      	bls.n	800b71e <find_volume+0x2e2>
 800b71a:	230d      	movs	r3, #13
 800b71c:	e219      	b.n	800bb52 <find_volume+0x716>
		fs->n_fatent = nclst + 2;
 800b71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b720:	1c9a      	adds	r2, r3, #2
 800b722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b724:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800b726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b728:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b72a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800b72c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b72e:	333c      	adds	r3, #60	; 0x3c
 800b730:	3358      	adds	r3, #88	; 0x58
 800b732:	4618      	mov	r0, r3
 800b734:	f7fc ff30 	bl	8008598 <ld_dword>
 800b738:	4602      	mov	r2, r0
 800b73a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b73c:	441a      	add	r2, r3
 800b73e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b740:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800b742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b744:	333c      	adds	r3, #60	; 0x3c
 800b746:	3350      	adds	r3, #80	; 0x50
 800b748:	4618      	mov	r0, r3
 800b74a:	f7fc ff25 	bl	8008598 <ld_dword>
 800b74e:	4602      	mov	r2, r0
 800b750:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b752:	441a      	add	r2, r3
 800b754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b756:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800b758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b75c:	2200      	movs	r2, #0
 800b75e:	469a      	mov	sl, r3
 800b760:	4693      	mov	fp, r2
 800b762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b764:	895b      	ldrh	r3, [r3, #10]
 800b766:	461a      	mov	r2, r3
 800b768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b76a:	fb02 f303 	mul.w	r3, r2, r3
 800b76e:	2200      	movs	r2, #0
 800b770:	4698      	mov	r8, r3
 800b772:	4691      	mov	r9, r2
 800b774:	eb1a 0408 	adds.w	r4, sl, r8
 800b778:	eb4b 0509 	adc.w	r5, fp, r9
 800b77c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b780:	42a2      	cmp	r2, r4
 800b782:	41ab      	sbcs	r3, r5
 800b784:	d201      	bcs.n	800b78a <find_volume+0x34e>
 800b786:	230d      	movs	r3, #13
 800b788:	e1e3      	b.n	800bb52 <find_volume+0x716>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800b78a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b78c:	333c      	adds	r3, #60	; 0x3c
 800b78e:	3360      	adds	r3, #96	; 0x60
 800b790:	4618      	mov	r0, r3
 800b792:	f7fc ff01 	bl	8008598 <ld_dword>
 800b796:	4602      	mov	r2, r0
 800b798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b79a:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800b79c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b7a4:	f7fd fb92 	bl	8008ecc <clust2sect>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b7ae:	f7fd faef 	bl	8008d90 <move_window>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d001      	beq.n	800b7bc <find_volume+0x380>
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e1ca      	b.n	800bb52 <find_volume+0x716>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800b7bc:	2300      	movs	r3, #0
 800b7be:	65bb      	str	r3, [r7, #88]	; 0x58
 800b7c0:	e015      	b.n	800b7ee <find_volume+0x3b2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800b7c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b7c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b7c6:	4413      	add	r3, r2
 800b7c8:	333c      	adds	r3, #60	; 0x3c
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	2b81      	cmp	r3, #129	; 0x81
 800b7ce:	d10b      	bne.n	800b7e8 <find_volume+0x3ac>
 800b7d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7d2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800b7d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b7d8:	3314      	adds	r3, #20
 800b7da:	4413      	add	r3, r2
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7fc fedb 	bl	8008598 <ld_dword>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	d009      	beq.n	800b7fc <find_volume+0x3c0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800b7e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b7ea:	3320      	adds	r3, #32
 800b7ec:	65bb      	str	r3, [r7, #88]	; 0x58
 800b7ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7f0:	899b      	ldrh	r3, [r3, #12]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d3e3      	bcc.n	800b7c2 <find_volume+0x386>
 800b7fa:	e000      	b.n	800b7fe <find_volume+0x3c2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800b7fc:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800b7fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b800:	899b      	ldrh	r3, [r3, #12]
 800b802:	461a      	mov	r2, r3
 800b804:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b806:	4293      	cmp	r3, r2
 800b808:	d101      	bne.n	800b80e <find_volume+0x3d2>
 800b80a:	230d      	movs	r3, #13
 800b80c:	e1a1      	b.n	800bb52 <find_volume+0x716>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b80e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b810:	f04f 32ff 	mov.w	r2, #4294967295
 800b814:	61da      	str	r2, [r3, #28]
 800b816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b818:	69da      	ldr	r2, [r3, #28]
 800b81a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b81c:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800b81e:	2304      	movs	r3, #4
 800b820:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b824:	e17d      	b.n	800bb22 <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b828:	333c      	adds	r3, #60	; 0x3c
 800b82a:	330b      	adds	r3, #11
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7fc fe9b 	bl	8008568 <ld_word>
 800b832:	4603      	mov	r3, r0
 800b834:	461a      	mov	r2, r3
 800b836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b838:	899b      	ldrh	r3, [r3, #12]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d001      	beq.n	800b842 <find_volume+0x406>
 800b83e:	230d      	movs	r3, #13
 800b840:	e187      	b.n	800bb52 <find_volume+0x716>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b844:	333c      	adds	r3, #60	; 0x3c
 800b846:	3316      	adds	r3, #22
 800b848:	4618      	mov	r0, r3
 800b84a:	f7fc fe8d 	bl	8008568 <ld_word>
 800b84e:	4603      	mov	r3, r0
 800b850:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b854:	2b00      	cmp	r3, #0
 800b856:	d106      	bne.n	800b866 <find_volume+0x42a>
 800b858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b85a:	333c      	adds	r3, #60	; 0x3c
 800b85c:	3324      	adds	r3, #36	; 0x24
 800b85e:	4618      	mov	r0, r3
 800b860:	f7fc fe9a 	bl	8008598 <ld_dword>
 800b864:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800b866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b868:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b86a:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b86c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b86e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800b872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b874:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b878:	789b      	ldrb	r3, [r3, #2]
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d005      	beq.n	800b88a <find_volume+0x44e>
 800b87e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b880:	789b      	ldrb	r3, [r3, #2]
 800b882:	2b02      	cmp	r3, #2
 800b884:	d001      	beq.n	800b88a <find_volume+0x44e>
 800b886:	230d      	movs	r3, #13
 800b888:	e163      	b.n	800bb52 <find_volume+0x716>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b88a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b88c:	789b      	ldrb	r3, [r3, #2]
 800b88e:	461a      	mov	r2, r3
 800b890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b892:	fb02 f303 	mul.w	r3, r2, r3
 800b896:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b89a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800b89e:	b29a      	uxth	r2, r3
 800b8a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8a2:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b8a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8a6:	895b      	ldrh	r3, [r3, #10]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d008      	beq.n	800b8be <find_volume+0x482>
 800b8ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ae:	895b      	ldrh	r3, [r3, #10]
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8b4:	895b      	ldrh	r3, [r3, #10]
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	4013      	ands	r3, r2
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d001      	beq.n	800b8c2 <find_volume+0x486>
 800b8be:	230d      	movs	r3, #13
 800b8c0:	e147      	b.n	800bb52 <find_volume+0x716>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b8c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8c4:	333c      	adds	r3, #60	; 0x3c
 800b8c6:	3311      	adds	r3, #17
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fc fe4d 	bl	8008568 <ld_word>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8d4:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b8d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8d8:	891b      	ldrh	r3, [r3, #8]
 800b8da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8dc:	8992      	ldrh	r2, [r2, #12]
 800b8de:	0952      	lsrs	r2, r2, #5
 800b8e0:	b292      	uxth	r2, r2
 800b8e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8e6:	fb01 f202 	mul.w	r2, r1, r2
 800b8ea:	1a9b      	subs	r3, r3, r2
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d001      	beq.n	800b8f6 <find_volume+0x4ba>
 800b8f2:	230d      	movs	r3, #13
 800b8f4:	e12d      	b.n	800bb52 <find_volume+0x716>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b8f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8f8:	333c      	adds	r3, #60	; 0x3c
 800b8fa:	3313      	adds	r3, #19
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7fc fe33 	bl	8008568 <ld_word>
 800b902:	4603      	mov	r3, r0
 800b904:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d106      	bne.n	800b91a <find_volume+0x4de>
 800b90c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b90e:	333c      	adds	r3, #60	; 0x3c
 800b910:	3320      	adds	r3, #32
 800b912:	4618      	mov	r0, r3
 800b914:	f7fc fe40 	bl	8008598 <ld_dword>
 800b918:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b91a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b91c:	333c      	adds	r3, #60	; 0x3c
 800b91e:	330e      	adds	r3, #14
 800b920:	4618      	mov	r0, r3
 800b922:	f7fc fe21 	bl	8008568 <ld_word>
 800b926:	4603      	mov	r3, r0
 800b928:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b92c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b930:	2b00      	cmp	r3, #0
 800b932:	d101      	bne.n	800b938 <find_volume+0x4fc>
 800b934:	230d      	movs	r3, #13
 800b936:	e10c      	b.n	800bb52 <find_volume+0x716>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b938:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800b93c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b93e:	4413      	add	r3, r2
 800b940:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b942:	8911      	ldrh	r1, [r2, #8]
 800b944:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b946:	8992      	ldrh	r2, [r2, #12]
 800b948:	0952      	lsrs	r2, r2, #5
 800b94a:	b292      	uxth	r2, r2
 800b94c:	fbb1 f2f2 	udiv	r2, r1, r2
 800b950:	b292      	uxth	r2, r2
 800b952:	4413      	add	r3, r2
 800b954:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b956:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d201      	bcs.n	800b962 <find_volume+0x526>
 800b95e:	230d      	movs	r3, #13
 800b960:	e0f7      	b.n	800bb52 <find_volume+0x716>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b962:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b96a:	8952      	ldrh	r2, [r2, #10]
 800b96c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b970:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b974:	2b00      	cmp	r3, #0
 800b976:	d103      	bne.n	800b980 <find_volume+0x544>
 800b978:	230d      	movs	r3, #13
 800b97a:	e0ea      	b.n	800bb52 <find_volume+0x716>
 800b97c:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800b980:	2303      	movs	r3, #3
 800b982:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b988:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d802      	bhi.n	800b996 <find_volume+0x55a>
 800b990:	2302      	movs	r3, #2
 800b992:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b998:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d802      	bhi.n	800b9a6 <find_volume+0x56a>
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b9a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a8:	1c9a      	adds	r2, r3, #2
 800b9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ac:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800b9ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b9b2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b9b4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800b9b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9ba:	441a      	add	r2, r3
 800b9bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9be:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800b9c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b9c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9c4:	441a      	add	r2, r3
 800b9c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9c8:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800b9ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b9ce:	2b03      	cmp	r3, #3
 800b9d0:	d11e      	bne.n	800ba10 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b9d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9d4:	333c      	adds	r3, #60	; 0x3c
 800b9d6:	332a      	adds	r3, #42	; 0x2a
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7fc fdc5 	bl	8008568 <ld_word>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d001      	beq.n	800b9e8 <find_volume+0x5ac>
 800b9e4:	230d      	movs	r3, #13
 800b9e6:	e0b4      	b.n	800bb52 <find_volume+0x716>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b9e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ea:	891b      	ldrh	r3, [r3, #8]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d001      	beq.n	800b9f4 <find_volume+0x5b8>
 800b9f0:	230d      	movs	r3, #13
 800b9f2:	e0ae      	b.n	800bb52 <find_volume+0x716>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b9f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9f6:	333c      	adds	r3, #60	; 0x3c
 800b9f8:	332c      	adds	r3, #44	; 0x2c
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fc fdcc 	bl	8008598 <ld_dword>
 800ba00:	4602      	mov	r2, r0
 800ba02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba04:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ba06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba08:	6a1b      	ldr	r3, [r3, #32]
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba0e:	e01f      	b.n	800ba50 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ba10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba12:	891b      	ldrh	r3, [r3, #8]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d101      	bne.n	800ba1c <find_volume+0x5e0>
 800ba18:	230d      	movs	r3, #13
 800ba1a:	e09a      	b.n	800bb52 <find_volume+0x716>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ba1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba22:	441a      	add	r2, r3
 800ba24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba26:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ba28:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ba2c:	2b02      	cmp	r3, #2
 800ba2e:	d103      	bne.n	800ba38 <find_volume+0x5fc>
 800ba30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba32:	6a1b      	ldr	r3, [r3, #32]
 800ba34:	005b      	lsls	r3, r3, #1
 800ba36:	e00a      	b.n	800ba4e <find_volume+0x612>
 800ba38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba3a:	6a1a      	ldr	r2, [r3, #32]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	005b      	lsls	r3, r3, #1
 800ba40:	4413      	add	r3, r2
 800ba42:	085a      	lsrs	r2, r3, #1
 800ba44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba46:	6a1b      	ldr	r3, [r3, #32]
 800ba48:	f003 0301 	and.w	r3, r3, #1
 800ba4c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ba4e:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ba50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba56:	899b      	ldrh	r3, [r3, #12]
 800ba58:	4619      	mov	r1, r3
 800ba5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba5c:	440b      	add	r3, r1
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba62:	8989      	ldrh	r1, [r1, #12]
 800ba64:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d201      	bcs.n	800ba70 <find_volume+0x634>
 800ba6c:	230d      	movs	r3, #13
 800ba6e:	e070      	b.n	800bb52 <find_volume+0x716>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ba70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba72:	f04f 32ff 	mov.w	r2, #4294967295
 800ba76:	61da      	str	r2, [r3, #28]
 800ba78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba7a:	69da      	ldr	r2, [r3, #28]
 800ba7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba7e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800ba80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba82:	2280      	movs	r2, #128	; 0x80
 800ba84:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ba86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ba8a:	2b03      	cmp	r3, #3
 800ba8c:	d149      	bne.n	800bb22 <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ba8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba90:	333c      	adds	r3, #60	; 0x3c
 800ba92:	3330      	adds	r3, #48	; 0x30
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fc fd67 	bl	8008568 <ld_word>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d140      	bne.n	800bb22 <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800baa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800baa2:	3301      	adds	r3, #1
 800baa4:	4619      	mov	r1, r3
 800baa6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800baa8:	f7fd f972 	bl	8008d90 <move_window>
 800baac:	4603      	mov	r3, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d137      	bne.n	800bb22 <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 800bab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bab4:	2200      	movs	r2, #0
 800bab6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baba:	333c      	adds	r3, #60	; 0x3c
 800babc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7fc fd51 	bl	8008568 <ld_word>
 800bac6:	4603      	mov	r3, r0
 800bac8:	461a      	mov	r2, r3
 800baca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bace:	429a      	cmp	r2, r3
 800bad0:	d127      	bne.n	800bb22 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bad4:	333c      	adds	r3, #60	; 0x3c
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fc fd5e 	bl	8008598 <ld_dword>
 800badc:	4603      	mov	r3, r0
 800bade:	4a1f      	ldr	r2, [pc, #124]	; (800bb5c <find_volume+0x720>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d11e      	bne.n	800bb22 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bae6:	333c      	adds	r3, #60	; 0x3c
 800bae8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800baec:	4618      	mov	r0, r3
 800baee:	f7fc fd53 	bl	8008598 <ld_dword>
 800baf2:	4603      	mov	r3, r0
 800baf4:	4a1a      	ldr	r2, [pc, #104]	; (800bb60 <find_volume+0x724>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d113      	bne.n	800bb22 <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bafa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bafc:	333c      	adds	r3, #60	; 0x3c
 800bafe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fc fd48 	bl	8008598 <ld_dword>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb0c:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bb0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb10:	333c      	adds	r3, #60	; 0x3c
 800bb12:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fc fd3e 	bl	8008598 <ld_dword>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb20:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bb22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb24:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800bb28:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bb2a:	4b0e      	ldr	r3, [pc, #56]	; (800bb64 <find_volume+0x728>)
 800bb2c:	881b      	ldrh	r3, [r3, #0]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	4b0c      	ldr	r3, [pc, #48]	; (800bb64 <find_volume+0x728>)
 800bb34:	801a      	strh	r2, [r3, #0]
 800bb36:	4b0b      	ldr	r3, [pc, #44]	; (800bb64 <find_volume+0x728>)
 800bb38:	881a      	ldrh	r2, [r3, #0]
 800bb3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb3c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bb3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb40:	4a09      	ldr	r2, [pc, #36]	; (800bb68 <find_volume+0x72c>)
 800bb42:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800bb44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb46:	4a09      	ldr	r2, [pc, #36]	; (800bb6c <find_volume+0x730>)
 800bb48:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bb4a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bb4c:	f7fd f8b8 	bl	8008cc0 <clear_lock>
#endif
	return FR_OK;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3770      	adds	r7, #112	; 0x70
 800bb56:	46bd      	mov	sp, r7
 800bb58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb5c:	41615252 	.word	0x41615252
 800bb60:	61417272 	.word	0x61417272
 800bb64:	200031f8 	.word	0x200031f8
 800bb68:	2000347c 	.word	0x2000347c
 800bb6c:	2000321c 	.word	0x2000321c

0800bb70 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bb7a:	2309      	movs	r3, #9
 800bb7c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d01c      	beq.n	800bbbe <validate+0x4e>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d018      	beq.n	800bbbe <validate+0x4e>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d013      	beq.n	800bbbe <validate+0x4e>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	889a      	ldrh	r2, [r3, #4]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	88db      	ldrh	r3, [r3, #6]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d10c      	bne.n	800bbbe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	785b      	ldrb	r3, [r3, #1]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fc fc3e 	bl	800842c <disk_status>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	f003 0301 	and.w	r3, r3, #1
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d101      	bne.n	800bbbe <validate+0x4e>
			res = FR_OK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bbbe:	7bfb      	ldrb	r3, [r7, #15]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d102      	bne.n	800bbca <validate+0x5a>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	e000      	b.n	800bbcc <validate+0x5c>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	683a      	ldr	r2, [r7, #0]
 800bbce:	6013      	str	r3, [r2, #0]
	return res;
 800bbd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
	...

0800bbdc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b088      	sub	sp, #32
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bbee:	f107 0310 	add.w	r3, r7, #16
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7ff fb7a 	bl	800b2ec <get_ldnumber>
 800bbf8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	da01      	bge.n	800bc04 <f_mount+0x28>
 800bc00:	230b      	movs	r3, #11
 800bc02:	e02b      	b.n	800bc5c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bc04:	4a17      	ldr	r2, [pc, #92]	; (800bc64 <f_mount+0x88>)
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc0c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d005      	beq.n	800bc20 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bc14:	69b8      	ldr	r0, [r7, #24]
 800bc16:	f7fd f853 	bl	8008cc0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d002      	beq.n	800bc2c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	490d      	ldr	r1, [pc, #52]	; (800bc64 <f_mount+0x88>)
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d002      	beq.n	800bc42 <f_mount+0x66>
 800bc3c:	79fb      	ldrb	r3, [r7, #7]
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d001      	beq.n	800bc46 <f_mount+0x6a>
 800bc42:	2300      	movs	r3, #0
 800bc44:	e00a      	b.n	800bc5c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bc46:	f107 010c 	add.w	r1, r7, #12
 800bc4a:	f107 0308 	add.w	r3, r7, #8
 800bc4e:	2200      	movs	r2, #0
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7ff fbf3 	bl	800b43c <find_volume>
 800bc56:	4603      	mov	r3, r0
 800bc58:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bc5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3720      	adds	r7, #32
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	200031f4 	.word	0x200031f4

0800bc68 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bc68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc6c:	b0a8      	sub	sp, #160	; 0xa0
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6278      	str	r0, [r7, #36]	; 0x24
 800bc72:	6239      	str	r1, [r7, #32]
 800bc74:	4613      	mov	r3, r2
 800bc76:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d101      	bne.n	800bc82 <f_open+0x1a>
 800bc7e:	2309      	movs	r3, #9
 800bc80:	e2c0      	b.n	800c204 <f_open+0x59c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bc82:	7ffb      	ldrb	r3, [r7, #31]
 800bc84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc88:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800bc8a:	7ffb      	ldrb	r3, [r7, #31]
 800bc8c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800bc90:	f107 0020 	add.w	r0, r7, #32
 800bc94:	461a      	mov	r2, r3
 800bc96:	f7ff fbd1 	bl	800b43c <find_volume>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (res == FR_OK) {
 800bca0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	f040 82a4 	bne.w	800c1f2 <f_open+0x58a>
		dj.obj.fs = fs;
 800bcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcac:	633b      	str	r3, [r7, #48]	; 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bcae:	6a3b      	ldr	r3, [r7, #32]
 800bcb0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	4610      	mov	r0, r2
 800bcb8:	f7ff fa6a 	bl	800b190 <follow_path>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bcc2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d11a      	bne.n	800bd00 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bcca:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800bcce:	b25b      	sxtb	r3, r3
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	da03      	bge.n	800bcdc <f_open+0x74>
				res = FR_INVALID_NAME;
 800bcd4:	2306      	movs	r3, #6
 800bcd6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800bcda:	e011      	b.n	800bd00 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bcdc:	7ffb      	ldrb	r3, [r7, #31]
 800bcde:	f023 0301 	bic.w	r3, r3, #1
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	bf14      	ite	ne
 800bce6:	2301      	movne	r3, #1
 800bce8:	2300      	moveq	r3, #0
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	461a      	mov	r2, r3
 800bcee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bcf2:	4611      	mov	r1, r2
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7fc fe9b 	bl	8008a30 <chk_lock>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bd00:	7ffb      	ldrb	r3, [r7, #31]
 800bd02:	f003 031c 	and.w	r3, r3, #28
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	f000 8117 	beq.w	800bf3a <f_open+0x2d2>
			if (res != FR_OK) {					/* No file, create new */
 800bd0c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d017      	beq.n	800bd44 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bd14:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800bd18:	2b04      	cmp	r3, #4
 800bd1a:	d10e      	bne.n	800bd3a <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bd1c:	f7fc fee4 	bl	8008ae8 <enq_lock>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d006      	beq.n	800bd34 <f_open+0xcc>
 800bd26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fe fece 	bl	800aacc <dir_register>
 800bd30:	4603      	mov	r3, r0
 800bd32:	e000      	b.n	800bd36 <f_open+0xce>
 800bd34:	2312      	movs	r3, #18
 800bd36:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bd3a:	7ffb      	ldrb	r3, [r7, #31]
 800bd3c:	f043 0308 	orr.w	r3, r3, #8
 800bd40:	77fb      	strb	r3, [r7, #31]
 800bd42:	e011      	b.n	800bd68 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bd44:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bd48:	f003 0311 	and.w	r3, r3, #17
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d003      	beq.n	800bd58 <f_open+0xf0>
					res = FR_DENIED;
 800bd50:	2307      	movs	r3, #7
 800bd52:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800bd56:	e007      	b.n	800bd68 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bd58:	7ffb      	ldrb	r3, [r7, #31]
 800bd5a:	f003 0304 	and.w	r3, r3, #4
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d002      	beq.n	800bd68 <f_open+0x100>
 800bd62:	2308      	movs	r3, #8
 800bd64:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bd68:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f040 8100 	bne.w	800bf72 <f_open+0x30a>
 800bd72:	7ffb      	ldrb	r3, [r7, #31]
 800bd74:	f003 0308 	and.w	r3, r3, #8
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f000 80fa 	beq.w	800bf72 <f_open+0x30a>
				dw = GET_FATTIME();
 800bd7e:	f7f9 fa47 	bl	8005210 <get_fattime>
 800bd82:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800bd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	2b04      	cmp	r3, #4
 800bd8c:	f040 8085 	bne.w	800be9a <f_open+0x232>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800bd90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd94:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800bd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd98:	695b      	ldr	r3, [r3, #20]
 800bd9a:	3334      	adds	r3, #52	; 0x34
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7fc fbfb 	bl	8008598 <ld_dword>
 800bda2:	4602      	mov	r2, r0
 800bda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda6:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800bda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdaa:	695b      	ldr	r3, [r3, #20]
 800bdac:	3338      	adds	r3, #56	; 0x38
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7fc fc15 	bl	80085de <ld_qword>
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb6:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800bdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdbc:	695b      	ldr	r3, [r3, #20]
 800bdbe:	3321      	adds	r3, #33	; 0x21
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	f003 0302 	and.w	r3, r3, #2
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdca:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800bdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdce:	2200      	movs	r2, #0
 800bdd0:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800bdd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd4:	695b      	ldr	r3, [r3, #20]
 800bdd6:	3308      	adds	r3, #8
 800bdd8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fc fcf4 	bl	80087ca <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800bde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde4:	695b      	ldr	r3, [r3, #20]
 800bde6:	f103 0214 	add.w	r2, r3, #20
 800bdea:	2300      	movs	r3, #0
 800bdec:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800bdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf0:	695b      	ldr	r3, [r3, #20]
 800bdf2:	330c      	adds	r3, #12
 800bdf4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7fc fce6 	bl	80087ca <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800bdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be00:	695b      	ldr	r3, [r3, #20]
 800be02:	f103 0215 	add.w	r2, r3, #21
 800be06:	2300      	movs	r3, #0
 800be08:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800be0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0c:	695b      	ldr	r3, [r3, #20]
 800be0e:	1d1a      	adds	r2, r3, #4
 800be10:	2320      	movs	r3, #32
 800be12:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800be14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be16:	695b      	ldr	r3, [r3, #20]
 800be18:	3334      	adds	r3, #52	; 0x34
 800be1a:	2100      	movs	r1, #0
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7fc fcd4 	bl	80087ca <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800be22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be24:	695b      	ldr	r3, [r3, #20]
 800be26:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800be2a:	f04f 0200 	mov.w	r2, #0
 800be2e:	f04f 0300 	mov.w	r3, #0
 800be32:	4608      	mov	r0, r1
 800be34:	f7fc fcf5 	bl	8008822 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800be38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3a:	695b      	ldr	r3, [r3, #20]
 800be3c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800be40:	f04f 0200 	mov.w	r2, #0
 800be44:	f04f 0300 	mov.w	r3, #0
 800be48:	4608      	mov	r0, r1
 800be4a:	f7fc fcea 	bl	8008822 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800be4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be50:	695b      	ldr	r3, [r3, #20]
 800be52:	f103 0221 	add.w	r2, r3, #33	; 0x21
 800be56:	2301      	movs	r3, #1
 800be58:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800be5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800be5e:	4618      	mov	r0, r3
 800be60:	f7fe fb82 	bl	800a568 <store_xdir>
 800be64:	4603      	mov	r3, r0
 800be66:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800be6a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d17f      	bne.n	800bf72 <f_open+0x30a>
 800be72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d07b      	beq.n	800bf72 <f_open+0x30a>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800be7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	2200      	movs	r2, #0
 800be82:	4619      	mov	r1, r3
 800be84:	f7fd fc14 	bl	80096b0 <remove_chain>
 800be88:	4603      	mov	r3, r0
 800be8a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800be8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be94:	3b01      	subs	r3, #1
 800be96:	6193      	str	r3, [r2, #24]
 800be98:	e06b      	b.n	800bf72 <f_open+0x30a>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800be9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be9c:	330e      	adds	r3, #14
 800be9e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fc fc91 	bl	80087ca <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800beaa:	3316      	adds	r3, #22
 800beac:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7fc fc8a 	bl	80087ca <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800beb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800beb8:	f103 020b 	add.w	r2, r3, #11
 800bebc:	2320      	movs	r3, #32
 800bebe:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bec4:	4619      	mov	r1, r3
 800bec6:	4610      	mov	r0, r2
 800bec8:	f7fd ffc9 	bl	8009e5e <ld_clust>
 800becc:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bed0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bed4:	2200      	movs	r2, #0
 800bed6:	4619      	mov	r1, r3
 800bed8:	f7fd ffe0 	bl	8009e9c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bedc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bede:	331c      	adds	r3, #28
 800bee0:	2100      	movs	r1, #0
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7fc fc71 	bl	80087ca <st_dword>
					fs->wflag = 1;
 800bee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beea:	2301      	movs	r3, #1
 800beec:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800beee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d03d      	beq.n	800bf72 <f_open+0x30a>
						dw = fs->winsect;
 800bef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800befa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						res = remove_chain(&dj.obj, cl, 0);
 800befe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bf02:	2200      	movs	r2, #0
 800bf04:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7fd fbd1 	bl	80096b0 <remove_chain>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						if (res == FR_OK) {
 800bf14:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d12a      	bne.n	800bf72 <f_open+0x30a>
							res = move_window(fs, dw);
 800bf1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fc ff34 	bl	8008d90 <move_window>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bf2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf34:	3b01      	subs	r3, #1
 800bf36:	6193      	str	r3, [r2, #24]
 800bf38:	e01b      	b.n	800bf72 <f_open+0x30a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bf3a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d117      	bne.n	800bf72 <f_open+0x30a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bf42:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bf46:	f003 0310 	and.w	r3, r3, #16
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d003      	beq.n	800bf56 <f_open+0x2ee>
					res = FR_NO_FILE;
 800bf4e:	2304      	movs	r3, #4
 800bf50:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800bf54:	e00d      	b.n	800bf72 <f_open+0x30a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bf56:	7ffb      	ldrb	r3, [r7, #31]
 800bf58:	f003 0302 	and.w	r3, r3, #2
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d008      	beq.n	800bf72 <f_open+0x30a>
 800bf60:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bf64:	f003 0301 	and.w	r3, r3, #1
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d002      	beq.n	800bf72 <f_open+0x30a>
						res = FR_DENIED;
 800bf6c:	2307      	movs	r3, #7
 800bf6e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bf72:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d128      	bne.n	800bfcc <f_open+0x364>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bf7a:	7ffb      	ldrb	r3, [r7, #31]
 800bf7c:	f003 0308 	and.w	r3, r3, #8
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d003      	beq.n	800bf8c <f_open+0x324>
				mode |= FA_MODIFIED;
 800bf84:	7ffb      	ldrb	r3, [r7, #31]
 800bf86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf8a:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bf8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf92:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800bf94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf98:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bf9a:	7ffb      	ldrb	r3, [r7, #31]
 800bf9c:	f023 0301 	bic.w	r3, r3, #1
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	bf14      	ite	ne
 800bfa4:	2301      	movne	r3, #1
 800bfa6:	2300      	moveq	r3, #0
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	461a      	mov	r2, r3
 800bfac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bfb0:	4611      	mov	r1, r2
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7fc fdba 	bl	8008b2c <inc_lock>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbc:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d102      	bne.n	800bfcc <f_open+0x364>
 800bfc6:	2302      	movs	r3, #2
 800bfc8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bfcc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	f040 810e 	bne.w	800c1f2 <f_open+0x58a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800bfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	2b04      	cmp	r3, #4
 800bfdc:	d12d      	bne.n	800c03a <f_open+0x3d2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800bfde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe2:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800bfe4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bfe8:	4613      	mov	r3, r2
 800bfea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bfee:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bff2:	431a      	orrs	r2, r3
 800bff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff6:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800bff8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffc:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800bffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c000:	695b      	ldr	r3, [r3, #20]
 800c002:	3334      	adds	r3, #52	; 0x34
 800c004:	4618      	mov	r0, r3
 800c006:	f7fc fac7 	bl	8008598 <ld_dword>
 800c00a:	4602      	mov	r2, r0
 800c00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c012:	695b      	ldr	r3, [r3, #20]
 800c014:	3338      	adds	r3, #56	; 0x38
 800c016:	4618      	mov	r0, r3
 800c018:	f7fc fae1 	bl	80085de <ld_qword>
 800c01c:	4602      	mov	r2, r0
 800c01e:	460b      	mov	r3, r1
 800c020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c022:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c028:	695b      	ldr	r3, [r3, #20]
 800c02a:	3321      	adds	r3, #33	; 0x21
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	f003 0302 	and.w	r3, r3, #2
 800c032:	b2da      	uxtb	r2, r3
 800c034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c036:	71da      	strb	r2, [r3, #7]
 800c038:	e016      	b.n	800c068 <f_open+0x400>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c03a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c03c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c03e:	4619      	mov	r1, r3
 800c040:	4610      	mov	r0, r2
 800c042:	f7fd ff0c 	bl	8009e5e <ld_clust>
 800c046:	4602      	mov	r2, r0
 800c048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c04c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c04e:	331c      	adds	r3, #28
 800c050:	4618      	mov	r0, r3
 800c052:	f7fc faa1 	bl	8008598 <ld_dword>
 800c056:	4603      	mov	r3, r0
 800c058:	2200      	movs	r2, #0
 800c05a:	613b      	str	r3, [r7, #16]
 800c05c:	617a      	str	r2, [r7, #20]
 800c05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c060:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c064:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06a:	2200      	movs	r2, #0
 800c06c:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c06e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c076:	88da      	ldrh	r2, [r3, #6]
 800c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07e:	7ffa      	ldrb	r2, [r7, #31]
 800c080:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	2200      	movs	r2, #0
 800c088:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800c08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08e:	2200      	movs	r2, #0
 800c090:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c092:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c094:	f04f 0200 	mov.w	r2, #0
 800c098:	f04f 0300 	mov.w	r3, #0
 800c09c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a2:	3354      	adds	r3, #84	; 0x54
 800c0a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c0a8:	2100      	movs	r1, #0
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f7fc fc62 	bl	8008974 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c0b0:	7ffb      	ldrb	r3, [r7, #31]
 800c0b2:	f003 0320 	and.w	r3, r3, #32
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f000 809b 	beq.w	800c1f2 <f_open+0x58a>
 800c0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	f000 8095 	beq.w	800c1f2 <f_open+0x58a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c0ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0d0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d6:	895b      	ldrh	r3, [r3, #10]
 800c0d8:	461a      	mov	r2, r3
 800c0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0dc:	899b      	ldrh	r3, [r3, #12]
 800c0de:	fb02 f303 	mul.w	r3, r2, r3
 800c0e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e8:	689b      	ldr	r3, [r3, #8]
 800c0ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c0f4:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 800c0f8:	e023      	b.n	800c142 <f_open+0x4da>
					clst = get_fat(&fp->obj, clst);
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800c100:	4618      	mov	r0, r3
 800c102:	f7fc ff03 	bl	8008f0c <get_fat>
 800c106:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					if (clst <= 1) res = FR_INT_ERR;
 800c10a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d802      	bhi.n	800c118 <f_open+0x4b0>
 800c112:	2302      	movs	r3, #2
 800c114:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c118:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c120:	d102      	bne.n	800c128 <f_open+0x4c0>
 800c122:	2301      	movs	r3, #1
 800c124:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c128:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c12c:	2200      	movs	r2, #0
 800c12e:	4698      	mov	r8, r3
 800c130:	4691      	mov	r9, r2
 800c132:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800c136:	ebb2 0a08 	subs.w	sl, r2, r8
 800c13a:	eb63 0b09 	sbc.w	fp, r3, r9
 800c13e:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
 800c142:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10a      	bne.n	800c160 <f_open+0x4f8>
 800c14a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c14e:	2200      	movs	r2, #0
 800c150:	461c      	mov	r4, r3
 800c152:	4615      	mov	r5, r2
 800c154:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800c158:	4294      	cmp	r4, r2
 800c15a:	eb75 0303 	sbcs.w	r3, r5, r3
 800c15e:	d3cc      	bcc.n	800c0fa <f_open+0x492>
				}
				fp->clust = clst;
 800c160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c162:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c166:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c168:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d140      	bne.n	800c1f2 <f_open+0x58a>
 800c170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c172:	899b      	ldrh	r3, [r3, #12]
 800c174:	b29b      	uxth	r3, r3
 800c176:	2200      	movs	r2, #0
 800c178:	60bb      	str	r3, [r7, #8]
 800c17a:	60fa      	str	r2, [r7, #12]
 800c17c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800c180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c184:	f7f4 f87c 	bl	8000280 <__aeabi_uldivmod>
 800c188:	4313      	orrs	r3, r2
 800c18a:	d032      	beq.n	800c1f2 <f_open+0x58a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800c192:	4618      	mov	r0, r3
 800c194:	f7fc fe9a 	bl	8008ecc <clust2sect>
 800c198:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 800c19c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d103      	bne.n	800c1ac <f_open+0x544>
						res = FR_INT_ERR;
 800c1a4:	2302      	movs	r3, #2
 800c1a6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800c1aa:	e022      	b.n	800c1f2 <f_open+0x58a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ae:	899b      	ldrh	r3, [r3, #12]
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	603b      	str	r3, [r7, #0]
 800c1b6:	607a      	str	r2, [r7, #4]
 800c1b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1bc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800c1c0:	f7f4 f85e 	bl	8000280 <__aeabi_uldivmod>
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c1cc:	441a      	add	r2, r3
 800c1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d0:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d4:	7858      	ldrb	r0, [r3, #1]
 800c1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	f7fc f963 	bl	80084ac <disk_read>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d002      	beq.n	800c1f2 <f_open+0x58a>
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c1f2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d002      	beq.n	800c200 <f_open+0x598>
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c200:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 800c204:	4618      	mov	r0, r3
 800c206:	37a0      	adds	r7, #160	; 0xa0
 800c208:	46bd      	mov	sp, r7
 800c20a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c20e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c20e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c212:	b098      	sub	sp, #96	; 0x60
 800c214:	af00      	add	r7, sp, #0
 800c216:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c218:	62b9      	str	r1, [r7, #40]	; 0x28
 800c21a:	627a      	str	r2, [r7, #36]	; 0x24
 800c21c:	623b      	str	r3, [r7, #32]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c220:	64fb      	str	r3, [r7, #76]	; 0x4c


	*br = 0;	/* Clear read byte counter */
 800c222:	6a3a      	ldr	r2, [r7, #32]
 800c224:	2300      	movs	r3, #0
 800c226:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c22a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c22e:	4619      	mov	r1, r3
 800c230:	4610      	mov	r0, r2
 800c232:	f7ff fc9d 	bl	800bb70 <validate>
 800c236:	4603      	mov	r3, r0
 800c238:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c23c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c240:	2b00      	cmp	r3, #0
 800c242:	d108      	bne.n	800c256 <f_read+0x48>
 800c244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c246:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c24a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c24e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c252:	2b00      	cmp	r3, #0
 800c254:	d002      	beq.n	800c25c <f_read+0x4e>
 800c256:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c25a:	e16b      	b.n	800c534 <f_read+0x326>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c262:	f003 0301 	and.w	r3, r3, #1
 800c266:	2b00      	cmp	r3, #0
 800c268:	d101      	bne.n	800c26e <f_read+0x60>
 800c26a:	2307      	movs	r3, #7
 800c26c:	e162      	b.n	800c534 <f_read+0x326>
	remain = fp->obj.objsize - fp->fptr;
 800c26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c270:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c276:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c27a:	ebb0 0802 	subs.w	r8, r0, r2
 800c27e:	eb61 0903 	sbc.w	r9, r1, r3
 800c282:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c288:	2200      	movs	r2, #0
 800c28a:	461c      	mov	r4, r3
 800c28c:	4615      	mov	r5, r2
 800c28e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c292:	42a2      	cmp	r2, r4
 800c294:	41ab      	sbcs	r3, r5
 800c296:	f080 8148 	bcs.w	800c52a <f_read+0x31c>
 800c29a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c29c:	627b      	str	r3, [r7, #36]	; 0x24

	for ( ;  btr;								/* Repeat until all data read */
 800c29e:	e144      	b.n	800c52a <f_read+0x31c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800c2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2a8:	899b      	ldrh	r3, [r3, #12]
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	61bb      	str	r3, [r7, #24]
 800c2b0:	61fa      	str	r2, [r7, #28]
 800c2b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c2b6:	f7f3 ffe3 	bl	8000280 <__aeabi_uldivmod>
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	f040 80e9 	bne.w	800c492 <f_read+0x284>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800c2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2c8:	899b      	ldrh	r3, [r3, #12]
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	613b      	str	r3, [r7, #16]
 800c2d0:	617a      	str	r2, [r7, #20]
 800c2d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c2d6:	f7f3 ffd3 	bl	8000280 <__aeabi_uldivmod>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	460b      	mov	r3, r1
 800c2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2e0:	895b      	ldrh	r3, [r3, #10]
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	4013      	ands	r3, r2
 800c2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (csect == 0) {					/* On the cluster boundary? */
 800c2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d132      	bne.n	800c354 <f_read+0x146>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	d103      	bne.n	800c300 <f_read+0xf2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2fe:	e013      	b.n	800c328 <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c304:	2b00      	cmp	r3, #0
 800c306:	d007      	beq.n	800c318 <f_read+0x10a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c30e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c310:	f7fd fb83 	bl	8009a1a <clmt_clust>
 800c314:	65b8      	str	r0, [r7, #88]	; 0x58
 800c316:	e007      	b.n	800c328 <f_read+0x11a>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c31e:	4619      	mov	r1, r3
 800c320:	4610      	mov	r0, r2
 800c322:	f7fc fdf3 	bl	8008f0c <get_fat>
 800c326:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c328:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d805      	bhi.n	800c33a <f_read+0x12c>
 800c32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c330:	2202      	movs	r2, #2
 800c332:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c336:	2302      	movs	r3, #2
 800c338:	e0fc      	b.n	800c534 <f_read+0x326>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c33a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c340:	d105      	bne.n	800c34e <f_read+0x140>
 800c342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c344:	2201      	movs	r2, #1
 800c346:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c34a:	2301      	movs	r3, #1
 800c34c:	e0f2      	b.n	800c534 <f_read+0x326>
				fp->clust = clst;				/* Update current cluster */
 800c34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c350:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c352:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c35a:	4619      	mov	r1, r3
 800c35c:	4610      	mov	r0, r2
 800c35e:	f7fc fdb5 	bl	8008ecc <clust2sect>
 800c362:	63b8      	str	r0, [r7, #56]	; 0x38
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c366:	2b00      	cmp	r3, #0
 800c368:	d105      	bne.n	800c376 <f_read+0x168>
 800c36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36c:	2202      	movs	r2, #2
 800c36e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c372:	2302      	movs	r3, #2
 800c374:	e0de      	b.n	800c534 <f_read+0x326>
			sect += csect;
 800c376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c37a:	4413      	add	r3, r2
 800c37c:	63bb      	str	r3, [r7, #56]	; 0x38
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c380:	899b      	ldrh	r3, [r3, #12]
 800c382:	461a      	mov	r2, r3
 800c384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c386:	fbb3 f3f2 	udiv	r3, r3, r2
 800c38a:	653b      	str	r3, [r7, #80]	; 0x50
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c38c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d043      	beq.n	800c41a <f_read+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c392:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c396:	4413      	add	r3, r2
 800c398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c39a:	8952      	ldrh	r2, [r2, #10]
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d905      	bls.n	800c3ac <f_read+0x19e>
					cc = fs->csize - csect;
 800c3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a2:	895b      	ldrh	r3, [r3, #10]
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3a8:	1ad3      	subs	r3, r2, r3
 800c3aa:	653b      	str	r3, [r7, #80]	; 0x50
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ae:	7858      	ldrb	r0, [r3, #1]
 800c3b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c3b6:	f7fc f879 	bl	80084ac <disk_read>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d005      	beq.n	800c3cc <f_read+0x1be>
 800c3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	e0b3      	b.n	800c534 <f_read+0x326>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c3d2:	b25b      	sxtb	r3, r3
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	da18      	bge.n	800c40a <f_read+0x1fc>
 800c3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3de:	1ad3      	subs	r3, r2, r3
 800c3e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d911      	bls.n	800c40a <f_read+0x1fc>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ec:	1ad3      	subs	r3, r2, r3
 800c3ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3f0:	8992      	ldrh	r2, [r2, #12]
 800c3f2:	fb02 f303 	mul.w	r3, r2, r3
 800c3f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c3f8:	18d0      	adds	r0, r2, r3
 800c3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fc:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c402:	899b      	ldrh	r3, [r3, #12]
 800c404:	461a      	mov	r2, r3
 800c406:	f7fc fa94 	bl	8008932 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c40c:	899b      	ldrh	r3, [r3, #12]
 800c40e:	461a      	mov	r2, r3
 800c410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c412:	fb02 f303 	mul.w	r3, r2, r3
 800c416:	657b      	str	r3, [r7, #84]	; 0x54
				continue;
 800c418:	e067      	b.n	800c4ea <f_read+0x2dc>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c41e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c420:	429a      	cmp	r2, r3
 800c422:	d033      	beq.n	800c48c <f_read+0x27e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c42a:	b25b      	sxtb	r3, r3
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	da1b      	bge.n	800c468 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c432:	7858      	ldrb	r0, [r3, #1]
 800c434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c436:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c43e:	2301      	movs	r3, #1
 800c440:	f7fc f854 	bl	80084ec <disk_write>
 800c444:	4603      	mov	r3, r0
 800c446:	2b00      	cmp	r3, #0
 800c448:	d005      	beq.n	800c456 <f_read+0x248>
 800c44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44c:	2201      	movs	r2, #1
 800c44e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c452:	2301      	movs	r3, #1
 800c454:	e06e      	b.n	800c534 <f_read+0x326>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c458:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c45c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c460:	b2da      	uxtb	r2, r3
 800c462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c464:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c46a:	7858      	ldrb	r0, [r3, #1]
 800c46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c472:	2301      	movs	r3, #1
 800c474:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c476:	f7fc f819 	bl	80084ac <disk_read>
 800c47a:	4603      	mov	r3, r0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d005      	beq.n	800c48c <f_read+0x27e>
 800c480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c482:	2201      	movs	r2, #1
 800c484:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c488:	2301      	movs	r3, #1
 800c48a:	e053      	b.n	800c534 <f_read+0x326>
			}
#endif
			fp->sect = sect;
 800c48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c490:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c494:	899b      	ldrh	r3, [r3, #12]
 800c496:	4618      	mov	r0, r3
 800c498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a0:	899b      	ldrh	r3, [r3, #12]
 800c4a2:	fbb2 f1f3 	udiv	r1, r2, r3
 800c4a6:	fb01 f303 	mul.w	r3, r1, r3
 800c4aa:	1ad3      	subs	r3, r2, r3
 800c4ac:	1ac3      	subs	r3, r0, r3
 800c4ae:	657b      	str	r3, [r7, #84]	; 0x54
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c4b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d901      	bls.n	800c4bc <f_read+0x2ae>
 800c4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ba:	657b      	str	r3, [r7, #84]	; 0x54
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4be:	f103 0454 	add.w	r4, r3, #84	; 0x54
 800c4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800c4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ca:	899b      	ldrh	r3, [r3, #12]
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	60bb      	str	r3, [r7, #8]
 800c4d2:	60fa      	str	r2, [r7, #12]
 800c4d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c4d8:	f7f3 fed2 	bl	8000280 <__aeabi_uldivmod>
 800c4dc:	4613      	mov	r3, r2
 800c4de:	4423      	add	r3, r4
 800c4e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c4e6:	f7fc fa24 	bl	8008932 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c4ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4ee:	4413      	add	r3, r2
 800c4f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c4f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c4fa:	2000      	movs	r0, #0
 800c4fc:	468a      	mov	sl, r1
 800c4fe:	4683      	mov	fp, r0
 800c500:	eb12 010a 	adds.w	r1, r2, sl
 800c504:	6039      	str	r1, [r7, #0]
 800c506:	eb43 030b 	adc.w	r3, r3, fp
 800c50a:	607b      	str	r3, [r7, #4]
 800c50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c50e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c512:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
 800c516:	6a3b      	ldr	r3, [r7, #32]
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c51c:	441a      	add	r2, r3
 800c51e:	6a3b      	ldr	r3, [r7, #32]
 800c520:	601a      	str	r2, [r3, #0]
 800c522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c526:	1ad3      	subs	r3, r2, r3
 800c528:	627b      	str	r3, [r7, #36]	; 0x24
	for ( ;  btr;								/* Repeat until all data read */
 800c52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f47f aeb7 	bne.w	800c2a0 <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c532:	2300      	movs	r3, #0
}
 800c534:	4618      	mov	r0, r3
 800c536:	3760      	adds	r7, #96	; 0x60
 800c538:	46bd      	mov	sp, r7
 800c53a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c53e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c53e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c542:	b091      	sub	sp, #68	; 0x44
 800c544:	af00      	add	r7, sp, #0
 800c546:	61f8      	str	r0, [r7, #28]
 800c548:	61b9      	str	r1, [r7, #24]
 800c54a:	617a      	str	r2, [r7, #20]
 800c54c:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	62fb      	str	r3, [r7, #44]	; 0x2c


	*bw = 0;	/* Clear write byte counter */
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	2200      	movs	r2, #0
 800c556:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	f107 0220 	add.w	r2, r7, #32
 800c55e:	4611      	mov	r1, r2
 800c560:	4618      	mov	r0, r3
 800c562:	f7ff fb05 	bl	800bb70 <validate>
 800c566:	4603      	mov	r3, r0
 800c568:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c56c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c570:	2b00      	cmp	r3, #0
 800c572:	d108      	bne.n	800c586 <f_write+0x48>
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c57a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c57e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c582:	2b00      	cmp	r3, #0
 800c584:	d002      	beq.n	800c58c <f_write+0x4e>
 800c586:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c58a:	e1aa      	b.n	800c8e2 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c592:	f003 0302 	and.w	r3, r3, #2
 800c596:	2b00      	cmp	r3, #0
 800c598:	d101      	bne.n	800c59e <f_write+0x60>
 800c59a:	2307      	movs	r3, #7
 800c59c:	e1a1      	b.n	800c8e2 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c59e:	6a3b      	ldr	r3, [r7, #32]
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	2b04      	cmp	r3, #4
 800c5a4:	f000 818d 	beq.w	800c8c2 <f_write+0x384>
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	18d1      	adds	r1, r2, r3
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	4299      	cmp	r1, r3
 800c5bc:	f080 8181 	bcs.w	800c8c2 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	43db      	mvns	r3, r3
 800c5ca:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c5cc:	e179      	b.n	800c8c2 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	899b      	ldrh	r3, [r3, #12]
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	2200      	movs	r2, #0
 800c5dc:	461d      	mov	r5, r3
 800c5de:	4616      	mov	r6, r2
 800c5e0:	462a      	mov	r2, r5
 800c5e2:	4633      	mov	r3, r6
 800c5e4:	f7f3 fe4c 	bl	8000280 <__aeabi_uldivmod>
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	f040 810a 	bne.w	800c802 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c5ee:	69fb      	ldr	r3, [r7, #28]
 800c5f0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800c5f4:	6a3b      	ldr	r3, [r7, #32]
 800c5f6:	899b      	ldrh	r3, [r3, #12]
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	60bb      	str	r3, [r7, #8]
 800c5fe:	60fa      	str	r2, [r7, #12]
 800c600:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c604:	f7f3 fe3c 	bl	8000280 <__aeabi_uldivmod>
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	6a3b      	ldr	r3, [r7, #32]
 800c60e:	895b      	ldrh	r3, [r3, #10]
 800c610:	3b01      	subs	r3, #1
 800c612:	4013      	ands	r3, r2
 800c614:	62bb      	str	r3, [r7, #40]	; 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 800c616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d146      	bne.n	800c6aa <f_write+0x16c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c622:	4313      	orrs	r3, r2
 800c624:	d10c      	bne.n	800c640 <f_write+0x102>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c626:	69fb      	ldr	r3, [r7, #28]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 800c62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d11a      	bne.n	800c668 <f_write+0x12a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	2100      	movs	r1, #0
 800c636:	4618      	mov	r0, r3
 800c638:	f7fd f8ee 	bl	8009818 <create_chain>
 800c63c:	63b8      	str	r0, [r7, #56]	; 0x38
 800c63e:	e013      	b.n	800c668 <f_write+0x12a>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c644:	2b00      	cmp	r3, #0
 800c646:	d007      	beq.n	800c658 <f_write+0x11a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c64e:	69f8      	ldr	r0, [r7, #28]
 800c650:	f7fd f9e3 	bl	8009a1a <clmt_clust>
 800c654:	63b8      	str	r0, [r7, #56]	; 0x38
 800c656:	e007      	b.n	800c668 <f_write+0x12a>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c658:	69fa      	ldr	r2, [r7, #28]
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65e:	4619      	mov	r1, r3
 800c660:	4610      	mov	r0, r2
 800c662:	f7fd f8d9 	bl	8009818 <create_chain>
 800c666:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	f000 812e 	beq.w	800c8cc <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c672:	2b01      	cmp	r3, #1
 800c674:	d105      	bne.n	800c682 <f_write+0x144>
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	2202      	movs	r2, #2
 800c67a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c67e:	2302      	movs	r3, #2
 800c680:	e12f      	b.n	800c8e2 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c688:	d105      	bne.n	800c696 <f_write+0x158>
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	2201      	movs	r2, #1
 800c68e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c692:	2301      	movs	r3, #1
 800c694:	e125      	b.n	800c8e2 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c69a:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d102      	bne.n	800c6aa <f_write+0x16c>
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6a8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6b0:	b25b      	sxtb	r3, r3
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	da1b      	bge.n	800c6ee <f_write+0x1b0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c6b6:	6a3b      	ldr	r3, [r7, #32]
 800c6b8:	7858      	ldrb	r0, [r3, #1]
 800c6ba:	69fb      	ldr	r3, [r7, #28]
 800c6bc:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	f7fb ff11 	bl	80084ec <disk_write>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d005      	beq.n	800c6dc <f_write+0x19e>
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c6d8:	2301      	movs	r3, #1
 800c6da:	e102      	b.n	800c8e2 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6e6:	b2da      	uxtb	r2, r3
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c6ee:	6a3a      	ldr	r2, [r7, #32]
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	4610      	mov	r0, r2
 800c6f8:	f7fc fbe8 	bl	8008ecc <clust2sect>
 800c6fc:	6278      	str	r0, [r7, #36]	; 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c700:	2b00      	cmp	r3, #0
 800c702:	d105      	bne.n	800c710 <f_write+0x1d2>
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	2202      	movs	r2, #2
 800c708:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c70c:	2302      	movs	r3, #2
 800c70e:	e0e8      	b.n	800c8e2 <f_write+0x3a4>
			sect += csect;
 800c710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c714:	4413      	add	r3, r2
 800c716:	627b      	str	r3, [r7, #36]	; 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c718:	6a3b      	ldr	r3, [r7, #32]
 800c71a:	899b      	ldrh	r3, [r3, #12]
 800c71c:	461a      	mov	r2, r3
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	fbb3 f3f2 	udiv	r3, r3, r2
 800c724:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d046      	beq.n	800c7ba <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c72c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c730:	4413      	add	r3, r2
 800c732:	6a3a      	ldr	r2, [r7, #32]
 800c734:	8952      	ldrh	r2, [r2, #10]
 800c736:	4293      	cmp	r3, r2
 800c738:	d905      	bls.n	800c746 <f_write+0x208>
					cc = fs->csize - csect;
 800c73a:	6a3b      	ldr	r3, [r7, #32]
 800c73c:	895b      	ldrh	r3, [r3, #10]
 800c73e:	461a      	mov	r2, r3
 800c740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c746:	6a3b      	ldr	r3, [r7, #32]
 800c748:	7858      	ldrb	r0, [r3, #1]
 800c74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c74e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c750:	f7fb fecc 	bl	80084ec <disk_write>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d005      	beq.n	800c766 <f_write+0x228>
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	2201      	movs	r2, #1
 800c75e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c762:	2301      	movs	r3, #1
 800c764:	e0bd      	b.n	800c8e2 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c766:	69fb      	ldr	r3, [r7, #28]
 800c768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76c:	1ad3      	subs	r3, r2, r3
 800c76e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c770:	429a      	cmp	r2, r3
 800c772:	d91a      	bls.n	800c7aa <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c780:	1ad3      	subs	r3, r2, r3
 800c782:	6a3a      	ldr	r2, [r7, #32]
 800c784:	8992      	ldrh	r2, [r2, #12]
 800c786:	fb02 f303 	mul.w	r3, r2, r3
 800c78a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c78c:	18d1      	adds	r1, r2, r3
 800c78e:	6a3b      	ldr	r3, [r7, #32]
 800c790:	899b      	ldrh	r3, [r3, #12]
 800c792:	461a      	mov	r2, r3
 800c794:	f7fc f8cd 	bl	8008932 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c79e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7a2:	b2da      	uxtb	r2, r3
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c7aa:	6a3b      	ldr	r3, [r7, #32]
 800c7ac:	899b      	ldrh	r3, [r3, #12]
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b2:	fb02 f303 	mul.w	r3, r2, r3
 800c7b6:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 800c7b8:	e058      	b.n	800c86c <f_write+0x32e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d01b      	beq.n	800c7fc <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c7d0:	4290      	cmp	r0, r2
 800c7d2:	eb71 0303 	sbcs.w	r3, r1, r3
 800c7d6:	d211      	bcs.n	800c7fc <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c7d8:	6a3b      	ldr	r3, [r7, #32]
 800c7da:	7858      	ldrb	r0, [r3, #1]
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7e6:	f7fb fe61 	bl	80084ac <disk_read>
 800c7ea:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d005      	beq.n	800c7fc <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	e072      	b.n	800c8e2 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c800:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c802:	6a3b      	ldr	r3, [r7, #32]
 800c804:	899b      	ldrh	r3, [r3, #12]
 800c806:	4618      	mov	r0, r3
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c80e:	6a3b      	ldr	r3, [r7, #32]
 800c810:	899b      	ldrh	r3, [r3, #12]
 800c812:	fbb2 f1f3 	udiv	r1, r2, r3
 800c816:	fb01 f303 	mul.w	r3, r1, r3
 800c81a:	1ad3      	subs	r3, r2, r3
 800c81c:	1ac3      	subs	r3, r0, r3
 800c81e:	637b      	str	r3, [r7, #52]	; 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c820:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	429a      	cmp	r2, r3
 800c826:	d901      	bls.n	800c82c <f_write+0x2ee>
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	f103 0454 	add.w	r4, r3, #84	; 0x54
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800c838:	6a3b      	ldr	r3, [r7, #32]
 800c83a:	899b      	ldrh	r3, [r3, #12]
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	2200      	movs	r2, #0
 800c840:	603b      	str	r3, [r7, #0]
 800c842:	607a      	str	r2, [r7, #4]
 800c844:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c848:	f7f3 fd1a 	bl	8000280 <__aeabi_uldivmod>
 800c84c:	4613      	mov	r3, r2
 800c84e:	4423      	add	r3, r4
 800c850:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c854:	4618      	mov	r0, r3
 800c856:	f7fc f86c 	bl	8008932 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c860:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c864:	b2da      	uxtb	r2, r3
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c86c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c870:	4413      	add	r3, r2
 800c872:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c87a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c87c:	2000      	movs	r0, #0
 800c87e:	4688      	mov	r8, r1
 800c880:	4681      	mov	r9, r0
 800c882:	eb12 0a08 	adds.w	sl, r2, r8
 800c886:	eb43 0b09 	adc.w	fp, r3, r9
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c896:	69fb      	ldr	r3, [r7, #28]
 800c898:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c89c:	4290      	cmp	r0, r2
 800c89e:	eb71 0403 	sbcs.w	r4, r1, r3
 800c8a2:	d201      	bcs.n	800c8a8 <f_write+0x36a>
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8b4:	441a      	add	r2, r3
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	601a      	str	r2, [r3, #0]
 800c8ba:	697a      	ldr	r2, [r7, #20]
 800c8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8be:	1ad3      	subs	r3, r2, r3
 800c8c0:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	f47f ae82 	bne.w	800c5ce <f_write+0x90>
 800c8ca:	e000      	b.n	800c8ce <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c8cc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8d8:	b2da      	uxtb	r2, r3
 800c8da:	69fb      	ldr	r3, [r7, #28]
 800c8dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800c8e0:	2300      	movs	r3, #0
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3744      	adds	r7, #68	; 0x44
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c8ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b09a      	sub	sp, #104	; 0x68
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c8fa:	4611      	mov	r1, r2
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7ff f937 	bl	800bb70 <validate>
 800c902:	4603      	mov	r3, r0
 800c904:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c908:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	f040 8105 	bne.w	800cb1c <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f000 80fd 	beq.w	800cb1c <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c928:	b25b      	sxtb	r3, r3
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	da17      	bge.n	800c95e <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c92e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c930:	7858      	ldrb	r0, [r3, #1]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c93c:	2301      	movs	r3, #1
 800c93e:	f7fb fdd5 	bl	80084ec <disk_write>
 800c942:	4603      	mov	r3, r0
 800c944:	2b00      	cmp	r3, #0
 800c946:	d001      	beq.n	800c94c <f_sync+0x60>
 800c948:	2301      	movs	r3, #1
 800c94a:	e0e9      	b.n	800cb20 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c956:	b2da      	uxtb	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c95e:	f7f8 fc57 	bl	8005210 <get_fattime>
 800c962:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800c964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	2b04      	cmp	r3, #4
 800c96a:	f040 808c 	bne.w	800ca86 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4618      	mov	r0, r3
 800c972:	f7fc fe3d 	bl	80095f0 <fill_first_frag>
 800c976:	4603      	mov	r3, r0
 800c978:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800c97c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c980:	2b00      	cmp	r3, #0
 800c982:	d10a      	bne.n	800c99a <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c98a:	f04f 32ff 	mov.w	r2, #4294967295
 800c98e:	4619      	mov	r1, r3
 800c990:	f7fc fe5d 	bl	800964e <fill_last_frag>
 800c994:	4603      	mov	r3, r0
 800c996:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800c99a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	f040 80bc 	bne.w	800cb1c <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	f107 0308 	add.w	r3, r7, #8
 800c9aa:	4611      	mov	r1, r2
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7fd fda5 	bl	800a4fc <load_obj_dir>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800c9b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f040 80ad 	bne.w	800cb1c <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800c9c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9c4:	695b      	ldr	r3, [r3, #20]
 800c9c6:	3304      	adds	r3, #4
 800c9c8:	781a      	ldrb	r2, [r3, #0]
 800c9ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9cc:	695b      	ldr	r3, [r3, #20]
 800c9ce:	3304      	adds	r3, #4
 800c9d0:	f042 0220 	orr.w	r2, r2, #32
 800c9d4:	b2d2      	uxtb	r2, r2
 800c9d6:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	79da      	ldrb	r2, [r3, #7]
 800c9dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9de:	695b      	ldr	r3, [r3, #20]
 800c9e0:	3321      	adds	r3, #33	; 0x21
 800c9e2:	f042 0201 	orr.w	r2, r2, #1
 800c9e6:	b2d2      	uxtb	r2, r2
 800c9e8:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800c9ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9ec:	695b      	ldr	r3, [r3, #20]
 800c9ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	f7fb fee6 	bl	80087ca <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800c9fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca00:	695b      	ldr	r3, [r3, #20]
 800ca02:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ca0c:	4608      	mov	r0, r1
 800ca0e:	f7fb ff08 	bl	8008822 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800ca12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca14:	695b      	ldr	r3, [r3, #20]
 800ca16:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ca20:	4608      	mov	r0, r1
 800ca22:	f7fb fefe 	bl	8008822 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800ca26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca28:	695b      	ldr	r3, [r3, #20]
 800ca2a:	330c      	adds	r3, #12
 800ca2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fb fecb 	bl	80087ca <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800ca34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca36:	695b      	ldr	r3, [r3, #20]
 800ca38:	3315      	adds	r3, #21
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800ca3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca40:	695b      	ldr	r3, [r3, #20]
 800ca42:	3310      	adds	r3, #16
 800ca44:	2100      	movs	r1, #0
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7fb febf 	bl	80087ca <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800ca4c:	f107 0308 	add.w	r3, r7, #8
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7fd fd89 	bl	800a568 <store_xdir>
 800ca56:	4603      	mov	r3, r0
 800ca58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ca5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d15b      	bne.n	800cb1c <f_sync+0x230>
							res = sync_fs(fs);
 800ca64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7fc f9c0 	bl	8008dec <sync_fs>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca7c:	b2da      	uxtb	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ca84:	e04a      	b.n	800cb1c <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ca86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	4610      	mov	r0, r2
 800ca90:	f7fc f97e 	bl	8008d90 <move_window>
 800ca94:	4603      	mov	r3, r0
 800ca96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800ca9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d13c      	bne.n	800cb1c <f_sync+0x230>
					dir = fp->dir_ptr;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caa6:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800caa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caaa:	330b      	adds	r3, #11
 800caac:	781a      	ldrb	r2, [r3, #0]
 800caae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cab0:	330b      	adds	r3, #11
 800cab2:	f042 0220 	orr.w	r2, r2, #32
 800cab6:	b2d2      	uxtb	r2, r2
 800cab8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6818      	ldr	r0, [r3, #0]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	689b      	ldr	r3, [r3, #8]
 800cac2:	461a      	mov	r2, r3
 800cac4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cac6:	f7fd f9e9 	bl	8009e9c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800caca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cacc:	f103 001c 	add.w	r0, r3, #28
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cad6:	4613      	mov	r3, r2
 800cad8:	4619      	mov	r1, r3
 800cada:	f7fb fe76 	bl	80087ca <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cae0:	3316      	adds	r3, #22
 800cae2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fb fe70 	bl	80087ca <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800caea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caec:	3312      	adds	r3, #18
 800caee:	2100      	movs	r1, #0
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7fb fe4f 	bl	8008794 <st_word>
					fs->wflag = 1;
 800caf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800caf8:	2201      	movs	r2, #1
 800cafa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cafc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fc f974 	bl	8008dec <sync_fs>
 800cb04:	4603      	mov	r3, r0
 800cb06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb14:	b2da      	uxtb	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cb1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3768      	adds	r7, #104	; 0x68
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f7ff fedb 	bl	800c8ec <f_sync>
 800cb36:	4603      	mov	r3, r0
 800cb38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d118      	bne.n	800cb72 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f107 0208 	add.w	r2, r7, #8
 800cb46:	4611      	mov	r1, r2
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7ff f811 	bl	800bb70 <validate>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cb52:	7bfb      	ldrb	r3, [r7, #15]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d10c      	bne.n	800cb72 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7fc f873 	bl	8008c48 <dec_lock>
 800cb62:	4603      	mov	r3, r0
 800cb64:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cb66:	7bfb      	ldrb	r3, [r7, #15]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d102      	bne.n	800cb72 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cb72:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b088      	sub	sp, #32
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	60b9      	str	r1, [r7, #8]
 800cb86:	607a      	str	r2, [r7, #4]
	int n = 0;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800cb90:	e01b      	b.n	800cbca <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800cb92:	f107 0310 	add.w	r3, r7, #16
 800cb96:	f107 0114 	add.w	r1, r7, #20
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f7ff fb36 	bl	800c20e <f_read>
		if (rc != 1) break;
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d116      	bne.n	800cbd6 <f_gets+0x5a>
		c = s[0];
 800cba8:	7d3b      	ldrb	r3, [r7, #20]
 800cbaa:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800cbac:	7dfb      	ldrb	r3, [r7, #23]
 800cbae:	2b0d      	cmp	r3, #13
 800cbb0:	d100      	bne.n	800cbb4 <f_gets+0x38>
 800cbb2:	e00a      	b.n	800cbca <f_gets+0x4e>
		*p++ = c;
 800cbb4:	69bb      	ldr	r3, [r7, #24]
 800cbb6:	1c5a      	adds	r2, r3, #1
 800cbb8:	61ba      	str	r2, [r7, #24]
 800cbba:	7dfa      	ldrb	r2, [r7, #23]
 800cbbc:	701a      	strb	r2, [r3, #0]
		n++;
 800cbbe:	69fb      	ldr	r3, [r7, #28]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800cbc4:	7dfb      	ldrb	r3, [r7, #23]
 800cbc6:	2b0a      	cmp	r3, #10
 800cbc8:	d007      	beq.n	800cbda <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	3b01      	subs	r3, #1
 800cbce:	69fa      	ldr	r2, [r7, #28]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	dbde      	blt.n	800cb92 <f_gets+0x16>
 800cbd4:	e002      	b.n	800cbdc <f_gets+0x60>
		if (rc != 1) break;
 800cbd6:	bf00      	nop
 800cbd8:	e000      	b.n	800cbdc <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800cbda:	bf00      	nop
	}
	*p = 0;
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800cbe2:	69fb      	ldr	r3, [r7, #28]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d001      	beq.n	800cbec <f_gets+0x70>
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	e000      	b.n	800cbee <f_gets+0x72>
 800cbec:	2300      	movs	r3, #0
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3720      	adds	r7, #32
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
	...

0800cbf8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b087      	sub	sp, #28
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	4613      	mov	r3, r2
 800cc04:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cc06:	2301      	movs	r3, #1
 800cc08:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cc0e:	4b1f      	ldr	r3, [pc, #124]	; (800cc8c <FATFS_LinkDriverEx+0x94>)
 800cc10:	7a5b      	ldrb	r3, [r3, #9]
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d131      	bne.n	800cc7c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cc18:	4b1c      	ldr	r3, [pc, #112]	; (800cc8c <FATFS_LinkDriverEx+0x94>)
 800cc1a:	7a5b      	ldrb	r3, [r3, #9]
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	461a      	mov	r2, r3
 800cc20:	4b1a      	ldr	r3, [pc, #104]	; (800cc8c <FATFS_LinkDriverEx+0x94>)
 800cc22:	2100      	movs	r1, #0
 800cc24:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cc26:	4b19      	ldr	r3, [pc, #100]	; (800cc8c <FATFS_LinkDriverEx+0x94>)
 800cc28:	7a5b      	ldrb	r3, [r3, #9]
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	4a17      	ldr	r2, [pc, #92]	; (800cc8c <FATFS_LinkDriverEx+0x94>)
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	4413      	add	r3, r2
 800cc32:	68fa      	ldr	r2, [r7, #12]
 800cc34:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cc36:	4b15      	ldr	r3, [pc, #84]	; (800cc8c <FATFS_LinkDriverEx+0x94>)
 800cc38:	7a5b      	ldrb	r3, [r3, #9]
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	4b13      	ldr	r3, [pc, #76]	; (800cc8c <FATFS_LinkDriverEx+0x94>)
 800cc40:	4413      	add	r3, r2
 800cc42:	79fa      	ldrb	r2, [r7, #7]
 800cc44:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cc46:	4b11      	ldr	r3, [pc, #68]	; (800cc8c <FATFS_LinkDriverEx+0x94>)
 800cc48:	7a5b      	ldrb	r3, [r3, #9]
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	1c5a      	adds	r2, r3, #1
 800cc4e:	b2d1      	uxtb	r1, r2
 800cc50:	4a0e      	ldr	r2, [pc, #56]	; (800cc8c <FATFS_LinkDriverEx+0x94>)
 800cc52:	7251      	strb	r1, [r2, #9]
 800cc54:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cc56:	7dbb      	ldrb	r3, [r7, #22]
 800cc58:	3330      	adds	r3, #48	; 0x30
 800cc5a:	b2da      	uxtb	r2, r3
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	3301      	adds	r3, #1
 800cc64:	223a      	movs	r2, #58	; 0x3a
 800cc66:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	3302      	adds	r3, #2
 800cc6c:	222f      	movs	r2, #47	; 0x2f
 800cc6e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	3303      	adds	r3, #3
 800cc74:	2200      	movs	r2, #0
 800cc76:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cc7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	371c      	adds	r7, #28
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop
 800cc8c:	2000367c 	.word	0x2000367c

0800cc90 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	6839      	ldr	r1, [r7, #0]
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f7ff ffaa 	bl	800cbf8 <FATFS_LinkDriverEx>
 800cca4:	4603      	mov	r3, r0
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3708      	adds	r7, #8
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
	...

0800ccb0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b085      	sub	sp, #20
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	6039      	str	r1, [r7, #0]
 800ccba:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ccbc:	88fb      	ldrh	r3, [r7, #6]
 800ccbe:	2b7f      	cmp	r3, #127	; 0x7f
 800ccc0:	d802      	bhi.n	800ccc8 <ff_convert+0x18>
		c = chr;
 800ccc2:	88fb      	ldrh	r3, [r7, #6]
 800ccc4:	81fb      	strh	r3, [r7, #14]
 800ccc6:	e025      	b.n	800cd14 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d00b      	beq.n	800cce6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ccce:	88fb      	ldrh	r3, [r7, #6]
 800ccd0:	2bff      	cmp	r3, #255	; 0xff
 800ccd2:	d805      	bhi.n	800cce0 <ff_convert+0x30>
 800ccd4:	88fb      	ldrh	r3, [r7, #6]
 800ccd6:	3b80      	subs	r3, #128	; 0x80
 800ccd8:	4a12      	ldr	r2, [pc, #72]	; (800cd24 <ff_convert+0x74>)
 800ccda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccde:	e000      	b.n	800cce2 <ff_convert+0x32>
 800cce0:	2300      	movs	r3, #0
 800cce2:	81fb      	strh	r3, [r7, #14]
 800cce4:	e016      	b.n	800cd14 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cce6:	2300      	movs	r3, #0
 800cce8:	81fb      	strh	r3, [r7, #14]
 800ccea:	e009      	b.n	800cd00 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ccec:	89fb      	ldrh	r3, [r7, #14]
 800ccee:	4a0d      	ldr	r2, [pc, #52]	; (800cd24 <ff_convert+0x74>)
 800ccf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccf4:	88fa      	ldrh	r2, [r7, #6]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d006      	beq.n	800cd08 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ccfa:	89fb      	ldrh	r3, [r7, #14]
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	81fb      	strh	r3, [r7, #14]
 800cd00:	89fb      	ldrh	r3, [r7, #14]
 800cd02:	2b7f      	cmp	r3, #127	; 0x7f
 800cd04:	d9f2      	bls.n	800ccec <ff_convert+0x3c>
 800cd06:	e000      	b.n	800cd0a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cd08:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cd0a:	89fb      	ldrh	r3, [r7, #14]
 800cd0c:	3380      	adds	r3, #128	; 0x80
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cd14:	89fb      	ldrh	r3, [r7, #14]
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3714      	adds	r7, #20
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr
 800cd22:	bf00      	nop
 800cd24:	0800e06c 	.word	0x0800e06c

0800cd28 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b087      	sub	sp, #28
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	4603      	mov	r3, r0
 800cd30:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cd32:	88fb      	ldrh	r3, [r7, #6]
 800cd34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd38:	d201      	bcs.n	800cd3e <ff_wtoupper+0x16>
 800cd3a:	4b3e      	ldr	r3, [pc, #248]	; (800ce34 <ff_wtoupper+0x10c>)
 800cd3c:	e000      	b.n	800cd40 <ff_wtoupper+0x18>
 800cd3e:	4b3e      	ldr	r3, [pc, #248]	; (800ce38 <ff_wtoupper+0x110>)
 800cd40:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	1c9a      	adds	r2, r3, #2
 800cd46:	617a      	str	r2, [r7, #20]
 800cd48:	881b      	ldrh	r3, [r3, #0]
 800cd4a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800cd4c:	8a7b      	ldrh	r3, [r7, #18]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d068      	beq.n	800ce24 <ff_wtoupper+0xfc>
 800cd52:	88fa      	ldrh	r2, [r7, #6]
 800cd54:	8a7b      	ldrh	r3, [r7, #18]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d364      	bcc.n	800ce24 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	1c9a      	adds	r2, r3, #2
 800cd5e:	617a      	str	r2, [r7, #20]
 800cd60:	881b      	ldrh	r3, [r3, #0]
 800cd62:	823b      	strh	r3, [r7, #16]
 800cd64:	8a3b      	ldrh	r3, [r7, #16]
 800cd66:	0a1b      	lsrs	r3, r3, #8
 800cd68:	81fb      	strh	r3, [r7, #14]
 800cd6a:	8a3b      	ldrh	r3, [r7, #16]
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cd70:	88fa      	ldrh	r2, [r7, #6]
 800cd72:	8a79      	ldrh	r1, [r7, #18]
 800cd74:	8a3b      	ldrh	r3, [r7, #16]
 800cd76:	440b      	add	r3, r1
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	da49      	bge.n	800ce10 <ff_wtoupper+0xe8>
			switch (cmd) {
 800cd7c:	89fb      	ldrh	r3, [r7, #14]
 800cd7e:	2b08      	cmp	r3, #8
 800cd80:	d84f      	bhi.n	800ce22 <ff_wtoupper+0xfa>
 800cd82:	a201      	add	r2, pc, #4	; (adr r2, 800cd88 <ff_wtoupper+0x60>)
 800cd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd88:	0800cdad 	.word	0x0800cdad
 800cd8c:	0800cdbf 	.word	0x0800cdbf
 800cd90:	0800cdd5 	.word	0x0800cdd5
 800cd94:	0800cddd 	.word	0x0800cddd
 800cd98:	0800cde5 	.word	0x0800cde5
 800cd9c:	0800cded 	.word	0x0800cded
 800cda0:	0800cdf5 	.word	0x0800cdf5
 800cda4:	0800cdfd 	.word	0x0800cdfd
 800cda8:	0800ce05 	.word	0x0800ce05
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cdac:	88fa      	ldrh	r2, [r7, #6]
 800cdae:	8a7b      	ldrh	r3, [r7, #18]
 800cdb0:	1ad3      	subs	r3, r2, r3
 800cdb2:	005b      	lsls	r3, r3, #1
 800cdb4:	697a      	ldr	r2, [r7, #20]
 800cdb6:	4413      	add	r3, r2
 800cdb8:	881b      	ldrh	r3, [r3, #0]
 800cdba:	80fb      	strh	r3, [r7, #6]
 800cdbc:	e027      	b.n	800ce0e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cdbe:	88fa      	ldrh	r2, [r7, #6]
 800cdc0:	8a7b      	ldrh	r3, [r7, #18]
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	f003 0301 	and.w	r3, r3, #1
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	88fa      	ldrh	r2, [r7, #6]
 800cdce:	1ad3      	subs	r3, r2, r3
 800cdd0:	80fb      	strh	r3, [r7, #6]
 800cdd2:	e01c      	b.n	800ce0e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cdd4:	88fb      	ldrh	r3, [r7, #6]
 800cdd6:	3b10      	subs	r3, #16
 800cdd8:	80fb      	strh	r3, [r7, #6]
 800cdda:	e018      	b.n	800ce0e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cddc:	88fb      	ldrh	r3, [r7, #6]
 800cdde:	3b20      	subs	r3, #32
 800cde0:	80fb      	strh	r3, [r7, #6]
 800cde2:	e014      	b.n	800ce0e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cde4:	88fb      	ldrh	r3, [r7, #6]
 800cde6:	3b30      	subs	r3, #48	; 0x30
 800cde8:	80fb      	strh	r3, [r7, #6]
 800cdea:	e010      	b.n	800ce0e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cdec:	88fb      	ldrh	r3, [r7, #6]
 800cdee:	3b1a      	subs	r3, #26
 800cdf0:	80fb      	strh	r3, [r7, #6]
 800cdf2:	e00c      	b.n	800ce0e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800cdf4:	88fb      	ldrh	r3, [r7, #6]
 800cdf6:	3308      	adds	r3, #8
 800cdf8:	80fb      	strh	r3, [r7, #6]
 800cdfa:	e008      	b.n	800ce0e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cdfc:	88fb      	ldrh	r3, [r7, #6]
 800cdfe:	3b50      	subs	r3, #80	; 0x50
 800ce00:	80fb      	strh	r3, [r7, #6]
 800ce02:	e004      	b.n	800ce0e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ce04:	88fb      	ldrh	r3, [r7, #6]
 800ce06:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ce0a:	80fb      	strh	r3, [r7, #6]
 800ce0c:	bf00      	nop
			}
			break;
 800ce0e:	e008      	b.n	800ce22 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ce10:	89fb      	ldrh	r3, [r7, #14]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d195      	bne.n	800cd42 <ff_wtoupper+0x1a>
 800ce16:	8a3b      	ldrh	r3, [r7, #16]
 800ce18:	005b      	lsls	r3, r3, #1
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	4413      	add	r3, r2
 800ce1e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ce20:	e78f      	b.n	800cd42 <ff_wtoupper+0x1a>
			break;
 800ce22:	bf00      	nop
	}

	return chr;
 800ce24:	88fb      	ldrh	r3, [r7, #6]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	371c      	adds	r7, #28
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	0800e16c 	.word	0x0800e16c
 800ce38:	0800e360 	.word	0x0800e360

0800ce3c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ce40:	2201      	movs	r2, #1
 800ce42:	490e      	ldr	r1, [pc, #56]	; (800ce7c <MX_USB_HOST_Init+0x40>)
 800ce44:	480e      	ldr	r0, [pc, #56]	; (800ce80 <MX_USB_HOST_Init+0x44>)
 800ce46:	f7f9 fe9f 	bl	8006b88 <USBH_Init>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d001      	beq.n	800ce54 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ce50:	f7f3 ff6c 	bl	8000d2c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800ce54:	490b      	ldr	r1, [pc, #44]	; (800ce84 <MX_USB_HOST_Init+0x48>)
 800ce56:	480a      	ldr	r0, [pc, #40]	; (800ce80 <MX_USB_HOST_Init+0x44>)
 800ce58:	f7f9 ff24 	bl	8006ca4 <USBH_RegisterClass>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d001      	beq.n	800ce66 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ce62:	f7f3 ff63 	bl	8000d2c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ce66:	4806      	ldr	r0, [pc, #24]	; (800ce80 <MX_USB_HOST_Init+0x44>)
 800ce68:	f7f9 ffa8 	bl	8006dbc <USBH_Start>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d001      	beq.n	800ce76 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ce72:	f7f3 ff5b 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ce76:	bf00      	nop
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	0800ce9d 	.word	0x0800ce9d
 800ce80:	20003688 	.word	0x20003688
 800ce84:	2000000c 	.word	0x2000000c

0800ce88 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ce8c:	4802      	ldr	r0, [pc, #8]	; (800ce98 <MX_USB_HOST_Process+0x10>)
 800ce8e:	f7f9 ffa5 	bl	8006ddc <USBH_Process>
}
 800ce92:	bf00      	nop
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	20003688 	.word	0x20003688

0800ce9c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	460b      	mov	r3, r1
 800cea6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cea8:	78fb      	ldrb	r3, [r7, #3]
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	2b04      	cmp	r3, #4
 800ceae:	d819      	bhi.n	800cee4 <USBH_UserProcess+0x48>
 800ceb0:	a201      	add	r2, pc, #4	; (adr r2, 800ceb8 <USBH_UserProcess+0x1c>)
 800ceb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb6:	bf00      	nop
 800ceb8:	0800cee5 	.word	0x0800cee5
 800cebc:	0800ced5 	.word	0x0800ced5
 800cec0:	0800cee5 	.word	0x0800cee5
 800cec4:	0800cedd 	.word	0x0800cedd
 800cec8:	0800cecd 	.word	0x0800cecd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cecc:	4b09      	ldr	r3, [pc, #36]	; (800cef4 <USBH_UserProcess+0x58>)
 800cece:	2203      	movs	r2, #3
 800ced0:	701a      	strb	r2, [r3, #0]
  break;
 800ced2:	e008      	b.n	800cee6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ced4:	4b07      	ldr	r3, [pc, #28]	; (800cef4 <USBH_UserProcess+0x58>)
 800ced6:	2202      	movs	r2, #2
 800ced8:	701a      	strb	r2, [r3, #0]
  break;
 800ceda:	e004      	b.n	800cee6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cedc:	4b05      	ldr	r3, [pc, #20]	; (800cef4 <USBH_UserProcess+0x58>)
 800cede:	2201      	movs	r2, #1
 800cee0:	701a      	strb	r2, [r3, #0]
  break;
 800cee2:	e000      	b.n	800cee6 <USBH_UserProcess+0x4a>

  default:
  break;
 800cee4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cee6:	bf00      	nop
 800cee8:	370c      	adds	r7, #12
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr
 800cef2:	bf00      	nop
 800cef4:	20003a60 	.word	0x20003a60

0800cef8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b08a      	sub	sp, #40	; 0x28
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf00:	f107 0314 	add.w	r3, r7, #20
 800cf04:	2200      	movs	r2, #0
 800cf06:	601a      	str	r2, [r3, #0]
 800cf08:	605a      	str	r2, [r3, #4]
 800cf0a:	609a      	str	r2, [r3, #8]
 800cf0c:	60da      	str	r2, [r3, #12]
 800cf0e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf18:	d147      	bne.n	800cfaa <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	613b      	str	r3, [r7, #16]
 800cf1e:	4b25      	ldr	r3, [pc, #148]	; (800cfb4 <HAL_HCD_MspInit+0xbc>)
 800cf20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf22:	4a24      	ldr	r2, [pc, #144]	; (800cfb4 <HAL_HCD_MspInit+0xbc>)
 800cf24:	f043 0301 	orr.w	r3, r3, #1
 800cf28:	6313      	str	r3, [r2, #48]	; 0x30
 800cf2a:	4b22      	ldr	r3, [pc, #136]	; (800cfb4 <HAL_HCD_MspInit+0xbc>)
 800cf2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf2e:	f003 0301 	and.w	r3, r3, #1
 800cf32:	613b      	str	r3, [r7, #16]
 800cf34:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800cf36:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf40:	2300      	movs	r3, #0
 800cf42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf44:	f107 0314 	add.w	r3, r7, #20
 800cf48:	4619      	mov	r1, r3
 800cf4a:	481b      	ldr	r0, [pc, #108]	; (800cfb8 <HAL_HCD_MspInit+0xc0>)
 800cf4c:	f7f4 fb66 	bl	800161c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cf50:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cf54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf56:	2302      	movs	r3, #2
 800cf58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf5e:	2303      	movs	r3, #3
 800cf60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cf62:	230a      	movs	r3, #10
 800cf64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf66:	f107 0314 	add.w	r3, r7, #20
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	4812      	ldr	r0, [pc, #72]	; (800cfb8 <HAL_HCD_MspInit+0xc0>)
 800cf6e:	f7f4 fb55 	bl	800161c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cf72:	4b10      	ldr	r3, [pc, #64]	; (800cfb4 <HAL_HCD_MspInit+0xbc>)
 800cf74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf76:	4a0f      	ldr	r2, [pc, #60]	; (800cfb4 <HAL_HCD_MspInit+0xbc>)
 800cf78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf7c:	6353      	str	r3, [r2, #52]	; 0x34
 800cf7e:	2300      	movs	r3, #0
 800cf80:	60fb      	str	r3, [r7, #12]
 800cf82:	4b0c      	ldr	r3, [pc, #48]	; (800cfb4 <HAL_HCD_MspInit+0xbc>)
 800cf84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf86:	4a0b      	ldr	r2, [pc, #44]	; (800cfb4 <HAL_HCD_MspInit+0xbc>)
 800cf88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cf8c:	6453      	str	r3, [r2, #68]	; 0x44
 800cf8e:	4b09      	ldr	r3, [pc, #36]	; (800cfb4 <HAL_HCD_MspInit+0xbc>)
 800cf90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf96:	60fb      	str	r3, [r7, #12]
 800cf98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	2100      	movs	r1, #0
 800cf9e:	2043      	movs	r0, #67	; 0x43
 800cfa0:	f7f4 fb05 	bl	80015ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cfa4:	2043      	movs	r0, #67	; 0x43
 800cfa6:	f7f4 fb1e 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cfaa:	bf00      	nop
 800cfac:	3728      	adds	r7, #40	; 0x28
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	40023800 	.word	0x40023800
 800cfb8:	40020000 	.word	0x40020000

0800cfbc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7fa fae5 	bl	800759a <USBH_LL_IncTimer>
}
 800cfd0:	bf00      	nop
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fa fb1d 	bl	8007626 <USBH_LL_Connect>
}
 800cfec:	bf00      	nop
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d002:	4618      	mov	r0, r3
 800d004:	f7fa fb26 	bl	8007654 <USBH_LL_Disconnect>
}
 800d008:	bf00      	nop
 800d00a:	3708      	adds	r7, #8
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	460b      	mov	r3, r1
 800d01a:	70fb      	strb	r3, [r7, #3]
 800d01c:	4613      	mov	r3, r2
 800d01e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d020:	bf00      	nop
 800d022:	370c      	adds	r7, #12
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr

0800d02c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fa fad7 	bl	80075ee <USBH_LL_PortEnabled>
}
 800d040:	bf00      	nop
 800d042:	3708      	adds	r7, #8
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b082      	sub	sp, #8
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d056:	4618      	mov	r0, r3
 800d058:	f7fa fad7 	bl	800760a <USBH_LL_PortDisabled>
}
 800d05c:	bf00      	nop
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d072:	2b01      	cmp	r3, #1
 800d074:	d12a      	bne.n	800d0cc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d076:	4a18      	ldr	r2, [pc, #96]	; (800d0d8 <USBH_LL_Init+0x74>)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4a15      	ldr	r2, [pc, #84]	; (800d0d8 <USBH_LL_Init+0x74>)
 800d082:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d086:	4b14      	ldr	r3, [pc, #80]	; (800d0d8 <USBH_LL_Init+0x74>)
 800d088:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d08c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d08e:	4b12      	ldr	r3, [pc, #72]	; (800d0d8 <USBH_LL_Init+0x74>)
 800d090:	2208      	movs	r2, #8
 800d092:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d094:	4b10      	ldr	r3, [pc, #64]	; (800d0d8 <USBH_LL_Init+0x74>)
 800d096:	2201      	movs	r2, #1
 800d098:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d09a:	4b0f      	ldr	r3, [pc, #60]	; (800d0d8 <USBH_LL_Init+0x74>)
 800d09c:	2200      	movs	r2, #0
 800d09e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d0a0:	4b0d      	ldr	r3, [pc, #52]	; (800d0d8 <USBH_LL_Init+0x74>)
 800d0a2:	2202      	movs	r2, #2
 800d0a4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d0a6:	4b0c      	ldr	r3, [pc, #48]	; (800d0d8 <USBH_LL_Init+0x74>)
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d0ac:	480a      	ldr	r0, [pc, #40]	; (800d0d8 <USBH_LL_Init+0x74>)
 800d0ae:	f7f4 fc52 	bl	8001956 <HAL_HCD_Init>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d001      	beq.n	800d0bc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d0b8:	f7f3 fe38 	bl	8000d2c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d0bc:	4806      	ldr	r0, [pc, #24]	; (800d0d8 <USBH_LL_Init+0x74>)
 800d0be:	f7f5 f836 	bl	800212e <HAL_HCD_GetCurrentFrame>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f7fa fa58 	bl	800757c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d0cc:	2300      	movs	r3, #0
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	20003a64 	.word	0x20003a64

0800d0dc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7f4 ffa5 	bl	8002042 <HAL_HCD_Start>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d0fc:	7bfb      	ldrb	r3, [r7, #15]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f000 f982 	bl	800d408 <USBH_Get_USB_Status>
 800d104:	4603      	mov	r3, r0
 800d106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d108:	7bbb      	ldrb	r3, [r7, #14]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b084      	sub	sp, #16
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d11a:	2300      	movs	r3, #0
 800d11c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d11e:	2300      	movs	r3, #0
 800d120:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d128:	4618      	mov	r0, r3
 800d12a:	f7f4 ffad 	bl	8002088 <HAL_HCD_Stop>
 800d12e:	4603      	mov	r3, r0
 800d130:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d132:	7bfb      	ldrb	r3, [r7, #15]
 800d134:	4618      	mov	r0, r3
 800d136:	f000 f967 	bl	800d408 <USBH_Get_USB_Status>
 800d13a:	4603      	mov	r3, r0
 800d13c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d13e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d140:	4618      	mov	r0, r3
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d150:	2301      	movs	r3, #1
 800d152:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7f4 fff5 	bl	800214a <HAL_HCD_GetCurrentSpeed>
 800d160:	4603      	mov	r3, r0
 800d162:	2b02      	cmp	r3, #2
 800d164:	d00c      	beq.n	800d180 <USBH_LL_GetSpeed+0x38>
 800d166:	2b02      	cmp	r3, #2
 800d168:	d80d      	bhi.n	800d186 <USBH_LL_GetSpeed+0x3e>
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d002      	beq.n	800d174 <USBH_LL_GetSpeed+0x2c>
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d003      	beq.n	800d17a <USBH_LL_GetSpeed+0x32>
 800d172:	e008      	b.n	800d186 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d174:	2300      	movs	r3, #0
 800d176:	73fb      	strb	r3, [r7, #15]
    break;
 800d178:	e008      	b.n	800d18c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d17a:	2301      	movs	r3, #1
 800d17c:	73fb      	strb	r3, [r7, #15]
    break;
 800d17e:	e005      	b.n	800d18c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d180:	2302      	movs	r3, #2
 800d182:	73fb      	strb	r3, [r7, #15]
    break;
 800d184:	e002      	b.n	800d18c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d186:	2301      	movs	r3, #1
 800d188:	73fb      	strb	r3, [r7, #15]
    break;
 800d18a:	bf00      	nop
  }
  return  speed;
 800d18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}

0800d196 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d196:	b580      	push	{r7, lr}
 800d198:	b084      	sub	sp, #16
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7f4 ff88 	bl	80020c2 <HAL_HCD_ResetPort>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d1b6:	7bfb      	ldrb	r3, [r7, #15]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f000 f925 	bl	800d408 <USBH_Get_USB_Status>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3710      	adds	r7, #16
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d1de:	78fa      	ldrb	r2, [r7, #3]
 800d1e0:	4611      	mov	r1, r2
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7f4 ff8f 	bl	8002106 <HAL_HCD_HC_GetXferCount>
 800d1e8:	4603      	mov	r3, r0
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3708      	adds	r7, #8
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d1f2:	b590      	push	{r4, r7, lr}
 800d1f4:	b089      	sub	sp, #36	; 0x24
 800d1f6:	af04      	add	r7, sp, #16
 800d1f8:	6078      	str	r0, [r7, #4]
 800d1fa:	4608      	mov	r0, r1
 800d1fc:	4611      	mov	r1, r2
 800d1fe:	461a      	mov	r2, r3
 800d200:	4603      	mov	r3, r0
 800d202:	70fb      	strb	r3, [r7, #3]
 800d204:	460b      	mov	r3, r1
 800d206:	70bb      	strb	r3, [r7, #2]
 800d208:	4613      	mov	r3, r2
 800d20a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d20c:	2300      	movs	r3, #0
 800d20e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d210:	2300      	movs	r3, #0
 800d212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d21a:	787c      	ldrb	r4, [r7, #1]
 800d21c:	78ba      	ldrb	r2, [r7, #2]
 800d21e:	78f9      	ldrb	r1, [r7, #3]
 800d220:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d222:	9302      	str	r3, [sp, #8]
 800d224:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d228:	9301      	str	r3, [sp, #4]
 800d22a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	4623      	mov	r3, r4
 800d232:	f7f4 fbf2 	bl	8001a1a <HAL_HCD_HC_Init>
 800d236:	4603      	mov	r3, r0
 800d238:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d23a:	7bfb      	ldrb	r3, [r7, #15]
 800d23c:	4618      	mov	r0, r3
 800d23e:	f000 f8e3 	bl	800d408 <USBH_Get_USB_Status>
 800d242:	4603      	mov	r3, r0
 800d244:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d246:	7bbb      	ldrb	r3, [r7, #14]
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3714      	adds	r7, #20
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd90      	pop	{r4, r7, pc}

0800d250 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	460b      	mov	r3, r1
 800d25a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d25c:	2300      	movs	r3, #0
 800d25e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d260:	2300      	movs	r3, #0
 800d262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d26a:	78fa      	ldrb	r2, [r7, #3]
 800d26c:	4611      	mov	r1, r2
 800d26e:	4618      	mov	r0, r3
 800d270:	f7f4 fc62 	bl	8001b38 <HAL_HCD_HC_Halt>
 800d274:	4603      	mov	r3, r0
 800d276:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d278:	7bfb      	ldrb	r3, [r7, #15]
 800d27a:	4618      	mov	r0, r3
 800d27c:	f000 f8c4 	bl	800d408 <USBH_Get_USB_Status>
 800d280:	4603      	mov	r3, r0
 800d282:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d284:	7bbb      	ldrb	r3, [r7, #14]
}
 800d286:	4618      	mov	r0, r3
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}

0800d28e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d28e:	b590      	push	{r4, r7, lr}
 800d290:	b089      	sub	sp, #36	; 0x24
 800d292:	af04      	add	r7, sp, #16
 800d294:	6078      	str	r0, [r7, #4]
 800d296:	4608      	mov	r0, r1
 800d298:	4611      	mov	r1, r2
 800d29a:	461a      	mov	r2, r3
 800d29c:	4603      	mov	r3, r0
 800d29e:	70fb      	strb	r3, [r7, #3]
 800d2a0:	460b      	mov	r3, r1
 800d2a2:	70bb      	strb	r3, [r7, #2]
 800d2a4:	4613      	mov	r3, r2
 800d2a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d2b6:	787c      	ldrb	r4, [r7, #1]
 800d2b8:	78ba      	ldrb	r2, [r7, #2]
 800d2ba:	78f9      	ldrb	r1, [r7, #3]
 800d2bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d2c0:	9303      	str	r3, [sp, #12]
 800d2c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d2c4:	9302      	str	r3, [sp, #8]
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c8:	9301      	str	r3, [sp, #4]
 800d2ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d2ce:	9300      	str	r3, [sp, #0]
 800d2d0:	4623      	mov	r3, r4
 800d2d2:	f7f4 fc55 	bl	8001b80 <HAL_HCD_HC_SubmitRequest>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d2da:	7bfb      	ldrb	r3, [r7, #15]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f000 f893 	bl	800d408 <USBH_Get_USB_Status>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3714      	adds	r7, #20
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd90      	pop	{r4, r7, pc}

0800d2f0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d302:	78fa      	ldrb	r2, [r7, #3]
 800d304:	4611      	mov	r1, r2
 800d306:	4618      	mov	r0, r3
 800d308:	f7f4 fee9 	bl	80020de <HAL_HCD_HC_GetURBState>
 800d30c:	4603      	mov	r3, r0
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d316:	b580      	push	{r7, lr}
 800d318:	b082      	sub	sp, #8
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
 800d31e:	460b      	mov	r3, r1
 800d320:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800d322:	20c8      	movs	r0, #200	; 0xc8
 800d324:	f7f4 f844 	bl	80013b0 <HAL_Delay>
  return USBH_OK;
 800d328:	2300      	movs	r3, #0
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3708      	adds	r7, #8
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}

0800d332 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d332:	b480      	push	{r7}
 800d334:	b085      	sub	sp, #20
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
 800d33a:	460b      	mov	r3, r1
 800d33c:	70fb      	strb	r3, [r7, #3]
 800d33e:	4613      	mov	r3, r2
 800d340:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d348:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d34a:	78fb      	ldrb	r3, [r7, #3]
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	212c      	movs	r1, #44	; 0x2c
 800d350:	fb01 f303 	mul.w	r3, r1, r3
 800d354:	4413      	add	r3, r2
 800d356:	333b      	adds	r3, #59	; 0x3b
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d009      	beq.n	800d372 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d35e:	78fb      	ldrb	r3, [r7, #3]
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	212c      	movs	r1, #44	; 0x2c
 800d364:	fb01 f303 	mul.w	r3, r1, r3
 800d368:	4413      	add	r3, r2
 800d36a:	3354      	adds	r3, #84	; 0x54
 800d36c:	78ba      	ldrb	r2, [r7, #2]
 800d36e:	701a      	strb	r2, [r3, #0]
 800d370:	e008      	b.n	800d384 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d372:	78fb      	ldrb	r3, [r7, #3]
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	212c      	movs	r1, #44	; 0x2c
 800d378:	fb01 f303 	mul.w	r3, r1, r3
 800d37c:	4413      	add	r3, r2
 800d37e:	3355      	adds	r3, #85	; 0x55
 800d380:	78ba      	ldrb	r2, [r7, #2]
 800d382:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d384:	2300      	movs	r3, #0
}
 800d386:	4618      	mov	r0, r3
 800d388:	3714      	adds	r7, #20
 800d38a:	46bd      	mov	sp, r7
 800d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d390:	4770      	bx	lr

0800d392 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d392:	b480      	push	{r7}
 800d394:	b085      	sub	sp, #20
 800d396:	af00      	add	r7, sp, #0
 800d398:	6078      	str	r0, [r7, #4]
 800d39a:	460b      	mov	r3, r1
 800d39c:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d3a8:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d3aa:	78fb      	ldrb	r3, [r7, #3]
 800d3ac:	68ba      	ldr	r2, [r7, #8]
 800d3ae:	212c      	movs	r1, #44	; 0x2c
 800d3b0:	fb01 f303 	mul.w	r3, r1, r3
 800d3b4:	4413      	add	r3, r2
 800d3b6:	333b      	adds	r3, #59	; 0x3b
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d009      	beq.n	800d3d2 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d3be:	78fb      	ldrb	r3, [r7, #3]
 800d3c0:	68ba      	ldr	r2, [r7, #8]
 800d3c2:	212c      	movs	r1, #44	; 0x2c
 800d3c4:	fb01 f303 	mul.w	r3, r1, r3
 800d3c8:	4413      	add	r3, r2
 800d3ca:	3354      	adds	r3, #84	; 0x54
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	73fb      	strb	r3, [r7, #15]
 800d3d0:	e008      	b.n	800d3e4 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800d3d2:	78fb      	ldrb	r3, [r7, #3]
 800d3d4:	68ba      	ldr	r2, [r7, #8]
 800d3d6:	212c      	movs	r1, #44	; 0x2c
 800d3d8:	fb01 f303 	mul.w	r3, r1, r3
 800d3dc:	4413      	add	r3, r2
 800d3de:	3355      	adds	r3, #85	; 0x55
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800d3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3714      	adds	r7, #20
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr

0800d3f2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b082      	sub	sp, #8
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f7f3 ffd8 	bl	80013b0 <HAL_Delay>
}
 800d400:	bf00      	nop
 800d402:	3708      	adds	r7, #8
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d408:	b480      	push	{r7}
 800d40a:	b085      	sub	sp, #20
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	4603      	mov	r3, r0
 800d410:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d412:	2300      	movs	r3, #0
 800d414:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d416:	79fb      	ldrb	r3, [r7, #7]
 800d418:	2b03      	cmp	r3, #3
 800d41a:	d817      	bhi.n	800d44c <USBH_Get_USB_Status+0x44>
 800d41c:	a201      	add	r2, pc, #4	; (adr r2, 800d424 <USBH_Get_USB_Status+0x1c>)
 800d41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d422:	bf00      	nop
 800d424:	0800d435 	.word	0x0800d435
 800d428:	0800d43b 	.word	0x0800d43b
 800d42c:	0800d441 	.word	0x0800d441
 800d430:	0800d447 	.word	0x0800d447
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d434:	2300      	movs	r3, #0
 800d436:	73fb      	strb	r3, [r7, #15]
    break;
 800d438:	e00b      	b.n	800d452 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d43a:	2302      	movs	r3, #2
 800d43c:	73fb      	strb	r3, [r7, #15]
    break;
 800d43e:	e008      	b.n	800d452 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d440:	2301      	movs	r3, #1
 800d442:	73fb      	strb	r3, [r7, #15]
    break;
 800d444:	e005      	b.n	800d452 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d446:	2302      	movs	r3, #2
 800d448:	73fb      	strb	r3, [r7, #15]
    break;
 800d44a:	e002      	b.n	800d452 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d44c:	2302      	movs	r3, #2
 800d44e:	73fb      	strb	r3, [r7, #15]
    break;
 800d450:	bf00      	nop
  }
  return usb_status;
 800d452:	7bfb      	ldrb	r3, [r7, #15]
}
 800d454:	4618      	mov	r0, r3
 800d456:	3714      	adds	r7, #20
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr

0800d460 <__errno>:
 800d460:	4b01      	ldr	r3, [pc, #4]	; (800d468 <__errno+0x8>)
 800d462:	6818      	ldr	r0, [r3, #0]
 800d464:	4770      	bx	lr
 800d466:	bf00      	nop
 800d468:	2000002c 	.word	0x2000002c

0800d46c <__libc_init_array>:
 800d46c:	b570      	push	{r4, r5, r6, lr}
 800d46e:	4d0d      	ldr	r5, [pc, #52]	; (800d4a4 <__libc_init_array+0x38>)
 800d470:	4c0d      	ldr	r4, [pc, #52]	; (800d4a8 <__libc_init_array+0x3c>)
 800d472:	1b64      	subs	r4, r4, r5
 800d474:	10a4      	asrs	r4, r4, #2
 800d476:	2600      	movs	r6, #0
 800d478:	42a6      	cmp	r6, r4
 800d47a:	d109      	bne.n	800d490 <__libc_init_array+0x24>
 800d47c:	4d0b      	ldr	r5, [pc, #44]	; (800d4ac <__libc_init_array+0x40>)
 800d47e:	4c0c      	ldr	r4, [pc, #48]	; (800d4b0 <__libc_init_array+0x44>)
 800d480:	f000 fc9e 	bl	800ddc0 <_init>
 800d484:	1b64      	subs	r4, r4, r5
 800d486:	10a4      	asrs	r4, r4, #2
 800d488:	2600      	movs	r6, #0
 800d48a:	42a6      	cmp	r6, r4
 800d48c:	d105      	bne.n	800d49a <__libc_init_array+0x2e>
 800d48e:	bd70      	pop	{r4, r5, r6, pc}
 800d490:	f855 3b04 	ldr.w	r3, [r5], #4
 800d494:	4798      	blx	r3
 800d496:	3601      	adds	r6, #1
 800d498:	e7ee      	b.n	800d478 <__libc_init_array+0xc>
 800d49a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d49e:	4798      	blx	r3
 800d4a0:	3601      	adds	r6, #1
 800d4a2:	e7f2      	b.n	800d48a <__libc_init_array+0x1e>
 800d4a4:	0800e458 	.word	0x0800e458
 800d4a8:	0800e458 	.word	0x0800e458
 800d4ac:	0800e458 	.word	0x0800e458
 800d4b0:	0800e45c 	.word	0x0800e45c

0800d4b4 <malloc>:
 800d4b4:	4b02      	ldr	r3, [pc, #8]	; (800d4c0 <malloc+0xc>)
 800d4b6:	4601      	mov	r1, r0
 800d4b8:	6818      	ldr	r0, [r3, #0]
 800d4ba:	f000 b88d 	b.w	800d5d8 <_malloc_r>
 800d4be:	bf00      	nop
 800d4c0:	2000002c 	.word	0x2000002c

0800d4c4 <free>:
 800d4c4:	4b02      	ldr	r3, [pc, #8]	; (800d4d0 <free+0xc>)
 800d4c6:	4601      	mov	r1, r0
 800d4c8:	6818      	ldr	r0, [r3, #0]
 800d4ca:	f000 b819 	b.w	800d500 <_free_r>
 800d4ce:	bf00      	nop
 800d4d0:	2000002c 	.word	0x2000002c

0800d4d4 <memcpy>:
 800d4d4:	440a      	add	r2, r1
 800d4d6:	4291      	cmp	r1, r2
 800d4d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4dc:	d100      	bne.n	800d4e0 <memcpy+0xc>
 800d4de:	4770      	bx	lr
 800d4e0:	b510      	push	{r4, lr}
 800d4e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4ea:	4291      	cmp	r1, r2
 800d4ec:	d1f9      	bne.n	800d4e2 <memcpy+0xe>
 800d4ee:	bd10      	pop	{r4, pc}

0800d4f0 <memset>:
 800d4f0:	4402      	add	r2, r0
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d100      	bne.n	800d4fa <memset+0xa>
 800d4f8:	4770      	bx	lr
 800d4fa:	f803 1b01 	strb.w	r1, [r3], #1
 800d4fe:	e7f9      	b.n	800d4f4 <memset+0x4>

0800d500 <_free_r>:
 800d500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d502:	2900      	cmp	r1, #0
 800d504:	d044      	beq.n	800d590 <_free_r+0x90>
 800d506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d50a:	9001      	str	r0, [sp, #4]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	f1a1 0404 	sub.w	r4, r1, #4
 800d512:	bfb8      	it	lt
 800d514:	18e4      	addlt	r4, r4, r3
 800d516:	f000 f903 	bl	800d720 <__malloc_lock>
 800d51a:	4a1e      	ldr	r2, [pc, #120]	; (800d594 <_free_r+0x94>)
 800d51c:	9801      	ldr	r0, [sp, #4]
 800d51e:	6813      	ldr	r3, [r2, #0]
 800d520:	b933      	cbnz	r3, 800d530 <_free_r+0x30>
 800d522:	6063      	str	r3, [r4, #4]
 800d524:	6014      	str	r4, [r2, #0]
 800d526:	b003      	add	sp, #12
 800d528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d52c:	f000 b8fe 	b.w	800d72c <__malloc_unlock>
 800d530:	42a3      	cmp	r3, r4
 800d532:	d908      	bls.n	800d546 <_free_r+0x46>
 800d534:	6825      	ldr	r5, [r4, #0]
 800d536:	1961      	adds	r1, r4, r5
 800d538:	428b      	cmp	r3, r1
 800d53a:	bf01      	itttt	eq
 800d53c:	6819      	ldreq	r1, [r3, #0]
 800d53e:	685b      	ldreq	r3, [r3, #4]
 800d540:	1949      	addeq	r1, r1, r5
 800d542:	6021      	streq	r1, [r4, #0]
 800d544:	e7ed      	b.n	800d522 <_free_r+0x22>
 800d546:	461a      	mov	r2, r3
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	b10b      	cbz	r3, 800d550 <_free_r+0x50>
 800d54c:	42a3      	cmp	r3, r4
 800d54e:	d9fa      	bls.n	800d546 <_free_r+0x46>
 800d550:	6811      	ldr	r1, [r2, #0]
 800d552:	1855      	adds	r5, r2, r1
 800d554:	42a5      	cmp	r5, r4
 800d556:	d10b      	bne.n	800d570 <_free_r+0x70>
 800d558:	6824      	ldr	r4, [r4, #0]
 800d55a:	4421      	add	r1, r4
 800d55c:	1854      	adds	r4, r2, r1
 800d55e:	42a3      	cmp	r3, r4
 800d560:	6011      	str	r1, [r2, #0]
 800d562:	d1e0      	bne.n	800d526 <_free_r+0x26>
 800d564:	681c      	ldr	r4, [r3, #0]
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	6053      	str	r3, [r2, #4]
 800d56a:	4421      	add	r1, r4
 800d56c:	6011      	str	r1, [r2, #0]
 800d56e:	e7da      	b.n	800d526 <_free_r+0x26>
 800d570:	d902      	bls.n	800d578 <_free_r+0x78>
 800d572:	230c      	movs	r3, #12
 800d574:	6003      	str	r3, [r0, #0]
 800d576:	e7d6      	b.n	800d526 <_free_r+0x26>
 800d578:	6825      	ldr	r5, [r4, #0]
 800d57a:	1961      	adds	r1, r4, r5
 800d57c:	428b      	cmp	r3, r1
 800d57e:	bf04      	itt	eq
 800d580:	6819      	ldreq	r1, [r3, #0]
 800d582:	685b      	ldreq	r3, [r3, #4]
 800d584:	6063      	str	r3, [r4, #4]
 800d586:	bf04      	itt	eq
 800d588:	1949      	addeq	r1, r1, r5
 800d58a:	6021      	streq	r1, [r4, #0]
 800d58c:	6054      	str	r4, [r2, #4]
 800d58e:	e7ca      	b.n	800d526 <_free_r+0x26>
 800d590:	b003      	add	sp, #12
 800d592:	bd30      	pop	{r4, r5, pc}
 800d594:	20003d68 	.word	0x20003d68

0800d598 <sbrk_aligned>:
 800d598:	b570      	push	{r4, r5, r6, lr}
 800d59a:	4e0e      	ldr	r6, [pc, #56]	; (800d5d4 <sbrk_aligned+0x3c>)
 800d59c:	460c      	mov	r4, r1
 800d59e:	6831      	ldr	r1, [r6, #0]
 800d5a0:	4605      	mov	r5, r0
 800d5a2:	b911      	cbnz	r1, 800d5aa <sbrk_aligned+0x12>
 800d5a4:	f000 f88c 	bl	800d6c0 <_sbrk_r>
 800d5a8:	6030      	str	r0, [r6, #0]
 800d5aa:	4621      	mov	r1, r4
 800d5ac:	4628      	mov	r0, r5
 800d5ae:	f000 f887 	bl	800d6c0 <_sbrk_r>
 800d5b2:	1c43      	adds	r3, r0, #1
 800d5b4:	d00a      	beq.n	800d5cc <sbrk_aligned+0x34>
 800d5b6:	1cc4      	adds	r4, r0, #3
 800d5b8:	f024 0403 	bic.w	r4, r4, #3
 800d5bc:	42a0      	cmp	r0, r4
 800d5be:	d007      	beq.n	800d5d0 <sbrk_aligned+0x38>
 800d5c0:	1a21      	subs	r1, r4, r0
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	f000 f87c 	bl	800d6c0 <_sbrk_r>
 800d5c8:	3001      	adds	r0, #1
 800d5ca:	d101      	bne.n	800d5d0 <sbrk_aligned+0x38>
 800d5cc:	f04f 34ff 	mov.w	r4, #4294967295
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	bd70      	pop	{r4, r5, r6, pc}
 800d5d4:	20003d6c 	.word	0x20003d6c

0800d5d8 <_malloc_r>:
 800d5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5dc:	1ccd      	adds	r5, r1, #3
 800d5de:	f025 0503 	bic.w	r5, r5, #3
 800d5e2:	3508      	adds	r5, #8
 800d5e4:	2d0c      	cmp	r5, #12
 800d5e6:	bf38      	it	cc
 800d5e8:	250c      	movcc	r5, #12
 800d5ea:	2d00      	cmp	r5, #0
 800d5ec:	4607      	mov	r7, r0
 800d5ee:	db01      	blt.n	800d5f4 <_malloc_r+0x1c>
 800d5f0:	42a9      	cmp	r1, r5
 800d5f2:	d905      	bls.n	800d600 <_malloc_r+0x28>
 800d5f4:	230c      	movs	r3, #12
 800d5f6:	603b      	str	r3, [r7, #0]
 800d5f8:	2600      	movs	r6, #0
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d600:	4e2e      	ldr	r6, [pc, #184]	; (800d6bc <_malloc_r+0xe4>)
 800d602:	f000 f88d 	bl	800d720 <__malloc_lock>
 800d606:	6833      	ldr	r3, [r6, #0]
 800d608:	461c      	mov	r4, r3
 800d60a:	bb34      	cbnz	r4, 800d65a <_malloc_r+0x82>
 800d60c:	4629      	mov	r1, r5
 800d60e:	4638      	mov	r0, r7
 800d610:	f7ff ffc2 	bl	800d598 <sbrk_aligned>
 800d614:	1c43      	adds	r3, r0, #1
 800d616:	4604      	mov	r4, r0
 800d618:	d14d      	bne.n	800d6b6 <_malloc_r+0xde>
 800d61a:	6834      	ldr	r4, [r6, #0]
 800d61c:	4626      	mov	r6, r4
 800d61e:	2e00      	cmp	r6, #0
 800d620:	d140      	bne.n	800d6a4 <_malloc_r+0xcc>
 800d622:	6823      	ldr	r3, [r4, #0]
 800d624:	4631      	mov	r1, r6
 800d626:	4638      	mov	r0, r7
 800d628:	eb04 0803 	add.w	r8, r4, r3
 800d62c:	f000 f848 	bl	800d6c0 <_sbrk_r>
 800d630:	4580      	cmp	r8, r0
 800d632:	d13a      	bne.n	800d6aa <_malloc_r+0xd2>
 800d634:	6821      	ldr	r1, [r4, #0]
 800d636:	3503      	adds	r5, #3
 800d638:	1a6d      	subs	r5, r5, r1
 800d63a:	f025 0503 	bic.w	r5, r5, #3
 800d63e:	3508      	adds	r5, #8
 800d640:	2d0c      	cmp	r5, #12
 800d642:	bf38      	it	cc
 800d644:	250c      	movcc	r5, #12
 800d646:	4629      	mov	r1, r5
 800d648:	4638      	mov	r0, r7
 800d64a:	f7ff ffa5 	bl	800d598 <sbrk_aligned>
 800d64e:	3001      	adds	r0, #1
 800d650:	d02b      	beq.n	800d6aa <_malloc_r+0xd2>
 800d652:	6823      	ldr	r3, [r4, #0]
 800d654:	442b      	add	r3, r5
 800d656:	6023      	str	r3, [r4, #0]
 800d658:	e00e      	b.n	800d678 <_malloc_r+0xa0>
 800d65a:	6822      	ldr	r2, [r4, #0]
 800d65c:	1b52      	subs	r2, r2, r5
 800d65e:	d41e      	bmi.n	800d69e <_malloc_r+0xc6>
 800d660:	2a0b      	cmp	r2, #11
 800d662:	d916      	bls.n	800d692 <_malloc_r+0xba>
 800d664:	1961      	adds	r1, r4, r5
 800d666:	42a3      	cmp	r3, r4
 800d668:	6025      	str	r5, [r4, #0]
 800d66a:	bf18      	it	ne
 800d66c:	6059      	strne	r1, [r3, #4]
 800d66e:	6863      	ldr	r3, [r4, #4]
 800d670:	bf08      	it	eq
 800d672:	6031      	streq	r1, [r6, #0]
 800d674:	5162      	str	r2, [r4, r5]
 800d676:	604b      	str	r3, [r1, #4]
 800d678:	4638      	mov	r0, r7
 800d67a:	f104 060b 	add.w	r6, r4, #11
 800d67e:	f000 f855 	bl	800d72c <__malloc_unlock>
 800d682:	f026 0607 	bic.w	r6, r6, #7
 800d686:	1d23      	adds	r3, r4, #4
 800d688:	1af2      	subs	r2, r6, r3
 800d68a:	d0b6      	beq.n	800d5fa <_malloc_r+0x22>
 800d68c:	1b9b      	subs	r3, r3, r6
 800d68e:	50a3      	str	r3, [r4, r2]
 800d690:	e7b3      	b.n	800d5fa <_malloc_r+0x22>
 800d692:	6862      	ldr	r2, [r4, #4]
 800d694:	42a3      	cmp	r3, r4
 800d696:	bf0c      	ite	eq
 800d698:	6032      	streq	r2, [r6, #0]
 800d69a:	605a      	strne	r2, [r3, #4]
 800d69c:	e7ec      	b.n	800d678 <_malloc_r+0xa0>
 800d69e:	4623      	mov	r3, r4
 800d6a0:	6864      	ldr	r4, [r4, #4]
 800d6a2:	e7b2      	b.n	800d60a <_malloc_r+0x32>
 800d6a4:	4634      	mov	r4, r6
 800d6a6:	6876      	ldr	r6, [r6, #4]
 800d6a8:	e7b9      	b.n	800d61e <_malloc_r+0x46>
 800d6aa:	230c      	movs	r3, #12
 800d6ac:	603b      	str	r3, [r7, #0]
 800d6ae:	4638      	mov	r0, r7
 800d6b0:	f000 f83c 	bl	800d72c <__malloc_unlock>
 800d6b4:	e7a1      	b.n	800d5fa <_malloc_r+0x22>
 800d6b6:	6025      	str	r5, [r4, #0]
 800d6b8:	e7de      	b.n	800d678 <_malloc_r+0xa0>
 800d6ba:	bf00      	nop
 800d6bc:	20003d68 	.word	0x20003d68

0800d6c0 <_sbrk_r>:
 800d6c0:	b538      	push	{r3, r4, r5, lr}
 800d6c2:	4d06      	ldr	r5, [pc, #24]	; (800d6dc <_sbrk_r+0x1c>)
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	4608      	mov	r0, r1
 800d6ca:	602b      	str	r3, [r5, #0]
 800d6cc:	f7f3 fb90 	bl	8000df0 <_sbrk>
 800d6d0:	1c43      	adds	r3, r0, #1
 800d6d2:	d102      	bne.n	800d6da <_sbrk_r+0x1a>
 800d6d4:	682b      	ldr	r3, [r5, #0]
 800d6d6:	b103      	cbz	r3, 800d6da <_sbrk_r+0x1a>
 800d6d8:	6023      	str	r3, [r4, #0]
 800d6da:	bd38      	pop	{r3, r4, r5, pc}
 800d6dc:	20003d70 	.word	0x20003d70

0800d6e0 <siprintf>:
 800d6e0:	b40e      	push	{r1, r2, r3}
 800d6e2:	b500      	push	{lr}
 800d6e4:	b09c      	sub	sp, #112	; 0x70
 800d6e6:	ab1d      	add	r3, sp, #116	; 0x74
 800d6e8:	9002      	str	r0, [sp, #8]
 800d6ea:	9006      	str	r0, [sp, #24]
 800d6ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d6f0:	4809      	ldr	r0, [pc, #36]	; (800d718 <siprintf+0x38>)
 800d6f2:	9107      	str	r1, [sp, #28]
 800d6f4:	9104      	str	r1, [sp, #16]
 800d6f6:	4909      	ldr	r1, [pc, #36]	; (800d71c <siprintf+0x3c>)
 800d6f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6fc:	9105      	str	r1, [sp, #20]
 800d6fe:	6800      	ldr	r0, [r0, #0]
 800d700:	9301      	str	r3, [sp, #4]
 800d702:	a902      	add	r1, sp, #8
 800d704:	f000 f874 	bl	800d7f0 <_svfiprintf_r>
 800d708:	9b02      	ldr	r3, [sp, #8]
 800d70a:	2200      	movs	r2, #0
 800d70c:	701a      	strb	r2, [r3, #0]
 800d70e:	b01c      	add	sp, #112	; 0x70
 800d710:	f85d eb04 	ldr.w	lr, [sp], #4
 800d714:	b003      	add	sp, #12
 800d716:	4770      	bx	lr
 800d718:	2000002c 	.word	0x2000002c
 800d71c:	ffff0208 	.word	0xffff0208

0800d720 <__malloc_lock>:
 800d720:	4801      	ldr	r0, [pc, #4]	; (800d728 <__malloc_lock+0x8>)
 800d722:	f000 baf9 	b.w	800dd18 <__retarget_lock_acquire_recursive>
 800d726:	bf00      	nop
 800d728:	20003d74 	.word	0x20003d74

0800d72c <__malloc_unlock>:
 800d72c:	4801      	ldr	r0, [pc, #4]	; (800d734 <__malloc_unlock+0x8>)
 800d72e:	f000 baf4 	b.w	800dd1a <__retarget_lock_release_recursive>
 800d732:	bf00      	nop
 800d734:	20003d74 	.word	0x20003d74

0800d738 <__ssputs_r>:
 800d738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d73c:	688e      	ldr	r6, [r1, #8]
 800d73e:	429e      	cmp	r6, r3
 800d740:	4682      	mov	sl, r0
 800d742:	460c      	mov	r4, r1
 800d744:	4690      	mov	r8, r2
 800d746:	461f      	mov	r7, r3
 800d748:	d838      	bhi.n	800d7bc <__ssputs_r+0x84>
 800d74a:	898a      	ldrh	r2, [r1, #12]
 800d74c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d750:	d032      	beq.n	800d7b8 <__ssputs_r+0x80>
 800d752:	6825      	ldr	r5, [r4, #0]
 800d754:	6909      	ldr	r1, [r1, #16]
 800d756:	eba5 0901 	sub.w	r9, r5, r1
 800d75a:	6965      	ldr	r5, [r4, #20]
 800d75c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d760:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d764:	3301      	adds	r3, #1
 800d766:	444b      	add	r3, r9
 800d768:	106d      	asrs	r5, r5, #1
 800d76a:	429d      	cmp	r5, r3
 800d76c:	bf38      	it	cc
 800d76e:	461d      	movcc	r5, r3
 800d770:	0553      	lsls	r3, r2, #21
 800d772:	d531      	bpl.n	800d7d8 <__ssputs_r+0xa0>
 800d774:	4629      	mov	r1, r5
 800d776:	f7ff ff2f 	bl	800d5d8 <_malloc_r>
 800d77a:	4606      	mov	r6, r0
 800d77c:	b950      	cbnz	r0, 800d794 <__ssputs_r+0x5c>
 800d77e:	230c      	movs	r3, #12
 800d780:	f8ca 3000 	str.w	r3, [sl]
 800d784:	89a3      	ldrh	r3, [r4, #12]
 800d786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d78a:	81a3      	strh	r3, [r4, #12]
 800d78c:	f04f 30ff 	mov.w	r0, #4294967295
 800d790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d794:	6921      	ldr	r1, [r4, #16]
 800d796:	464a      	mov	r2, r9
 800d798:	f7ff fe9c 	bl	800d4d4 <memcpy>
 800d79c:	89a3      	ldrh	r3, [r4, #12]
 800d79e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d7a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7a6:	81a3      	strh	r3, [r4, #12]
 800d7a8:	6126      	str	r6, [r4, #16]
 800d7aa:	6165      	str	r5, [r4, #20]
 800d7ac:	444e      	add	r6, r9
 800d7ae:	eba5 0509 	sub.w	r5, r5, r9
 800d7b2:	6026      	str	r6, [r4, #0]
 800d7b4:	60a5      	str	r5, [r4, #8]
 800d7b6:	463e      	mov	r6, r7
 800d7b8:	42be      	cmp	r6, r7
 800d7ba:	d900      	bls.n	800d7be <__ssputs_r+0x86>
 800d7bc:	463e      	mov	r6, r7
 800d7be:	6820      	ldr	r0, [r4, #0]
 800d7c0:	4632      	mov	r2, r6
 800d7c2:	4641      	mov	r1, r8
 800d7c4:	f000 faaa 	bl	800dd1c <memmove>
 800d7c8:	68a3      	ldr	r3, [r4, #8]
 800d7ca:	1b9b      	subs	r3, r3, r6
 800d7cc:	60a3      	str	r3, [r4, #8]
 800d7ce:	6823      	ldr	r3, [r4, #0]
 800d7d0:	4433      	add	r3, r6
 800d7d2:	6023      	str	r3, [r4, #0]
 800d7d4:	2000      	movs	r0, #0
 800d7d6:	e7db      	b.n	800d790 <__ssputs_r+0x58>
 800d7d8:	462a      	mov	r2, r5
 800d7da:	f000 fab9 	bl	800dd50 <_realloc_r>
 800d7de:	4606      	mov	r6, r0
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	d1e1      	bne.n	800d7a8 <__ssputs_r+0x70>
 800d7e4:	6921      	ldr	r1, [r4, #16]
 800d7e6:	4650      	mov	r0, sl
 800d7e8:	f7ff fe8a 	bl	800d500 <_free_r>
 800d7ec:	e7c7      	b.n	800d77e <__ssputs_r+0x46>
	...

0800d7f0 <_svfiprintf_r>:
 800d7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f4:	4698      	mov	r8, r3
 800d7f6:	898b      	ldrh	r3, [r1, #12]
 800d7f8:	061b      	lsls	r3, r3, #24
 800d7fa:	b09d      	sub	sp, #116	; 0x74
 800d7fc:	4607      	mov	r7, r0
 800d7fe:	460d      	mov	r5, r1
 800d800:	4614      	mov	r4, r2
 800d802:	d50e      	bpl.n	800d822 <_svfiprintf_r+0x32>
 800d804:	690b      	ldr	r3, [r1, #16]
 800d806:	b963      	cbnz	r3, 800d822 <_svfiprintf_r+0x32>
 800d808:	2140      	movs	r1, #64	; 0x40
 800d80a:	f7ff fee5 	bl	800d5d8 <_malloc_r>
 800d80e:	6028      	str	r0, [r5, #0]
 800d810:	6128      	str	r0, [r5, #16]
 800d812:	b920      	cbnz	r0, 800d81e <_svfiprintf_r+0x2e>
 800d814:	230c      	movs	r3, #12
 800d816:	603b      	str	r3, [r7, #0]
 800d818:	f04f 30ff 	mov.w	r0, #4294967295
 800d81c:	e0d1      	b.n	800d9c2 <_svfiprintf_r+0x1d2>
 800d81e:	2340      	movs	r3, #64	; 0x40
 800d820:	616b      	str	r3, [r5, #20]
 800d822:	2300      	movs	r3, #0
 800d824:	9309      	str	r3, [sp, #36]	; 0x24
 800d826:	2320      	movs	r3, #32
 800d828:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d82c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d830:	2330      	movs	r3, #48	; 0x30
 800d832:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d9dc <_svfiprintf_r+0x1ec>
 800d836:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d83a:	f04f 0901 	mov.w	r9, #1
 800d83e:	4623      	mov	r3, r4
 800d840:	469a      	mov	sl, r3
 800d842:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d846:	b10a      	cbz	r2, 800d84c <_svfiprintf_r+0x5c>
 800d848:	2a25      	cmp	r2, #37	; 0x25
 800d84a:	d1f9      	bne.n	800d840 <_svfiprintf_r+0x50>
 800d84c:	ebba 0b04 	subs.w	fp, sl, r4
 800d850:	d00b      	beq.n	800d86a <_svfiprintf_r+0x7a>
 800d852:	465b      	mov	r3, fp
 800d854:	4622      	mov	r2, r4
 800d856:	4629      	mov	r1, r5
 800d858:	4638      	mov	r0, r7
 800d85a:	f7ff ff6d 	bl	800d738 <__ssputs_r>
 800d85e:	3001      	adds	r0, #1
 800d860:	f000 80aa 	beq.w	800d9b8 <_svfiprintf_r+0x1c8>
 800d864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d866:	445a      	add	r2, fp
 800d868:	9209      	str	r2, [sp, #36]	; 0x24
 800d86a:	f89a 3000 	ldrb.w	r3, [sl]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	f000 80a2 	beq.w	800d9b8 <_svfiprintf_r+0x1c8>
 800d874:	2300      	movs	r3, #0
 800d876:	f04f 32ff 	mov.w	r2, #4294967295
 800d87a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d87e:	f10a 0a01 	add.w	sl, sl, #1
 800d882:	9304      	str	r3, [sp, #16]
 800d884:	9307      	str	r3, [sp, #28]
 800d886:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d88a:	931a      	str	r3, [sp, #104]	; 0x68
 800d88c:	4654      	mov	r4, sl
 800d88e:	2205      	movs	r2, #5
 800d890:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d894:	4851      	ldr	r0, [pc, #324]	; (800d9dc <_svfiprintf_r+0x1ec>)
 800d896:	f7f2 fca3 	bl	80001e0 <memchr>
 800d89a:	9a04      	ldr	r2, [sp, #16]
 800d89c:	b9d8      	cbnz	r0, 800d8d6 <_svfiprintf_r+0xe6>
 800d89e:	06d0      	lsls	r0, r2, #27
 800d8a0:	bf44      	itt	mi
 800d8a2:	2320      	movmi	r3, #32
 800d8a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8a8:	0711      	lsls	r1, r2, #28
 800d8aa:	bf44      	itt	mi
 800d8ac:	232b      	movmi	r3, #43	; 0x2b
 800d8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d8b6:	2b2a      	cmp	r3, #42	; 0x2a
 800d8b8:	d015      	beq.n	800d8e6 <_svfiprintf_r+0xf6>
 800d8ba:	9a07      	ldr	r2, [sp, #28]
 800d8bc:	4654      	mov	r4, sl
 800d8be:	2000      	movs	r0, #0
 800d8c0:	f04f 0c0a 	mov.w	ip, #10
 800d8c4:	4621      	mov	r1, r4
 800d8c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8ca:	3b30      	subs	r3, #48	; 0x30
 800d8cc:	2b09      	cmp	r3, #9
 800d8ce:	d94e      	bls.n	800d96e <_svfiprintf_r+0x17e>
 800d8d0:	b1b0      	cbz	r0, 800d900 <_svfiprintf_r+0x110>
 800d8d2:	9207      	str	r2, [sp, #28]
 800d8d4:	e014      	b.n	800d900 <_svfiprintf_r+0x110>
 800d8d6:	eba0 0308 	sub.w	r3, r0, r8
 800d8da:	fa09 f303 	lsl.w	r3, r9, r3
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	9304      	str	r3, [sp, #16]
 800d8e2:	46a2      	mov	sl, r4
 800d8e4:	e7d2      	b.n	800d88c <_svfiprintf_r+0x9c>
 800d8e6:	9b03      	ldr	r3, [sp, #12]
 800d8e8:	1d19      	adds	r1, r3, #4
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	9103      	str	r1, [sp, #12]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	bfbb      	ittet	lt
 800d8f2:	425b      	neglt	r3, r3
 800d8f4:	f042 0202 	orrlt.w	r2, r2, #2
 800d8f8:	9307      	strge	r3, [sp, #28]
 800d8fa:	9307      	strlt	r3, [sp, #28]
 800d8fc:	bfb8      	it	lt
 800d8fe:	9204      	strlt	r2, [sp, #16]
 800d900:	7823      	ldrb	r3, [r4, #0]
 800d902:	2b2e      	cmp	r3, #46	; 0x2e
 800d904:	d10c      	bne.n	800d920 <_svfiprintf_r+0x130>
 800d906:	7863      	ldrb	r3, [r4, #1]
 800d908:	2b2a      	cmp	r3, #42	; 0x2a
 800d90a:	d135      	bne.n	800d978 <_svfiprintf_r+0x188>
 800d90c:	9b03      	ldr	r3, [sp, #12]
 800d90e:	1d1a      	adds	r2, r3, #4
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	9203      	str	r2, [sp, #12]
 800d914:	2b00      	cmp	r3, #0
 800d916:	bfb8      	it	lt
 800d918:	f04f 33ff 	movlt.w	r3, #4294967295
 800d91c:	3402      	adds	r4, #2
 800d91e:	9305      	str	r3, [sp, #20]
 800d920:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d9ec <_svfiprintf_r+0x1fc>
 800d924:	7821      	ldrb	r1, [r4, #0]
 800d926:	2203      	movs	r2, #3
 800d928:	4650      	mov	r0, sl
 800d92a:	f7f2 fc59 	bl	80001e0 <memchr>
 800d92e:	b140      	cbz	r0, 800d942 <_svfiprintf_r+0x152>
 800d930:	2340      	movs	r3, #64	; 0x40
 800d932:	eba0 000a 	sub.w	r0, r0, sl
 800d936:	fa03 f000 	lsl.w	r0, r3, r0
 800d93a:	9b04      	ldr	r3, [sp, #16]
 800d93c:	4303      	orrs	r3, r0
 800d93e:	3401      	adds	r4, #1
 800d940:	9304      	str	r3, [sp, #16]
 800d942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d946:	4826      	ldr	r0, [pc, #152]	; (800d9e0 <_svfiprintf_r+0x1f0>)
 800d948:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d94c:	2206      	movs	r2, #6
 800d94e:	f7f2 fc47 	bl	80001e0 <memchr>
 800d952:	2800      	cmp	r0, #0
 800d954:	d038      	beq.n	800d9c8 <_svfiprintf_r+0x1d8>
 800d956:	4b23      	ldr	r3, [pc, #140]	; (800d9e4 <_svfiprintf_r+0x1f4>)
 800d958:	bb1b      	cbnz	r3, 800d9a2 <_svfiprintf_r+0x1b2>
 800d95a:	9b03      	ldr	r3, [sp, #12]
 800d95c:	3307      	adds	r3, #7
 800d95e:	f023 0307 	bic.w	r3, r3, #7
 800d962:	3308      	adds	r3, #8
 800d964:	9303      	str	r3, [sp, #12]
 800d966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d968:	4433      	add	r3, r6
 800d96a:	9309      	str	r3, [sp, #36]	; 0x24
 800d96c:	e767      	b.n	800d83e <_svfiprintf_r+0x4e>
 800d96e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d972:	460c      	mov	r4, r1
 800d974:	2001      	movs	r0, #1
 800d976:	e7a5      	b.n	800d8c4 <_svfiprintf_r+0xd4>
 800d978:	2300      	movs	r3, #0
 800d97a:	3401      	adds	r4, #1
 800d97c:	9305      	str	r3, [sp, #20]
 800d97e:	4619      	mov	r1, r3
 800d980:	f04f 0c0a 	mov.w	ip, #10
 800d984:	4620      	mov	r0, r4
 800d986:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d98a:	3a30      	subs	r2, #48	; 0x30
 800d98c:	2a09      	cmp	r2, #9
 800d98e:	d903      	bls.n	800d998 <_svfiprintf_r+0x1a8>
 800d990:	2b00      	cmp	r3, #0
 800d992:	d0c5      	beq.n	800d920 <_svfiprintf_r+0x130>
 800d994:	9105      	str	r1, [sp, #20]
 800d996:	e7c3      	b.n	800d920 <_svfiprintf_r+0x130>
 800d998:	fb0c 2101 	mla	r1, ip, r1, r2
 800d99c:	4604      	mov	r4, r0
 800d99e:	2301      	movs	r3, #1
 800d9a0:	e7f0      	b.n	800d984 <_svfiprintf_r+0x194>
 800d9a2:	ab03      	add	r3, sp, #12
 800d9a4:	9300      	str	r3, [sp, #0]
 800d9a6:	462a      	mov	r2, r5
 800d9a8:	4b0f      	ldr	r3, [pc, #60]	; (800d9e8 <_svfiprintf_r+0x1f8>)
 800d9aa:	a904      	add	r1, sp, #16
 800d9ac:	4638      	mov	r0, r7
 800d9ae:	f3af 8000 	nop.w
 800d9b2:	1c42      	adds	r2, r0, #1
 800d9b4:	4606      	mov	r6, r0
 800d9b6:	d1d6      	bne.n	800d966 <_svfiprintf_r+0x176>
 800d9b8:	89ab      	ldrh	r3, [r5, #12]
 800d9ba:	065b      	lsls	r3, r3, #25
 800d9bc:	f53f af2c 	bmi.w	800d818 <_svfiprintf_r+0x28>
 800d9c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9c2:	b01d      	add	sp, #116	; 0x74
 800d9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9c8:	ab03      	add	r3, sp, #12
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	462a      	mov	r2, r5
 800d9ce:	4b06      	ldr	r3, [pc, #24]	; (800d9e8 <_svfiprintf_r+0x1f8>)
 800d9d0:	a904      	add	r1, sp, #16
 800d9d2:	4638      	mov	r0, r7
 800d9d4:	f000 f87a 	bl	800dacc <_printf_i>
 800d9d8:	e7eb      	b.n	800d9b2 <_svfiprintf_r+0x1c2>
 800d9da:	bf00      	nop
 800d9dc:	0800e41c 	.word	0x0800e41c
 800d9e0:	0800e426 	.word	0x0800e426
 800d9e4:	00000000 	.word	0x00000000
 800d9e8:	0800d739 	.word	0x0800d739
 800d9ec:	0800e422 	.word	0x0800e422

0800d9f0 <_printf_common>:
 800d9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9f4:	4616      	mov	r6, r2
 800d9f6:	4699      	mov	r9, r3
 800d9f8:	688a      	ldr	r2, [r1, #8]
 800d9fa:	690b      	ldr	r3, [r1, #16]
 800d9fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da00:	4293      	cmp	r3, r2
 800da02:	bfb8      	it	lt
 800da04:	4613      	movlt	r3, r2
 800da06:	6033      	str	r3, [r6, #0]
 800da08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da0c:	4607      	mov	r7, r0
 800da0e:	460c      	mov	r4, r1
 800da10:	b10a      	cbz	r2, 800da16 <_printf_common+0x26>
 800da12:	3301      	adds	r3, #1
 800da14:	6033      	str	r3, [r6, #0]
 800da16:	6823      	ldr	r3, [r4, #0]
 800da18:	0699      	lsls	r1, r3, #26
 800da1a:	bf42      	ittt	mi
 800da1c:	6833      	ldrmi	r3, [r6, #0]
 800da1e:	3302      	addmi	r3, #2
 800da20:	6033      	strmi	r3, [r6, #0]
 800da22:	6825      	ldr	r5, [r4, #0]
 800da24:	f015 0506 	ands.w	r5, r5, #6
 800da28:	d106      	bne.n	800da38 <_printf_common+0x48>
 800da2a:	f104 0a19 	add.w	sl, r4, #25
 800da2e:	68e3      	ldr	r3, [r4, #12]
 800da30:	6832      	ldr	r2, [r6, #0]
 800da32:	1a9b      	subs	r3, r3, r2
 800da34:	42ab      	cmp	r3, r5
 800da36:	dc26      	bgt.n	800da86 <_printf_common+0x96>
 800da38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da3c:	1e13      	subs	r3, r2, #0
 800da3e:	6822      	ldr	r2, [r4, #0]
 800da40:	bf18      	it	ne
 800da42:	2301      	movne	r3, #1
 800da44:	0692      	lsls	r2, r2, #26
 800da46:	d42b      	bmi.n	800daa0 <_printf_common+0xb0>
 800da48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da4c:	4649      	mov	r1, r9
 800da4e:	4638      	mov	r0, r7
 800da50:	47c0      	blx	r8
 800da52:	3001      	adds	r0, #1
 800da54:	d01e      	beq.n	800da94 <_printf_common+0xa4>
 800da56:	6823      	ldr	r3, [r4, #0]
 800da58:	68e5      	ldr	r5, [r4, #12]
 800da5a:	6832      	ldr	r2, [r6, #0]
 800da5c:	f003 0306 	and.w	r3, r3, #6
 800da60:	2b04      	cmp	r3, #4
 800da62:	bf08      	it	eq
 800da64:	1aad      	subeq	r5, r5, r2
 800da66:	68a3      	ldr	r3, [r4, #8]
 800da68:	6922      	ldr	r2, [r4, #16]
 800da6a:	bf0c      	ite	eq
 800da6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da70:	2500      	movne	r5, #0
 800da72:	4293      	cmp	r3, r2
 800da74:	bfc4      	itt	gt
 800da76:	1a9b      	subgt	r3, r3, r2
 800da78:	18ed      	addgt	r5, r5, r3
 800da7a:	2600      	movs	r6, #0
 800da7c:	341a      	adds	r4, #26
 800da7e:	42b5      	cmp	r5, r6
 800da80:	d11a      	bne.n	800dab8 <_printf_common+0xc8>
 800da82:	2000      	movs	r0, #0
 800da84:	e008      	b.n	800da98 <_printf_common+0xa8>
 800da86:	2301      	movs	r3, #1
 800da88:	4652      	mov	r2, sl
 800da8a:	4649      	mov	r1, r9
 800da8c:	4638      	mov	r0, r7
 800da8e:	47c0      	blx	r8
 800da90:	3001      	adds	r0, #1
 800da92:	d103      	bne.n	800da9c <_printf_common+0xac>
 800da94:	f04f 30ff 	mov.w	r0, #4294967295
 800da98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da9c:	3501      	adds	r5, #1
 800da9e:	e7c6      	b.n	800da2e <_printf_common+0x3e>
 800daa0:	18e1      	adds	r1, r4, r3
 800daa2:	1c5a      	adds	r2, r3, #1
 800daa4:	2030      	movs	r0, #48	; 0x30
 800daa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800daaa:	4422      	add	r2, r4
 800daac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dab0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dab4:	3302      	adds	r3, #2
 800dab6:	e7c7      	b.n	800da48 <_printf_common+0x58>
 800dab8:	2301      	movs	r3, #1
 800daba:	4622      	mov	r2, r4
 800dabc:	4649      	mov	r1, r9
 800dabe:	4638      	mov	r0, r7
 800dac0:	47c0      	blx	r8
 800dac2:	3001      	adds	r0, #1
 800dac4:	d0e6      	beq.n	800da94 <_printf_common+0xa4>
 800dac6:	3601      	adds	r6, #1
 800dac8:	e7d9      	b.n	800da7e <_printf_common+0x8e>
	...

0800dacc <_printf_i>:
 800dacc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dad0:	7e0f      	ldrb	r7, [r1, #24]
 800dad2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dad4:	2f78      	cmp	r7, #120	; 0x78
 800dad6:	4691      	mov	r9, r2
 800dad8:	4680      	mov	r8, r0
 800dada:	460c      	mov	r4, r1
 800dadc:	469a      	mov	sl, r3
 800dade:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dae2:	d807      	bhi.n	800daf4 <_printf_i+0x28>
 800dae4:	2f62      	cmp	r7, #98	; 0x62
 800dae6:	d80a      	bhi.n	800dafe <_printf_i+0x32>
 800dae8:	2f00      	cmp	r7, #0
 800daea:	f000 80d8 	beq.w	800dc9e <_printf_i+0x1d2>
 800daee:	2f58      	cmp	r7, #88	; 0x58
 800daf0:	f000 80a3 	beq.w	800dc3a <_printf_i+0x16e>
 800daf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800daf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dafc:	e03a      	b.n	800db74 <_printf_i+0xa8>
 800dafe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db02:	2b15      	cmp	r3, #21
 800db04:	d8f6      	bhi.n	800daf4 <_printf_i+0x28>
 800db06:	a101      	add	r1, pc, #4	; (adr r1, 800db0c <_printf_i+0x40>)
 800db08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db0c:	0800db65 	.word	0x0800db65
 800db10:	0800db79 	.word	0x0800db79
 800db14:	0800daf5 	.word	0x0800daf5
 800db18:	0800daf5 	.word	0x0800daf5
 800db1c:	0800daf5 	.word	0x0800daf5
 800db20:	0800daf5 	.word	0x0800daf5
 800db24:	0800db79 	.word	0x0800db79
 800db28:	0800daf5 	.word	0x0800daf5
 800db2c:	0800daf5 	.word	0x0800daf5
 800db30:	0800daf5 	.word	0x0800daf5
 800db34:	0800daf5 	.word	0x0800daf5
 800db38:	0800dc85 	.word	0x0800dc85
 800db3c:	0800dba9 	.word	0x0800dba9
 800db40:	0800dc67 	.word	0x0800dc67
 800db44:	0800daf5 	.word	0x0800daf5
 800db48:	0800daf5 	.word	0x0800daf5
 800db4c:	0800dca7 	.word	0x0800dca7
 800db50:	0800daf5 	.word	0x0800daf5
 800db54:	0800dba9 	.word	0x0800dba9
 800db58:	0800daf5 	.word	0x0800daf5
 800db5c:	0800daf5 	.word	0x0800daf5
 800db60:	0800dc6f 	.word	0x0800dc6f
 800db64:	682b      	ldr	r3, [r5, #0]
 800db66:	1d1a      	adds	r2, r3, #4
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	602a      	str	r2, [r5, #0]
 800db6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db74:	2301      	movs	r3, #1
 800db76:	e0a3      	b.n	800dcc0 <_printf_i+0x1f4>
 800db78:	6820      	ldr	r0, [r4, #0]
 800db7a:	6829      	ldr	r1, [r5, #0]
 800db7c:	0606      	lsls	r6, r0, #24
 800db7e:	f101 0304 	add.w	r3, r1, #4
 800db82:	d50a      	bpl.n	800db9a <_printf_i+0xce>
 800db84:	680e      	ldr	r6, [r1, #0]
 800db86:	602b      	str	r3, [r5, #0]
 800db88:	2e00      	cmp	r6, #0
 800db8a:	da03      	bge.n	800db94 <_printf_i+0xc8>
 800db8c:	232d      	movs	r3, #45	; 0x2d
 800db8e:	4276      	negs	r6, r6
 800db90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db94:	485e      	ldr	r0, [pc, #376]	; (800dd10 <_printf_i+0x244>)
 800db96:	230a      	movs	r3, #10
 800db98:	e019      	b.n	800dbce <_printf_i+0x102>
 800db9a:	680e      	ldr	r6, [r1, #0]
 800db9c:	602b      	str	r3, [r5, #0]
 800db9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dba2:	bf18      	it	ne
 800dba4:	b236      	sxthne	r6, r6
 800dba6:	e7ef      	b.n	800db88 <_printf_i+0xbc>
 800dba8:	682b      	ldr	r3, [r5, #0]
 800dbaa:	6820      	ldr	r0, [r4, #0]
 800dbac:	1d19      	adds	r1, r3, #4
 800dbae:	6029      	str	r1, [r5, #0]
 800dbb0:	0601      	lsls	r1, r0, #24
 800dbb2:	d501      	bpl.n	800dbb8 <_printf_i+0xec>
 800dbb4:	681e      	ldr	r6, [r3, #0]
 800dbb6:	e002      	b.n	800dbbe <_printf_i+0xf2>
 800dbb8:	0646      	lsls	r6, r0, #25
 800dbba:	d5fb      	bpl.n	800dbb4 <_printf_i+0xe8>
 800dbbc:	881e      	ldrh	r6, [r3, #0]
 800dbbe:	4854      	ldr	r0, [pc, #336]	; (800dd10 <_printf_i+0x244>)
 800dbc0:	2f6f      	cmp	r7, #111	; 0x6f
 800dbc2:	bf0c      	ite	eq
 800dbc4:	2308      	moveq	r3, #8
 800dbc6:	230a      	movne	r3, #10
 800dbc8:	2100      	movs	r1, #0
 800dbca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dbce:	6865      	ldr	r5, [r4, #4]
 800dbd0:	60a5      	str	r5, [r4, #8]
 800dbd2:	2d00      	cmp	r5, #0
 800dbd4:	bfa2      	ittt	ge
 800dbd6:	6821      	ldrge	r1, [r4, #0]
 800dbd8:	f021 0104 	bicge.w	r1, r1, #4
 800dbdc:	6021      	strge	r1, [r4, #0]
 800dbde:	b90e      	cbnz	r6, 800dbe4 <_printf_i+0x118>
 800dbe0:	2d00      	cmp	r5, #0
 800dbe2:	d04d      	beq.n	800dc80 <_printf_i+0x1b4>
 800dbe4:	4615      	mov	r5, r2
 800dbe6:	fbb6 f1f3 	udiv	r1, r6, r3
 800dbea:	fb03 6711 	mls	r7, r3, r1, r6
 800dbee:	5dc7      	ldrb	r7, [r0, r7]
 800dbf0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dbf4:	4637      	mov	r7, r6
 800dbf6:	42bb      	cmp	r3, r7
 800dbf8:	460e      	mov	r6, r1
 800dbfa:	d9f4      	bls.n	800dbe6 <_printf_i+0x11a>
 800dbfc:	2b08      	cmp	r3, #8
 800dbfe:	d10b      	bne.n	800dc18 <_printf_i+0x14c>
 800dc00:	6823      	ldr	r3, [r4, #0]
 800dc02:	07de      	lsls	r6, r3, #31
 800dc04:	d508      	bpl.n	800dc18 <_printf_i+0x14c>
 800dc06:	6923      	ldr	r3, [r4, #16]
 800dc08:	6861      	ldr	r1, [r4, #4]
 800dc0a:	4299      	cmp	r1, r3
 800dc0c:	bfde      	ittt	le
 800dc0e:	2330      	movle	r3, #48	; 0x30
 800dc10:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc14:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dc18:	1b52      	subs	r2, r2, r5
 800dc1a:	6122      	str	r2, [r4, #16]
 800dc1c:	f8cd a000 	str.w	sl, [sp]
 800dc20:	464b      	mov	r3, r9
 800dc22:	aa03      	add	r2, sp, #12
 800dc24:	4621      	mov	r1, r4
 800dc26:	4640      	mov	r0, r8
 800dc28:	f7ff fee2 	bl	800d9f0 <_printf_common>
 800dc2c:	3001      	adds	r0, #1
 800dc2e:	d14c      	bne.n	800dcca <_printf_i+0x1fe>
 800dc30:	f04f 30ff 	mov.w	r0, #4294967295
 800dc34:	b004      	add	sp, #16
 800dc36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc3a:	4835      	ldr	r0, [pc, #212]	; (800dd10 <_printf_i+0x244>)
 800dc3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dc40:	6829      	ldr	r1, [r5, #0]
 800dc42:	6823      	ldr	r3, [r4, #0]
 800dc44:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc48:	6029      	str	r1, [r5, #0]
 800dc4a:	061d      	lsls	r5, r3, #24
 800dc4c:	d514      	bpl.n	800dc78 <_printf_i+0x1ac>
 800dc4e:	07df      	lsls	r7, r3, #31
 800dc50:	bf44      	itt	mi
 800dc52:	f043 0320 	orrmi.w	r3, r3, #32
 800dc56:	6023      	strmi	r3, [r4, #0]
 800dc58:	b91e      	cbnz	r6, 800dc62 <_printf_i+0x196>
 800dc5a:	6823      	ldr	r3, [r4, #0]
 800dc5c:	f023 0320 	bic.w	r3, r3, #32
 800dc60:	6023      	str	r3, [r4, #0]
 800dc62:	2310      	movs	r3, #16
 800dc64:	e7b0      	b.n	800dbc8 <_printf_i+0xfc>
 800dc66:	6823      	ldr	r3, [r4, #0]
 800dc68:	f043 0320 	orr.w	r3, r3, #32
 800dc6c:	6023      	str	r3, [r4, #0]
 800dc6e:	2378      	movs	r3, #120	; 0x78
 800dc70:	4828      	ldr	r0, [pc, #160]	; (800dd14 <_printf_i+0x248>)
 800dc72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dc76:	e7e3      	b.n	800dc40 <_printf_i+0x174>
 800dc78:	0659      	lsls	r1, r3, #25
 800dc7a:	bf48      	it	mi
 800dc7c:	b2b6      	uxthmi	r6, r6
 800dc7e:	e7e6      	b.n	800dc4e <_printf_i+0x182>
 800dc80:	4615      	mov	r5, r2
 800dc82:	e7bb      	b.n	800dbfc <_printf_i+0x130>
 800dc84:	682b      	ldr	r3, [r5, #0]
 800dc86:	6826      	ldr	r6, [r4, #0]
 800dc88:	6961      	ldr	r1, [r4, #20]
 800dc8a:	1d18      	adds	r0, r3, #4
 800dc8c:	6028      	str	r0, [r5, #0]
 800dc8e:	0635      	lsls	r5, r6, #24
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	d501      	bpl.n	800dc98 <_printf_i+0x1cc>
 800dc94:	6019      	str	r1, [r3, #0]
 800dc96:	e002      	b.n	800dc9e <_printf_i+0x1d2>
 800dc98:	0670      	lsls	r0, r6, #25
 800dc9a:	d5fb      	bpl.n	800dc94 <_printf_i+0x1c8>
 800dc9c:	8019      	strh	r1, [r3, #0]
 800dc9e:	2300      	movs	r3, #0
 800dca0:	6123      	str	r3, [r4, #16]
 800dca2:	4615      	mov	r5, r2
 800dca4:	e7ba      	b.n	800dc1c <_printf_i+0x150>
 800dca6:	682b      	ldr	r3, [r5, #0]
 800dca8:	1d1a      	adds	r2, r3, #4
 800dcaa:	602a      	str	r2, [r5, #0]
 800dcac:	681d      	ldr	r5, [r3, #0]
 800dcae:	6862      	ldr	r2, [r4, #4]
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	f7f2 fa94 	bl	80001e0 <memchr>
 800dcb8:	b108      	cbz	r0, 800dcbe <_printf_i+0x1f2>
 800dcba:	1b40      	subs	r0, r0, r5
 800dcbc:	6060      	str	r0, [r4, #4]
 800dcbe:	6863      	ldr	r3, [r4, #4]
 800dcc0:	6123      	str	r3, [r4, #16]
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcc8:	e7a8      	b.n	800dc1c <_printf_i+0x150>
 800dcca:	6923      	ldr	r3, [r4, #16]
 800dccc:	462a      	mov	r2, r5
 800dcce:	4649      	mov	r1, r9
 800dcd0:	4640      	mov	r0, r8
 800dcd2:	47d0      	blx	sl
 800dcd4:	3001      	adds	r0, #1
 800dcd6:	d0ab      	beq.n	800dc30 <_printf_i+0x164>
 800dcd8:	6823      	ldr	r3, [r4, #0]
 800dcda:	079b      	lsls	r3, r3, #30
 800dcdc:	d413      	bmi.n	800dd06 <_printf_i+0x23a>
 800dcde:	68e0      	ldr	r0, [r4, #12]
 800dce0:	9b03      	ldr	r3, [sp, #12]
 800dce2:	4298      	cmp	r0, r3
 800dce4:	bfb8      	it	lt
 800dce6:	4618      	movlt	r0, r3
 800dce8:	e7a4      	b.n	800dc34 <_printf_i+0x168>
 800dcea:	2301      	movs	r3, #1
 800dcec:	4632      	mov	r2, r6
 800dcee:	4649      	mov	r1, r9
 800dcf0:	4640      	mov	r0, r8
 800dcf2:	47d0      	blx	sl
 800dcf4:	3001      	adds	r0, #1
 800dcf6:	d09b      	beq.n	800dc30 <_printf_i+0x164>
 800dcf8:	3501      	adds	r5, #1
 800dcfa:	68e3      	ldr	r3, [r4, #12]
 800dcfc:	9903      	ldr	r1, [sp, #12]
 800dcfe:	1a5b      	subs	r3, r3, r1
 800dd00:	42ab      	cmp	r3, r5
 800dd02:	dcf2      	bgt.n	800dcea <_printf_i+0x21e>
 800dd04:	e7eb      	b.n	800dcde <_printf_i+0x212>
 800dd06:	2500      	movs	r5, #0
 800dd08:	f104 0619 	add.w	r6, r4, #25
 800dd0c:	e7f5      	b.n	800dcfa <_printf_i+0x22e>
 800dd0e:	bf00      	nop
 800dd10:	0800e42d 	.word	0x0800e42d
 800dd14:	0800e43e 	.word	0x0800e43e

0800dd18 <__retarget_lock_acquire_recursive>:
 800dd18:	4770      	bx	lr

0800dd1a <__retarget_lock_release_recursive>:
 800dd1a:	4770      	bx	lr

0800dd1c <memmove>:
 800dd1c:	4288      	cmp	r0, r1
 800dd1e:	b510      	push	{r4, lr}
 800dd20:	eb01 0402 	add.w	r4, r1, r2
 800dd24:	d902      	bls.n	800dd2c <memmove+0x10>
 800dd26:	4284      	cmp	r4, r0
 800dd28:	4623      	mov	r3, r4
 800dd2a:	d807      	bhi.n	800dd3c <memmove+0x20>
 800dd2c:	1e43      	subs	r3, r0, #1
 800dd2e:	42a1      	cmp	r1, r4
 800dd30:	d008      	beq.n	800dd44 <memmove+0x28>
 800dd32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd3a:	e7f8      	b.n	800dd2e <memmove+0x12>
 800dd3c:	4402      	add	r2, r0
 800dd3e:	4601      	mov	r1, r0
 800dd40:	428a      	cmp	r2, r1
 800dd42:	d100      	bne.n	800dd46 <memmove+0x2a>
 800dd44:	bd10      	pop	{r4, pc}
 800dd46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd4e:	e7f7      	b.n	800dd40 <memmove+0x24>

0800dd50 <_realloc_r>:
 800dd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd54:	4680      	mov	r8, r0
 800dd56:	4614      	mov	r4, r2
 800dd58:	460e      	mov	r6, r1
 800dd5a:	b921      	cbnz	r1, 800dd66 <_realloc_r+0x16>
 800dd5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd60:	4611      	mov	r1, r2
 800dd62:	f7ff bc39 	b.w	800d5d8 <_malloc_r>
 800dd66:	b92a      	cbnz	r2, 800dd74 <_realloc_r+0x24>
 800dd68:	f7ff fbca 	bl	800d500 <_free_r>
 800dd6c:	4625      	mov	r5, r4
 800dd6e:	4628      	mov	r0, r5
 800dd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd74:	f000 f81b 	bl	800ddae <_malloc_usable_size_r>
 800dd78:	4284      	cmp	r4, r0
 800dd7a:	4607      	mov	r7, r0
 800dd7c:	d802      	bhi.n	800dd84 <_realloc_r+0x34>
 800dd7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dd82:	d812      	bhi.n	800ddaa <_realloc_r+0x5a>
 800dd84:	4621      	mov	r1, r4
 800dd86:	4640      	mov	r0, r8
 800dd88:	f7ff fc26 	bl	800d5d8 <_malloc_r>
 800dd8c:	4605      	mov	r5, r0
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	d0ed      	beq.n	800dd6e <_realloc_r+0x1e>
 800dd92:	42bc      	cmp	r4, r7
 800dd94:	4622      	mov	r2, r4
 800dd96:	4631      	mov	r1, r6
 800dd98:	bf28      	it	cs
 800dd9a:	463a      	movcs	r2, r7
 800dd9c:	f7ff fb9a 	bl	800d4d4 <memcpy>
 800dda0:	4631      	mov	r1, r6
 800dda2:	4640      	mov	r0, r8
 800dda4:	f7ff fbac 	bl	800d500 <_free_r>
 800dda8:	e7e1      	b.n	800dd6e <_realloc_r+0x1e>
 800ddaa:	4635      	mov	r5, r6
 800ddac:	e7df      	b.n	800dd6e <_realloc_r+0x1e>

0800ddae <_malloc_usable_size_r>:
 800ddae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddb2:	1f18      	subs	r0, r3, #4
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	bfbc      	itt	lt
 800ddb8:	580b      	ldrlt	r3, [r1, r0]
 800ddba:	18c0      	addlt	r0, r0, r3
 800ddbc:	4770      	bx	lr
	...

0800ddc0 <_init>:
 800ddc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc2:	bf00      	nop
 800ddc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddc6:	bc08      	pop	{r3}
 800ddc8:	469e      	mov	lr, r3
 800ddca:	4770      	bx	lr

0800ddcc <_fini>:
 800ddcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddce:	bf00      	nop
 800ddd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddd2:	bc08      	pop	{r3}
 800ddd4:	469e      	mov	lr, r3
 800ddd6:	4770      	bx	lr
